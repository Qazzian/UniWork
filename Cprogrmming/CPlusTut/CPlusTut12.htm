<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0050)http://www.cprogramming.com/tutorial/lesson12.html -->
<HTML><HEAD><TITLE>Cprogramming.com - Tutorials</TITLE>
<META content="C and C++ game programming" http-equiv=name>
<META 
content="C++ programming, programmers, C++ tutorial, C, source code, tutorials, C++ compiler, DJGPPorials " 
name=keywords>
<META 
content="Cprogramming.com is a combination of C++ tutorials, compiler information, programming links, a VERY ACTIVE programming message board, and C and C++ source code ." 
name=description>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type>
<META content="MSHTML 5.00.2920.0" name=GENERATOR></HEAD>
<BODY bgColor=white link=#ff0008 vLink=#ff0008>
<TABLE border=0 cellPadding=0 cellSpacing=0>
  <TBODY>
  <TR>
    <TD bgColor=black vAlign=top width=1><IMG height=62 
      src="CPlusTut12_files/line.gif" width=1> </TD>
    <TD vAlign=top width=92><IMG height=63 src="CPlusTut12_files/one.gif" 
      width=92><BR><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><A href="http://www.cprogramming.com/index.html">Home</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><IMG alt=Learn height=30 
      src="CPlusTut12_files/learn.gif" width=92><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><!a href="tutorial.html">Tutorials</A> 
            <LI><A href="http://www.cprogramming.com/source.html">Source</A> 
            <LI><A href="http://www.cprogramming.com/books.html">Books</A> 
            <LI><A href="http://www.cprogramming.com/links.html">Links</A> 
            <LI><A href="http://www.cprogramming.com/cgi-bin/quiz.cgi">Quiz</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><IMG alt=Learn height=30 
      src="CPlusTut12_files/comp.gif" width=92><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><A href="http://www.cprogramming.com/borland.html">Borland</A> 
            <LI><A href="http://www.cprogramming.com/djgpp.html">DJGPP</A> 
            <LI><A href="http://www.cprogramming.com/other.html">Other</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><IMG alt=Learn height=30 
      src="CPlusTut12_files/q.gif" width=92><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><A href="http://www.cprogramming.com/board.html">C board</A> 
            <LI><A href="http://www.cprogramming.com/email.html">Email</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><!_______KRONOS IMAGE___________><BR><BR><A 
      href="http://www.kronosdesign.com/"><IMG alt="DESIGN by Kronos" border=0 
      height=29 src="CPlusTut12_files/kronos.gif" width=92></A> <!_______KRONOS IMAGE___________></TD>
    <TD bgColor=#dfdfdf vAlign=top width=1><IMG height=1 
      src="CPlusTut12_files/dot.gif" width=1></TD>
    <TD vAlign=top><A href="http://www.cprogramming.com/"><IMG 
      alt="Cprogramming.com - your resource for C/C++" border=0 height=111 
      src="CPlusTut12_files/cprog.gif" width=497>
      <CENTER></A><!--Begin Flycast Ad Copyright 1999 Flycast Communications. 
    All rights reserved. Patent Pending -->
      <SCRIPT language=JAVASCRIPT>
    <!--
    FlycastSite	= "CprogrammingcomProgramminginC";
    FlycastPage	= "allofsite";
    FlycastWidth	= 468;
    FlycastHeight	= 60;
    FlycastPrintTag	= true;
    FlycastNewAd	= true;
    FlycastLoaded	= false;
    FlycastVersion	= 3.5;
    //-->
    </SCRIPT>

      <SCRIPT language=JAVASCRIPT 
      src="CPlusTut12_files/FlycastUniversal"></SCRIPT>

      <SCRIPT language=JAVASCRIPT>
    <!--
	if (FlycastLoaded) FlycastDeliverAd();
    //-->
    </SCRIPT>
      <NOSCRIPT><IFRAME frameBorder=0 height=60 marginHeight=0 marginWidth=0 
      scrolling=no src="CPlusTut12_files/6112898.htm" 
      width=468>
	<A target="_top" HREF="http://ad-adex3.flycast.com/server/click/CprogrammingcomProgramminginC/allofsite/123456"><IMG BORDER=0 WIDTH=468 HEIGHT=60 SRC="http://ad-adex3.flycast.com/server/img/CprogrammingcomProgramminginC/allofsite/123456"></A>
	</IFRAME></IFRAME></NOSCRIPT><!--End Flycast Ad Copyright 1999 Flycast Communications. All rights reserved. Patent Pending --></CENTER>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=20></TD>
          <TD><FONT face=arial size=3>
            <H3>Lesson 12: Introduction to Classes</H3>C++ is a bunch of small 
            additions to C, and one major addition. This one addition is the 
            object-oriented approach. As its name suggests, this deals with 
            objects. Of course, these are not real-life objects. Instead, these 
            objects are the essential definitions of real world objects. 
            Structures are one step away from these objects, they do not possess 
            one element of them: functions. The definitions of these objects are 
            called classes. The easiest way to think about a class is to imagine 
            a structure that has functions. <BR><BR>What is this mysterious 
            structure (not the programming type)? Well, it is not only a 
            collection of variables under one heading, but it is a collection of 
            functions under that same heading. If the structure is a house, then 
            the functions will be the doors and the variables will be the items 
            inside the house. They usually will be the only way to modify the 
            variables in this structure, and they are usually the only to access 
            the variables in this structure. <BR>The idea to make programs more 
            modular. A section of code will have its own functions and variables 
            that control what it can do, and it does not require anything 
            outside of itself to function. While the class may require 
            initialization with data, it does not require outside variables or 
            functions to manipulate the data. That allows programs to reuse the 
            same code more easily. <BR>From now on, we shall call these 
            structures with functions classes (I guess Marx would not like C++). 
            The syntax for these classes is simple. First, you put the keyword 
            'class' then the name of the class. Our example will use the name 
            computer. Then you put an open bracket. Before putting down the 
            different variables, it is necessary to put the degree of 
            restriction on the variable. There are three levels of restriction. 
            The first is public, the second protected, and the third private. 
            For now, all you need to know is that the public restriction allows 
            any part of the program, including that which is not part of the 
            class, access the variables specified as public. The protected 
            restriction prevents functions outside the class to access the 
            variable. The syntax for that is merely the restriction keyword 
            (public, private, protected) and then a colon. Finally, you put the 
            different variables and functions (You usually will only put the 
            function prototype[s]) you want to be part of the class. Then you 
            put a closing bracket and semicolon. Keep in mind that you still 
            must end the function prototype(s) with a semi-colon.<BR><BR>Classes 
            should always contain two functions: the constructor and destructor. 
            The syntax for them is simple, the class name denotes a constructor, 
            a ~ before the class name is a destructor. The basic idea is to have 
            the constructor initialize variables, and to have the destructor 
            clean up after the class, which includes freeing any memory 
            allocated. The only time the constructor is called is when the 
            programmer declares an instance of the class, which will 
            automatically call the constructor. The only time the destructor is 
            called is when the instance of the class is no longer needed. When 
            the program ends, or when its memory is deallocated (if you do not 
            understand the deallocation part, do not worry). Keeps in mind this: 
            NEITHER constructors NOR destructors RETURN AN ARGUMENT! This means 
            you do not want to try to return a value in them.<BR><BR>The syntax 
            for defining a function that is a member of a class outside of the 
            actual class definition is to put the return type, then put the 
            class name, two colons, and then the function name. This tells the 
            compiler that the function is a member of that class.<BR><BR>For 
            example:<PRE>void Aclass::aFunction()
{
  cout&lt;&lt;"Whatever code";
}


#include &lt;iostream.h&gt;
class Computer //Standard way of defining the class
{
 public: 
	//This means that all of the functions below this(and any variables)
 	//are accessible to the rest of the program.
 	//NOTE: That is a colon, NOT a semicolon...
Computer();
	//Constructor
 ~Computer();
	//Destructor
 void setspeed(int p);
 int readspeed();
		//These functions will be defined outside of the class
protected:
   //This means that all the variables under this, until a new type of
   //restriction is placed, will only be accessible to other functions in the
   //class.  NOTE: That is a colon, NOT a semicolon...
int processorspeed;
};		
   //Do Not forget the trailing semi-colon

Computer::Computer() 
{	//Constructors can accept arguments, but this one does not
  processorspeed = 0; 
		//Initializes it to zero
}

Computer::~Computer()
{		//Destructors do not accept arguments
} 
//The destructor does not need to do anything.

void Computer::setspeed(int p) 
{       //To define a function outside put the name of the function 
	//after the return type and then two colons, and then the name 
	//of the function. 
  processorspeed = p;
}
int Computer::readspeed()  
{	//The two colons simply tell the compiler that the function is part
	//of the clas
  return processorspeed;
}
int main()
{
  Computer compute;  
	 //To create an 'instance' of the class, simply treat it like you would
  	 //a structure.  (An instance is simply when you create an actual object
	 //from the class, as opposed to having the definition of the class)
  compute.setspeed(100); 
	 //To call functions in the class, you put the name of the instance,
  	 //a period, and then the function name.
  cout&lt;&lt;compute.readspeed();
	 //See above note.
  return 0;
}
</PRE>As you can see, this is a rather simple concept. However, it 
            is very powerful. It makes it easy to prevent variables that are 
            contained (or owned) by the class being overwritten accidentally. It 
            also allows a totally different way of thinking about programming. I 
            want to end this tutorial as an introduction, however. 
        <BR></FONT></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!-- Start SuperStats code version 3.0a. -->
<SCRIPT language=JavaScript>
/* You may give each page an identifying name on the next line. */
var pageName = "";
/**** DO NOT ALTER ANYTHING BELOW THIS LINE! ****/
var code = " ";
function ss_escape(s) {
  plus=0; s=escape(s);
  while ((plus = s.indexOf("+")) > 0) {
    s = s.substr(0,plus) + "%2B" + s.substr(plus+1,s.length); }
  return s; }
var br=navigator.appName+parseInt(navigator.appVersion);
if(br=='Netscape2'); else {
var tda=new Date(); var jra=tda.getTime(); var nber=1000000000;
var rnber=0; var iaj=9301; var icj=49297; var imj=233280;
jra = (jra*iaj+icj) % imj; rnber=Math.ceil( (jra/(imj*1.0)) *nber);
var mded=Math.floor(tda.getTime()/10800000) % 10;
var smded=new String(mded); var n=smded+'ses'+rnber; 
var s_s="stats.superstats.com"; var s_a = navigator.appName;
if (navigator.userAgent.indexOf("Opera") != -1) superstats_appn
var s_s = "stats.superstats.com"; var s_a = navigator.appName;
if (navigator.userAgent.indexOf("Opera") != -1) s_a = "Opera";
var s_av = parseFloat(navigator.appVersion);
var _p; var _s = _c = _v = _k = ""; var _j = "1.0";
var _g = window.location.href; var _r = parent.document.referrer; var _o = navigator.platform;
var _t=new Date; t_display=_t.getDate()+'/'+_t.getMonth()+'/'+(_t.getYear()+1900)+' '+_t.getHours()+':'+_t.getMinutes()+':'+_t.getSeconds()+' '+_t.getDay()+' '+_t.getTimezoneOffset();
document.cookie = "ssAllowCookie=true";
var s_mc = "  " + document.cookie + ";";
_k = (s_mc.indexOf(" ssAllowCookie=") >= 0 ? "Y" : "N");
if (s_a== "Netscape")  {
  if (!_p) { _p = ""; _i1 = _i2 = 0;
    while ((_i1 < navigator.plugins.length) && (_i2 < 30)) {
      _s_t_a = navigator.plugins[_i1].name;
      if (_s_t_a.length > 100)
        _s_t_a = s_t_a.substring(0,100); _s_t_a += ';';
      if (_p.indexOf(_s_t_a) == -1)
        _p += _s_t_a; ++_i1; ++_i2; }
    _p = "&p=" + ss_escape(_p); }
  if (s_av >= 2.02) _j = "1.0"; if (s_av >= 3) _j = "1.1"; if (s_av >= 4) {
    _s = screen.width+'x'+screen.height; _c = screen.pixelDepth; _j = "1.2"; }
  if (s_av >= 4.06) _j = "1.3";
  _v = (navigator.javaEnabled() ? "Y" : "N"); }
if (s_a == "Microsoft Internet Explorer") {
  _p = ""; if (s_av < 4) _r = ""; if (s_av >= 3) _v = "P"; if (s_av >= 4) {
    _s = screen.width+'x'+screen.height; _c = screen.colorDepth; _j = "1.2"; _v = (navigator.javaEnabled() ? "Y" : "N"); } }
if (s_a == "Opera")  {
  if (! _p) { _p = ""; _i1 = _i2 = 0;
    while ((_i1 < navigator.plugins.length) && (_i2 < 30)) {
      _s_t_a = navigator.plugins[i1].name;
      if (_s_t_a.length > 100) _s_t_a = _s_t_a.substring(0,100) + ';';
      if (_p.indexOf(_s_t_a) == -1)
        _p += _s_t_a; ++_i1; ++_i2; }
    _p = "&p=" + ss_escape(_p); }
  _j = "1.0"; _v = "N"; }
if (! _p) _p = ""; if (! _g) _g = ""; if (! _r) _r = ""; if (! _o) _o = ""; var pageName; if (!pageName) pageName = '';
code = ''
     + '<img name="banner1_'+n+'" src="http://' + s_s + '/' + 'b.cgi?u=hmv_hmv_1491052&z=1&n='+n+'&fg=2&r=' + ss_escape(_r) + '&s=' + escape(_s) + '&c=' + escape(_c) + '&o=' + escape(_o) + '&g=' + ss_escape(_g) + '&a=' + ss_escape(s_a + ' ' + s_av) + _p + '&j=' + _j + '&v=' + _v + '&k=' + _k + '&t=' + ss_escape(t_display) + '&pageName=' + ss_escape(pageName) + '" border=0 width=1 height=1>';
document.write(code); }
</SCRIPT>
<NOSCRIPT><IMG border=0 height=1 src="CPlusTut12_files/ss_transparent_2x2.gif" 
width=1> </NOSCRIPT><!-- End SuperStats tracking code. --></BODY></HTML>
