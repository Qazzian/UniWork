<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://www.cprogramming.com/tutorial/lesson6.html -->
<HTML><HEAD><TITLE>Cprogramming.com - Tutorials</TITLE>
<META content="C and C++ game programming" http-equiv=name>
<META 
content="C++ programming, programmers, C++ tutorial, C, source code, tutorials, C++ compiler, DJGPPorials " 
name=keywords>
<META 
content="Cprogramming.com is a combination of C++ tutorials, compiler information, programming links, a VERY ACTIVE programming message board, and C and C++ source code ." 
name=description>
<META content="text/html; charset=iso-8859-1" http-equiv=Content-Type>
<META content="MSHTML 5.00.2920.0" name=GENERATOR></HEAD>
<BODY bgColor=white link=#ff0008 vLink=#ff0008>
<TABLE border=0 cellPadding=0 cellSpacing=0>
  <TBODY>
  <TR>
    <TD bgColor=black vAlign=top width=1><IMG height=62 
      src="CPlusTut6_files/line.gif" width=1> </TD>
    <TD vAlign=top width=92><IMG height=63 src="CPlusTut6_files/one.gif" 
      width=92><BR><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><A href="http://www.cprogramming.com/index.html">Home</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><IMG alt=Learn height=30 
      src="CPlusTut6_files/learn.gif" width=92><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><!a href="tutorial.html">Tutorials</A> 
            <LI><A href="http://www.cprogramming.com/source.html">Source</A> 
            <LI><A href="http://www.cprogramming.com/books.html">Books</A> 
            <LI><A href="http://www.cprogramming.com/links.html">Links</A> 
            <LI><A href="http://www.cprogramming.com/cgi-bin/quiz.cgi">Quiz</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><IMG alt=Learn height=30 
      src="CPlusTut6_files/comp.gif" width=92><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><A href="http://www.cprogramming.com/borland.html">Borland</A> 
            <LI><A href="http://www.cprogramming.com/djgpp.html">DJGPP</A> 
            <LI><A href="http://www.cprogramming.com/other.html">Other</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><IMG alt=Learn height=30 
      src="CPlusTut6_files/q.gif" width=92><BR>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=3></TD>
          <TD><FONT color=#b4b4b4 face=arial size=2>
            <LI><A href="http://www.cprogramming.com/board.html">C board</A> 
            <LI><A href="http://www.cprogramming.com/email.html">Email</A> 
            </FONT></LI></TD></TR></TBODY></TABLE><!_______KRONOS IMAGE___________><BR><BR><A 
      href="http://www.kronosdesign.com/"><IMG alt="DESIGN by Kronos" border=0 
      height=29 src="CPlusTut6_files/kronos.gif" width=92></A> <!_______KRONOS IMAGE___________></TD>
    <TD bgColor=#dfdfdf vAlign=top width=1><IMG height=1 
      src="CPlusTut6_files/dot.gif" width=1></TD>
    <TD vAlign=top><A href="http://www.cprogramming.com/"><IMG 
      alt="Cprogramming.com - your resource for C/C++" border=0 height=111 
      src="CPlusTut6_files/cprog.gif" width=497>
      <CENTER></A><!--Begin Flycast Ad Copyright 1999 Flycast Communications. 
    All rights reserved. Patent Pending -->
      <SCRIPT language=JAVASCRIPT>
    <!--
    FlycastSite	= "CprogrammingcomProgramminginC";
    FlycastPage	= "allofsite";
    FlycastWidth	= 468;
    FlycastHeight	= 60;
    FlycastPrintTag	= true;
    FlycastNewAd	= true;
    FlycastLoaded	= false;
    FlycastVersion	= 3.5;
    //-->
    </SCRIPT>

      <SCRIPT language=JAVASCRIPT 
      src="CPlusTut6_files/FlycastUniversal"></SCRIPT>

      <SCRIPT language=JAVASCRIPT>
    <!--
	if (FlycastLoaded) FlycastDeliverAd();
    //-->
    </SCRIPT>
      <NOSCRIPT><IFRAME frameBorder=0 height=60 marginHeight=0 marginWidth=0 
      scrolling=no src="CPlusTut6_files/4626330.htm" 
      width=468>
	<A target="_top" HREF="http://ad-adex3.flycast.com/server/click/CprogrammingcomProgramminginC/allofsite/123456"><IMG BORDER=0 WIDTH=468 HEIGHT=60 SRC="http://ad-adex3.flycast.com/server/img/CprogrammingcomProgramminginC/allofsite/123456"></A>
	</IFRAME></IFRAME></NOSCRIPT><!--End Flycast Ad Copyright 1999 Flycast Communications. All rights reserved. Patent Pending --></CENTER>
      <TABLE>
        <TBODY>
        <TR>
          <TD width=20></TD>
          <TD><FONT face=arial size=3>
            <H3>Lesson 6: An introduction to pointers</H3>Pointers can be 
            confusing, and at times, you may wonder why you would ever want to 
            use them. The truth is, they can make some things much easier. For 
            example, using pointers is one way to have a function modify a 
            variable passed to it; it is also possible to use pointers to 
            dynamically allocate memory allows certain programming techniques, 
            such as linked lists. <BR>Pointers are what they sound 
            like...pointers. They point to locations in memory. Picture a big 
            jar that holds the location of another jar. In the other jar holds a 
            piece of paper with the number 12 written on it. The jar with the 12 
            is an integer, and the jar with the memory address of the 12 is a 
            pointer<BR><BR>Pointer syntax can also be confusing, because 
            pointers can both give the memory location and give the actual value 
            stored in that same location. When a pointer is declared, the syntax 
            is this: variable_type *name; Notice the *. This is the key to 
            declaring a pointer, if you use it before the variable name, it will 
            declare the variable to be a pointer. <BR><BR>As I have said, there 
            are two ways to use the pointer to access information about the 
            memory address it points to. It is possible to have it give the 
            actual address to another variable, or to pass it into a function. 
            To do so, simply use the name of the pointer without the *. However, 
            to access the actual memory location, use the *. The technical name 
            for this doing this is dereferencing. <BR><BR>In order to have a 
            pointer actually point to another variable it is necessary to have 
            the memory address of that variable also. To get the memory address 
            of the variable, put the &amp; sign in front of the variable name. 
            This makes it give its address. This is called the reference 
            operator, because it returns the memory address. <BR>For example:<PRE>#include &lt;iostream.h&gt;
int main()
{ 
 int x;              //A normal integer 
 int *pointer;    //A pointer to an integer 
 pointer=&amp;x;      //Read it, "pointer equals the address of x"
 cin&gt;&gt;x;          //Reads in x    
 cout&lt;&lt;*pointer; //Note the use of the * to output the actual number stored in x
 return 0;
}  </PRE><BR>The cout outputs the value in x. Why is that? Well, 
            look at the code. The integer is called x. A pointer to an integer 
            is then defined as "pointer". Then it stores the memory location of 
            x in pointer by using the ampersand (&amp;) symbol. If you wish, you 
            can think of it as if the jar that had the integer had a ampersand 
            in it then it would output its name (in pointers, the memory 
            address) Then the user inputs the value for x. Then the cout uses 
            the * to put the value stored in the memory location of pointer. If 
            the jar with the name of the other jar in it had a * in front of it 
            would give the value stored in the jar with the same name as the one 
            in the jar with the name. It is not too hard, the * gives the value 
            in the location. The unastricked gives the memory location. 
            <BR><BR>Notice that in the above example, pointer is initialized to 
            point to a specific memory address before it is used. If this was 
            not the case, it could be pointing to anything. This can lead to 
            extremely unpleasant consequences to the computer. You should always 
            initialize pointers before you use them.<BR><BR>It is also possible 
            to initialize pointers using free memory. This allows dynamic 
            allocation of array memory. It is most useful for setting up 
            structures called linked lists. This difficult topic is too complex 
            for this text. An understanding of the keywords new and delete will, 
            however, be tremendously helpful in the future.<BR><BR>The keyword 
            new is used to initialize pointers with memory from free store (a 
            section of memory available to all programs). The syntax looks like 
            the example:<BR><BR>Example:<BR>int *ptr = new int;<BR><BR>It 
            initializes ptr to point to a memory address of size int (because 
            variables have different sizes, number of bytes, this is necessary). 
            The memory that is pointed to becomes unavailable to other programs. 
            This means that the careful coder will free this memory at the end 
            of its usage.<BR><BR>The delete operator frees up the memory 
            allocated through new. To do so, the syntax is as in the 
            example.<BR><BR>Example:<BR>delete ptr; <BR><BR>After deleting a 
            pointer, it is a good idea to reset it to point to NULL. NULL is a 
            standard compiler-defined statement that sets the pointer to point 
            to, literally, nothing. By doing this, you minimize the potential 
            for doing something foolish with the pointer. <BR><BR>The final 
            implication of NULL is that if there is no more free memory, it is 
            possible for the ptr after being "new"-ed to point to NULL. 
            Therefore, it is good programming practice to check to ensure that 
            the pointer points to something before using it. Obviously, the 
            program is unlikely to work without this 
        check.<BR></FONT></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE><!-- Start SuperStats code version 3.0a. -->
<SCRIPT language=JavaScript>
/* You may give each page an identifying name on the next line. */
var pageName = "";
/**** DO NOT ALTER ANYTHING BELOW THIS LINE! ****/
var code = " ";
function ss_escape(s) {
  plus=0; s=escape(s);
  while ((plus = s.indexOf("+")) > 0) {
    s = s.substr(0,plus) + "%2B" + s.substr(plus+1,s.length); }
  return s; }
var br=navigator.appName+parseInt(navigator.appVersion);
if(br=='Netscape2'); else {
var tda=new Date(); var jra=tda.getTime(); var nber=1000000000;
var rnber=0; var iaj=9301; var icj=49297; var imj=233280;
jra = (jra*iaj+icj) % imj; rnber=Math.ceil( (jra/(imj*1.0)) *nber);
var mded=Math.floor(tda.getTime()/10800000) % 10;
var smded=new String(mded); var n=smded+'ses'+rnber; 
var s_s="stats.superstats.com"; var s_a = navigator.appName;
if (navigator.userAgent.indexOf("Opera") != -1) superstats_appn
var s_s = "stats.superstats.com"; var s_a = navigator.appName;
if (navigator.userAgent.indexOf("Opera") != -1) s_a = "Opera";
var s_av = parseFloat(navigator.appVersion);
var _p; var _s = _c = _v = _k = ""; var _j = "1.0";
var _g = window.location.href; var _r = parent.document.referrer; var _o = navigator.platform;
var _t=new Date; t_display=_t.getDate()+'/'+_t.getMonth()+'/'+(_t.getYear()+1900)+' '+_t.getHours()+':'+_t.getMinutes()+':'+_t.getSeconds()+' '+_t.getDay()+' '+_t.getTimezoneOffset();
document.cookie = "ssAllowCookie=true";
var s_mc = "  " + document.cookie + ";";
_k = (s_mc.indexOf(" ssAllowCookie=") >= 0 ? "Y" : "N");
if (s_a== "Netscape")  {
  if (!_p) { _p = ""; _i1 = _i2 = 0;
    while ((_i1 < navigator.plugins.length) && (_i2 < 30)) {
      _s_t_a = navigator.plugins[_i1].name;
      if (_s_t_a.length > 100)
        _s_t_a = s_t_a.substring(0,100); _s_t_a += ';';
      if (_p.indexOf(_s_t_a) == -1)
        _p += _s_t_a; ++_i1; ++_i2; }
    _p = "&p=" + ss_escape(_p); }
  if (s_av >= 2.02) _j = "1.0"; if (s_av >= 3) _j = "1.1"; if (s_av >= 4) {
    _s = screen.width+'x'+screen.height; _c = screen.pixelDepth; _j = "1.2"; }
  if (s_av >= 4.06) _j = "1.3";
  _v = (navigator.javaEnabled() ? "Y" : "N"); }
if (s_a == "Microsoft Internet Explorer") {
  _p = ""; if (s_av < 4) _r = ""; if (s_av >= 3) _v = "P"; if (s_av >= 4) {
    _s = screen.width+'x'+screen.height; _c = screen.colorDepth; _j = "1.2"; _v = (navigator.javaEnabled() ? "Y" : "N"); } }
if (s_a == "Opera")  {
  if (! _p) { _p = ""; _i1 = _i2 = 0;
    while ((_i1 < navigator.plugins.length) && (_i2 < 30)) {
      _s_t_a = navigator.plugins[i1].name;
      if (_s_t_a.length > 100) _s_t_a = _s_t_a.substring(0,100) + ';';
      if (_p.indexOf(_s_t_a) == -1)
        _p += _s_t_a; ++_i1; ++_i2; }
    _p = "&p=" + ss_escape(_p); }
  _j = "1.0"; _v = "N"; }
if (! _p) _p = ""; if (! _g) _g = ""; if (! _r) _r = ""; if (! _o) _o = ""; var pageName; if (!pageName) pageName = '';
code = ''
     + '<img name="banner1_'+n+'" src="http://' + s_s + '/' + 'b.cgi?u=hmv_hmv_1491052&z=1&n='+n+'&fg=2&r=' + ss_escape(_r) + '&s=' + escape(_s) + '&c=' + escape(_c) + '&o=' + escape(_o) + '&g=' + ss_escape(_g) + '&a=' + ss_escape(s_a + ' ' + s_av) + _p + '&j=' + _j + '&v=' + _v + '&k=' + _k + '&t=' + ss_escape(t_display) + '&pageName=' + ss_escape(pageName) + '" border=0 width=1 height=1>';
document.write(code); }
</SCRIPT>
<NOSCRIPT><IMG border=0 height=1 src="CPlusTut6_files/ss_transparent_2x2.gif" 
width=1> </NOSCRIPT><!-- End SuperStats tracking code. --></BODY></HTML>
