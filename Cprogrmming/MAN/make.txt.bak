


MAKE(1L)		     LOCAL USER COMMANDS		     MAKE(1L)



NAME
  make - GNU make utility to maintain groups of programs

SYNOPSIS
  mmaakkee [ --ff _makefile ] [ option ] ...  target ...

WARNING
  This man page is an extract of the documentation of GNU make . It is
  updated only occasionally, because the GNU project does not use nroff.  For
  complete, current documentation, refer to the Info file mmaakkee..iinnffoo which is
  made from the Texinfo source file mmaakkee..tteexxiinnffoo.

DESCRIPTION

  The purpose of the make utility is to determine automatically which pieces
  of a large program need to be recompiled, and issue the commands to recom-
  pile them.  The manual describes the GNU implementation of make, which was
  written by Richard Stallman and Roland McGrath.  Our examples show C pro-
  grams, since they are most common, but you can use make with any program-
  ming language whose compiler can be run with a shell command.	 In fact,
  make is not limited to programs.  You can use it to describe any task where
  some files must be updated automatically from others whenever the others
  change.

  To prepare to use make, you must write a file called the makefile that
  describes the relationships among files in your program, and the states the
  commands for updating each file.  In a program, typically the executable
  file is updated from object files, which are in turn made by compiling
  source files.

  Once a suitable makefile exists, each time you change some source files,
  this simple shell command:

       mmaakkee

  suffices to perform all necessary recompilations.  The make program uses
  the makefile data base and the last-modification times of the files to
  decide which of the files need to be updated.	 For each of those files, it
  issues the commands recorded in the data base.

  make executes commands in the makefile to update one or more target names,
  where name is typically a program.  If no --ff option is present, make will
  look for the makefiles GNUmakefile, makefile, and Makefile, in that order.

  Normally you should call your makefile either makefile or Makefile.  (We
  recommend Makefile because it appears prominently near the beginning of a
  directory listing, right near other important files such as README.) The
  first name checked, GNUmakefile, is not recommended for most makefiles.
  You should use this name if you have a makefile that is specific to GNU
  make, and will not be understood by other versions of make.  If makefile is
  `-', the standard input is read.


  make updates a target if it depends on prerequisite files that have been
  modified since the target was last modified, or if the target does not
  exist.



OPTIONS


  --bb

  --mm   These options are ignored for compatibility with other versions of
       make.

  --CC dir
       Change to directory dir before reading the makefiles or doing anything
       else.  If multiple --CC options are specified, each is interpreted rela-
       tive to the previous one: --CC / --CC etc is equivalent to --CC /etc.	This
       is typically used with recursive invocations of make.

  --dd   Print debugging information in addition to normal processing.  The
       debugging information says which files are being considered for remak-
       ing, which file-times are being compared and with what results, which
       files actually need to be remade, which implicit rules are considered
       and which are applied---everything interesting about how make decides
       what to do.

  --ee   Give variables taken from the environment precedence over variables
       from makefiles.

  --ff file
       Use file as a makefile.

  --ii   Ignore all errors in commands executed to remake files.

  --II dir
       Specifies a directory dir to search for included makefiles.  If
       several --II options are used to specify several directories, the direc-
       tories are searched in the order specified.  Unlike the arguments to
       other flags of make, directories given with --II flags may come directly
       after the flag: --IIdir is allowed, as well as --II dir.  This syntax is
       allowed for compatibility with the C preprocessor's --II flag.

  --jj jobs
       Specifies the number of jobs (commands) to run simultaneously.  If
       there is more than one --jj option, the last one is effective.  If the
       --jj option is given without an argument, make will not limit the number
       of jobs that can run simultaneously.

  --kk   Continue as much as possible after an error.  While the target that
       failed, and those that depend on it, cannot be remade, the other
       dependencies of these targets can be processed all the same.

  --ll

  --ll load
       Specifies that no new jobs (commands) should be started if there are
       others jobs running and the load average is at least load (a
       floating-point number).	With no argument, removes a previous load
       limit.

  --nn   Print the commands that would be executed, but do not execute them.

  --oo file
       Do not remake the file file even if it is older than its dependencies,
       and do not remake anything on account of changes in file.  Essentially
       the file is treated as very old and its rules are ignored.

  --pp   Print the data base (rules and variable values) that results from
       reading the makefiles; then execute as usual or as otherwise speci-
       fied.  This also prints the version information given by the --vv switch
       (see below).  To print the data base without trying to remake any
       files, use mmaakkee --pp --ff/dev/null.

  --qq   ``Question mode''.  Do not run any commands, or print anything; just
       return an exit status that is zero if the specified targets are
       already up to date, nonzero otherwise.

  --rr   Eliminate use of the built-in implicit rules.  Also clear out the
       default list of suffixes for suffix rules.

  --ss   Silent operation; do not print the commands as they are executed.

  --SS   Cancel the effect of the --kk option.  This is never necessary except in
       a recursive make where --kk might be inherited from the top-level make
       via MAKEFLAGS or if you set --kk in MAKEFLAGS in your environment.

  --tt   Touch files (mark them up to date without really changing them)
       instead of running their commands.  This is used to pretend that the
       commands were done, in order to fool future invocations of make.

  --vv   Print the version of the make program plus a copyright, a list of
       authors and a notice that there is no warranty.

  --ww   Print a message containing the working directory before and after
       other processing.  This may be useful for tracking down errors from
       complicated nests of recursive make commands.

  --WW file
       Pretend that the target file has just been modified.  When used with
       the --nn flag, this shows you what would happen if you were to modify
       that file.  Without --nn, it is almost the same as running a touch com-
       mand on the given file before running make, except that the modifica-
       tion time is changed only in the imagination of make.

SEE ALSO
  The GNU Make Manual

BUGS
  See the chapter `Problems and Bugs' in The GNU Make Manual .

AUTHOR
  This manual page contributed by Dennis Morse of Stanford University.	It
  has been reworked by Roland McGrath.
























