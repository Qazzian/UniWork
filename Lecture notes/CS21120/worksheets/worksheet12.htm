<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./worksheet12_files/filelist.xml">
<title>CS21120 Math practical</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>ltt</o:Author>
  <o:LastAuthor>Mark Ratcliffe</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>27</o:TotalTime>
  <o:Created>2000-05-02T11:00:00Z</o:Created>
  <o:LastSaved>2000-05-02T11:00:00Z</o:LastSaved>
  <o:Pages>3</o:Pages>
  <o:Words>1087</o:Words>
  <o:Characters>6200</o:Characters>
  <o:Company> </o:Company>
  <o:Lines>51</o:Lines>
  <o:Paragraphs>12</o:Paragraphs>
  <o:CharactersWithSpaces>7614</o:CharactersWithSpaces>
  <o:Version>9.2720</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>0</w:DisplayVerticalDrawingGridEvery>
  <w:UseMarginsForDrawingGridOrigin/>
  <w:Compatibility>
   <w:FootnoteLayoutLikeWW8/>
   <w:ShapeLayoutLikeWW8/>
   <w:AlignTablesRowByRow/>
   <w:ForgetLastTabAlignment/>
   <w:LayoutRawTableWidth/>
   <w:LayoutTableRowsApart/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Courier;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:0pt;
	mso-bidi-font-weight:normal;}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 207.65pt right 415.3pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:center 207.65pt right 415.3pt;
	font-size:12.0pt;
	mso-bidi-font-size:10.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.Style1, li.Style1, div.Style1
	{mso-style-name:Style1;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:Courier;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";
	color:black;
	layout-grid-mode:line;
	font-weight:bold;
	mso-bidi-font-weight:normal;}
@page Section1
	{size:595.45pt 841.7pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:35.3pt;
	mso-footer-margin:35.3pt;
	mso-footer:url("./worksheet12_files/header.htm") f1;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
@list l0
	{mso-list-id:179854644;
	mso-list-type:simple;
	mso-list-template-ids:67698703;}
@list l0:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l1
	{mso-list-id:703016696;
	mso-list-type:simple;
	mso-list-template-ids:1334202408;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:-;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:"Times New Roman";}
@list l2
	{mso-list-id:1261908000;
	mso-list-type:simple;
	mso-list-template-ids:67698703;}
@list l2:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l3
	{mso-list-id:1697807682;
	mso-list-type:simple;
	mso-list-template-ids:67698703;}
@list l3:level1
	{mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;}
@list l4
	{mso-list-id:1890074321;
	mso-list-type:simple;
	mso-list-template-ids:67698689;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.25in;
	mso-level-number-position:left;
	margin-left:.25in;
	text-indent:-.25in;
	font-family:Symbol;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="2050"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US style='tab-interval:.5in'>

<div class=Section1>

<h1>CSM03<span style='mso-tab-count:3'>                             </span>Practical
5<span style='mso-tab-count:2'>              </span>Spring 2000</h1>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The idea of this practical is to play around and learn <span
style='font-family:"Times New Roman"'>something about big O and the relative
complexity of algorithms O(n!), O(log n), O(n</span><sup><span
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>2</span></sup><span
style='font-family:"Times New Roman"'>), O(n.logn) - all this stuff is in Times
font</span>. Also, there’s some C and unix practice here!</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The idea came over the holidays when I was trying to do the
9 letter word game in the Western Mail. The idea is to make a 9 letter word out
of some jumbled letters.<span style="mso-spacerun: yes">  </span>I couldn’t do
one of them and said ‘well, you could certainly do that with a computer. ’<span
style="mso-spacerun: yes">  </span>So, that’s where our input will come from
(except I changed it to a 7 letter word because some of the unix utilities we
will use are not guaranteed for the number of 9 letter words we could
generate.)</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>So, the general steps
will be:<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .25in'><![if !supportLists]>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>generate all possible combinations of the jumbled letters and
place them in a file called <i style='mso-bidi-font-style:normal'>allwords</i></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .25in'><![if !supportLists]>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>find all the badly spelt words in <i style='mso-bidi-font-style:
normal'>allwords</i> and put them in <i style='mso-bidi-font-style:normal'>badspell</i></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .25in'><![if !supportLists]>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>sort <i style='mso-bidi-font-style:normal'>allwords </i>into <i
style='mso-bidi-font-style:normal'>sortwords</i> (because spell automatically
generates a sorted list of errors) </p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l0 level1 lfo2;
tab-stops:list .25in'><![if !supportLists]>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span><![endif]>compare <i style='mso-bidi-font-style:normal'>sortwords</i>
and <i style='mso-bidi-font-style:normal'>badspell</i> and the changes
indicated will show you the ‘good’ words</p>

<p class=MsoNormal>Before you go on, think about these steps – do they make
sense to you? Can you think of other ways to do the job? What utilities would
you need in order to do things differently?</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><b style='mso-bidi-font-weight:normal'>OK, now the detailed
steps:<o:p></o:p></b></p>

<p class=MsoNormal style='margin-left:.25in;text-indent:-.25in;mso-list:l3 level1 lfo3;
tab-stops:list .25in'><![if !supportLists]><b style='mso-bidi-font-weight:normal'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></b><![endif]><b
style='mso-bidi-font-weight:normal'>Generating the words<o:p></o:p></b></p>

<p class=MsoNormal>I used C for this. I could make excuses: I was at home with
no books, I had no Java on my system, ….. But the honest truth is it’s easier.
Here’s the program:</p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>void
main() {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes"> </span>char string[10];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes"> </span>char keep[8]=&quot;rutisom&quot;;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes"> </span>int i1,i2,i3,i4,i5,i6,i7; int num=0;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes"> </span>for (i1=0;i1&lt;7;i1++){<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">      </span>string[0]=keep[i1];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">      </span>for (i2=0;i2&lt;7;i2++) <o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">          </span>if (i2!=i1) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">             </span>string[1]=keep[i2];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">             </span>for (i3=0;i3&lt;7;i3++)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                 </span>if (i3!=i1 &amp;&amp; i3!=i2)
{<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                    </span>string[2]=keep[i3];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                    </span>for (i4=0;i4&lt;7;i4++)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                        </span>if (i4!=i3 &amp;&amp;
i4!=i2 &amp;&amp; i4!=i1) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                           </span>string[3]=keep[i4];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                           </span>for
(i5=0;i5&lt;7;i5++)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                </span><span style="mso-spacerun:
yes">                </span>if (i5!=i4 &amp;&amp; i5!=i3 &amp;&amp; <o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:3.0in'><span style='font-size:8.0pt;
mso-bidi-font-size:10.0pt'>i5!=i2 &amp;&amp; i5!=i1) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                                   
</span>string[4]=keep[i5];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                                    </span>for
(i6=0;i6&lt;7;i6++)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                                         </span>if
(i6!=i5 &amp;&amp; i6!=i4 &amp;&amp; i6!=i3<span style="mso-spacerun: yes">  
</span><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">       </span><span style="mso-spacerun:
yes">                                      </span>&amp;&amp; i6!=i2 &amp;&amp;
i6!=i1) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                                            
</span>string[5]=keep[i6];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                                            
</span>for (i7=0;i7&lt;7;i7++)<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:8.0pt;
mso-bidi-font-size:10.0pt'><span style="mso-spacerun:
yes">                                                  </span>if (i7 !=i6
&amp;&amp; i7!=i5 &amp;&amp; <o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:8.0pt;
mso-bidi-font-size:10.0pt'><span style="mso-spacerun:
yes">                                                      </span>i7!=i4
&amp;&amp; i7 !=i3 &amp;&amp;<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:3.5in;text-indent:.5in'><span
style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span style="mso-spacerun:
yes"> </span>i7!=i2 &amp;&amp; i7!=i1) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun:
yes">                                                           
</span>string[6]=keep[i7];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun:
yes">                                                           
</span>string[7]='\0';<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun:
yes">                                                            </span>num++;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun:
yes">                                                           
</span>printf(&quot;%s\n&quot;, string);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun:
yes">                                                        
</span>}}}}}}}}<span style="mso-spacerun: yes">                            
</span><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>A couple of things
that might need explaining: <o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in;text-indent:-.25in;mso-list:
l1 level1 lfo4;tab-stops:list .25in'><![if !supportLists]><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>C is not OO, so the
main function is a stand alone function that just runs, we don’t need
constructors or classes etc; <o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in;text-indent:-.25in;mso-list:
l1 level1 lfo4;tab-stops:list .25in'><![if !supportLists]><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Strings are
represented by arrays of char and end with a ‘\0’; <o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in;text-indent:-.25in;mso-list:
l1 level1 lfo4;tab-stops:list .25in'><![if !supportLists]><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><![endif]><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Printing needs a
format, in this case “%s \n” which prints a string with a line break after it.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>To run this program,
first save it in a file called <i style='mso-bidi-font-style:normal'>try.c</i>,
then compile it<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>          </span>cc try.c<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>The runnable file
will by default be <i style='mso-bidi-font-style:normal'>a.out</i>. <o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>To run it and put the
result in <i style='mso-bidi-font-style:normal'>allwords</i>, type:<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>          </span>a.out &gt; allwords<span
style='mso-tab-count:1'>       </span>(notice we’re redirecting output into
allwords)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'>Look at <i style='mso-bidi-font-style:normal'>allwords</i>
in gvim and how many lines (words) are in it. This is 7! because there are 7
ways of picking the first letter, and then having done that 6 ways of picking
the second, and so on. This gives 7*5*5*4*3*2*1 words.<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>(If you don’t believe
this, look at the letters A,B,C. There are 3 ways of picking the first:<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'><span
style='mso-tab-count:1'>            </span>A<span style='mso-tab-count:3'>                                 </span>or<span
style='mso-tab-count:1'>         </span>B<span style='mso-tab-count:3'>                                 </span>or
<span style='mso-tab-count:1'>        </span>C<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>now 2 letters left<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>B<span
style='mso-tab-count:1'>         </span>or<span style='mso-tab-count:1'>         </span>C<span
style='mso-tab-count:2'>                     </span>A<span style='mso-tab-count:
1'>         </span>or<span style='mso-tab-count:1'>         </span>C<span
style='mso-tab-count:2'>                     </span>A<span style='mso-tab-count:
1'>         </span>or<span style='mso-tab-count:1'>         </span>B<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>now only one letter
left<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>C<span
style='mso-tab-count:2'>                     </span>B<span style='mso-tab-count:
2'>                     </span>C<span style='mso-tab-count:2'>                     </span>A<span
style='mso-tab-count:2'>                     </span>B<span style='mso-tab-count:
2'>                     </span>A<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>reading down from
above you get<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>A<span
style='mso-tab-count:2'>                     </span>A<span style='mso-tab-count:
2'>                     </span>B<span style='mso-tab-count:2'>                     </span>B<span
style='mso-tab-count:2'>                     </span>C<span style='mso-tab-count:
2'>                     </span>C<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>B<span
style='mso-tab-count:2'>                     </span>C<span style='mso-tab-count:
2'>                     </span>A<span style='mso-tab-count:2'>                     </span>C<span
style='mso-tab-count:2'>                     </span>A<span style='mso-tab-count:
2'>                     </span>B<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>C<span
style='mso-tab-count:2'>                     </span>B<span style='mso-tab-count:
2'>                     </span>C<span style='mso-tab-count:2'>                     </span>A<span
style='mso-tab-count:2'>                     </span>B<span style='mso-tab-count:
2'>                     </span>A<o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.5in'><span style='font-size:12.0pt;
mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>This is 6 or 3!
combinations)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'>If you wish, modify the c code to produce an 8
letter word and marvel at how quickly the ! function grows! <o:p></o:p></span></p>

<p class=MsoPlainText><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>O(n!)</span></b><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>
algorithms are too slow to be useful for general n.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in;text-indent:-.25in;mso-list:
l3 level1 lfo3;tab-stops:list .25in'><![if !supportLists]><b style='mso-bidi-font-weight:
normal'><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:"Times New Roman"'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><![endif]><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:
"Times New Roman"'>Find badly spelt words<o:p></o:p></span></b></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>This is easy, because
unix has a command <i style='mso-bidi-font-style:normal'>spell</i>. Look at the
man page for it and then use it to generate the file <i style='mso-bidi-font-style:
normal'>badspell</i>. Remember to direct output to a file instead of the
screen, use the redirection symbol like I did above with a.out<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in;text-indent:-.25in;mso-list:
l3 level1 lfo3;tab-stops:list .25in'><![if !supportLists]><b style='mso-bidi-font-weight:
normal'><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:"Times New Roman"'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><![endif]><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:
"Times New Roman"'>Sort the complete list of words<o:p></o:p></span></b></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Again, there’s a unix
utility <i style='mso-bidi-font-style:normal'>sort </i>which does just this.
Read its man page. Redirect its output to <i style='mso-bidi-font-style:normal'>sortwords</i>.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText style='margin-left:.25in;text-indent:-.25in;mso-list:
l3 level1 lfo3;tab-stops:list .25in'><![if !supportLists]><b style='mso-bidi-font-weight:
normal'><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:"Times New Roman"'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><![endif]><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:
"Times New Roman"'>Now, compare to find the good words<o:p></o:p></span></b></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Use the <i
style='mso-bidi-font-style:normal'>diff</i> command (see the man page) to find
the differences between <i style='mso-bidi-font-style:normal'>sortwords</i> and
<i style='mso-bidi-font-style:normal'>badspell</i>. These are the possibilities
for the answer to the game. There are a few because spell generates a few
strange ‘possibly OK’ words.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Ok, so what else can
we do about O here? – we can test a few different things out.<o:p></o:p></span></p>

<p class=MsoPlainText><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:
"Times New Roman"'>O(log n)<o:p></o:p></span></b></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Remember how binary
search is a O(log n function)? We have a bunch of sorted words here. Let’s test
that idea by running some binary searches. Here is a C program that will read
in 20 words and then run a binary search for a particular word.<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>int
binsearch(char words[][8],int num, char string[]); <o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>//this
is the signature of the following function<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>void
main() {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>char words[20][8];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>int i,where;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>for (i=0;i&lt;20;i++) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>scanf(&quot;%s&quot;,words[i]);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes"> </span>//printing out<span style="mso-spacerun:
yes">   </span><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>for (i=0;i&lt;20;i++) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>printf(&quot;%d - %s\n&quot;,i,
words[i]);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">   
</span>where=binsearch(words,20,&quot;xmosrut&quot;);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>if (where&gt;=0) printf(&quot;found at
%d\n&quot;,where);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>else printf(“can not find – tough luck!”);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>}<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>//
the actual binary search<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>int
binsearch(char words[][8],int num, char string[]) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">  </span><span style="mso-spacerun: yes">  </span>int
lo=0, hi=num-1,mid,result;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>while (lo&lt;=hi) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>mid=(lo+hi)/2;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>result=strcmp(words[mid],string);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>if (result==0) return mid;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>else if (result&lt;0) lo=mid+1;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>else hi = mid-1;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>}<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">   </span><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>return -1</span><span style='font-size:
12.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>Compile it and run it
to see that it works when it reads some sorted words from badspell:<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>          </span>cc search.c<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><span
style='mso-tab-count:1'>          </span>a.out &lt;badspell <o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'>Now, modify the code so that you count how many
comparisons are made during the search and print that. Since binary search is a
O(log n) algorithm what do you expect to happen if you double the number of
elements to search? Modify the code to read 40 elements, does it work the way
you expected?<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoPlainText><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:Arial;mso-bidi-font-family:
"Times New Roman"'>O(n.logn) and O(n</span></b><b style='mso-bidi-font-weight:
normal'><sup><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt;font-family:
Arial;mso-bidi-font-family:"Times New Roman"'>2</span></sup></b><b
style='mso-bidi-font-weight:normal'><span style='font-size:12.0pt;mso-bidi-font-size:
10.0pt;font-family:Arial;mso-bidi-font-family:"Times New Roman"'>)<o:p></o:p></span></b></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'>OK, so sorts are one
of the above. Remember bubble sort? <o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>void
bubble(char words[][8], int num) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>char temp[8];<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>int c1,c2;<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">    </span>for (c1=0;c1&lt;num-1;c1++) <o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">        </span>for (c2=0;c2&lt;num-1;c2++)<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">            </span>if
(strcmp(words[c2],words[c2+1])&gt;0) {<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                    </span>strcpy(temp,words[c2]);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                   
</span>strcpy(words[c2],words[c2+1]);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">     </span><span style="mso-spacerun:
yes">               </span>strcpy(words[c2+1],temp);<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'><span
style="mso-spacerun: yes">                     </span>}<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:8.0pt;mso-bidi-font-size:10.0pt'>}<o:p></o:p></span></p>

<p class=MsoPlainText><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:"Times New Roman"'>Put a counter in and check how many comparisons
it does. You’ll have to test it on an unsorted file – <i style='mso-bidi-font-style:
normal'>allwords</i> would probably do. Now try doubling the number of words
you read, so instead of n we would have 2n.<span style="mso-spacerun: yes"> 
</span>That would mean the algorithm would be O((2n)</span><sup><span
style='font-size:8.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>2</span></sup><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>)
which would be 4*O(n</span><sup><span style='font-size:8.0pt;mso-bidi-font-size:
10.0pt;font-family:"Times New Roman"'>2</span></sup><span style='font-size:
12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>). Is it the
case that when you double the number of words you multiply the number of
comparisons by 4?<o:p></o:p></span></p>

<p class=MsoPlainText><b style='mso-bidi-font-weight:normal'><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>If
we have done a faster sort by this point in the course</span></b><span
style='font-size:12.0pt;mso-bidi-font-size:10.0pt;font-family:"Times New Roman"'>,
code it and check what happens to the number of comparisons when you double the
number of inputs.</span><span style='font-size:12.0pt;mso-bidi-font-size:10.0pt;
font-family:Arial;mso-bidi-font-family:"Times New Roman"'><o:p></o:p></span></p>

</div>

</body>

</html>
