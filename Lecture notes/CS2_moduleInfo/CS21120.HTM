<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0080)http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS21120.module.html -->
<HTML><HEAD><TITLE>Computer Science Module CS21120</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY>
<H4>Computer Science, Prifysgol Cymru Aberystwyth University of Wales</H4>
<HR>

<H1>CS21120 (1999-00 session)<BR>Program Design, Data Structures and 
Algorithms</H1>
<HR>

<H2>Brief Description</H2>This module builds on the foundations of the first 
year modules on program design and provides a thorough grounding in the design 
of data structures and algorithms and an introduction to the basic concepts of 
object-oriented design. 
<P><A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS21120.module.html#aimsanchor">Aims</A>, 
<A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS21120.module.html#objectivesanchor">Objectives</A>, 
<A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS21120.module.html#syllabusanchor">Syllabus</A>, 
<A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS21120.module.html#booklistanchor">Booklist</A>
<P>
<HR>

<H2>Further Details</H2>
<DL>
  <DT>Number of lectures
  <DD>44 
  <DT>Number of seminars/tutorials (up to)
  <DD>4 
  <DT>Number of practicals (up to)
  <DD>22 x 1hr 
  <DT>Coordinator
  <DD>Dr. Mark Ratcliffe 
  <DT>Other staff involved
  <DD>Not yet known 
  <DT>Pre-requisites
  <DD><A 
  href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS12420.module.html">CS12420</A> 
  or <A 
  href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS10720.module.html">CS10720</A> 

  <DT>Co-requisites
  <DD>None 
  <DT>Incompatibilities
  <DD>None 
  <DT>Assessment
  <DD>Three hour written examination - 100% <BR>The resit assessment will follow 
  a similar pattern 
  <DT>Timing
  <DD>This module extends over both Semester 1 and Semester 2</DD></DL><A 
name=aimsanchor>
<H2>Aims</H2></A>
<P>This module provides an introduction to data structures and their use in 
solving programming problems. The course emphasises the use of abstract data 
types and the contribution that abstraction and encapsulation can make to the 
comprehensibility, reusability and robustness of programs. Java is used as the 
language of implementation with the intent of providing a means of allowing the 
student to naturally express these design objectives in code. The module also 
teaches the use of object-orientated analysis and design methods as a 
pre-requisite to implementation. 
<P>As well as providing a solid grounding in the major data structures and 
algorithms of Computer Science, the course stresses the development of problem 
solving skills through a number of programming worksheets. <A 
name=objectivesanchor>
<H2>Objectives</H2></A>On successful completion of this module, students should: 

<UL>
  <LI>demonstrate their understanding of the principles of abstraction and 
  encapsulation as they apply to the design of abstract data types and programs; 

  <LI>have an appreciation of object-oriented analysis and design methods, 
  including use case modelling, object modelling and dynamic behaviour 
  modelling; 
  <LI>be able to explain the importance of the time and space behaviour of 
  algorithms and how this is expressed and determined; 
  <LI>have a familiarity with some of the main approaches to algorithm design 
  such as greedy algorithms, divide and conquer and dynamic programming; 
  <LI>be able to evaluate and choose appropriate data structures and algorithms 
  for a range of programming problems; 
  <LI>be able to design and implement significant programs in Java; 
  <LI>have an appreciation of the importance of program correctness and some of 
  the techniques used to ensure it. </LI></UL><A name=syllabusanchor>
<H2>Syllabus</H2></A>
<DL>
  <DT>Course Overview - <EM>5 Lectures</EM>
  <DD>An introduction into time/space complexity. Issues of correctness as they 
  relate to the definition of ADTs. The key ideas of abstraction and 
  encapsulation. Notations for describing ADTs. Review of Java support for their 
  implementation: packages, exceptions and interfaces. 
  <DT>Introduction to Complexity - <EM>2 Lectures</EM>
  <DD>O() notation, growth rates. Measurement of execution time of some real 
  programs and estimation of their time complexity. Some examples of time/space 
  trade-offs. 
  <DT>Classes of Algorithm - <EM>2 Lectures</EM>
  <DD>An overview will be given on the different classes of algorithm; for 
  example, divide and conquer and greedy algorithms. Genetic algorithms will 
  also be discussed. 
  <DT>Recursion - <EM>2 Lectures</EM>
  <DD>
  <DT>Storing and Retrieving Data by Key (1) - <EM>6 Lectures</EM>
  <DD>This problem will be used to motivate the discussion of a wide variety of 
  different implementation techniques. The features of some typical solutions 
  will be related to the dimensions of the problem such as the volume of data to 
  be handled, volatility and the operations required. Internal Storage: linear 
  and binary searching. Linked representations; an introduction to hashing and 
  binary search trees. 
  <DT>Storing and Retrieving Data by Key (2): External storage - <EM>4 
  Lectures</EM>
  <DD>Performance issues. Hashing and B-tree organisations. The Hashable class 
  in Java. 
  <DT>Object-Oriented Analysis and Design - <EM>1 Lecture</EM>
  <DD>An introduction to object-oriented analysis and design. 
  <DT>An Overview of the Unified Modeling Language (UML) - <EM>1 Lecture</EM>
  <DD>The UML is an attempt by Booch, Rumbaugh and Jacobson to produce a common 
  language for describing OO designs. This lecture will provide a brief 
  introduction to UML. 
  <DT>Use Case Modelling - <EM>1 Lecture</EM>
  <DD>This lecture will describe Use Case Modelling, including the 
  methodological steps and the use of the UML notation. 
  <DT>The Object Modeling Technique (OMT) - <EM>6 Lectures</EM>
  <DD>In these lectures the OMT approach to object oriented analysis and design 
  will be examined. UML is used as the diagramming notation. 
  <DT>Representing Text - <EM>4 Lectures</EM>
  <DD>String matching algorithms and their performance. 
  <DT>Sorting - <EM>4 Lectures</EM>
  <DD>A comparison of divide and conquer, priority queue and address calculation 
  based sorting algorithms. Performance characteristics of these algorithms will 
  be discussed. 
  <DT>Representing Complex Relationships: Graphs - <EM>6 Lectures</EM>
  <DD>Some examples of greedy algorithms. Terminology and implementation 
  considerations. A look at some graph-related problems such as: finding a route 
  (shortest paths); planning a communications network (minimum spanning trees); 
  network routing management (flow graphs); compiling a program or planning a 
  project (topological sorting). </DD></DL><A name=booklistanchor>
<H2>Booklist</H2></A>
<H3>Students are likely to need ready access to the following</H3>
<DL>
  <DT><A name=pooleystevens99></A>
  <DD>Rob Pooley and Pardita Stevens. <EM>Using UML: Software enginering with 
  objects and components</EM>. Addison-Wesley, 1999. ISBN 0-201-36067-5. 
  <P></P>
  <DT><A name=standish98></A>
  <DD>T.A. Standish. <EM>Data Structures in Java</EM>. Addison Wesley, 1998. 
  <P></P></DD></DL>
<H3>The following should be consulted for different approaches or for further 
information</H3>
<DL>
  <DT><A name=hunt97></A>
  <DD>John E Hunt. <EM>Java and Object Orientation: An Introduction</EM>. 
  Springer-Verlag, 1998. 
  <P></P>
  <DT><A name=Cormen90></A>
  <DD>Thomas H. Cormen, Charles E. Leiserson, and Ronald L. Rivest. 
  <EM>Introduction to Algorithms</EM>. MIT Press, Cambridge, Massachusetts, 
  1990. 
  <P></P>
  <DT><A name=Aho83></A>
  <DD>Alfred Aho, John Hopcroft, and Jeffrey Ullman. <EM>Data Structures and 
  Algorithms</EM>. Addison-Wesley, Reading, Massachusetts, 1983. 
  <P></P>
  <DT><A name=Sedgewick88></A>
  <DD>Robert Sedgewick. <EM>Algorithms</EM>. Addison-Wesley, Reading, 
  Massachusetts, 1988. 
  <P></P>
  <DT><A name=WirfsBrock90a></A>
  <DD>Rebecca Wirfs-Brock, Brian Wilkerson, and Lauren Wiener. <EM>Designing 
  Object-Oriented Software</EM>. Prentice Hall, 1990. 
  <P></P>
  <DT><A name=Kruse87></A>
  <DD>Robert L Kruse. <EM>Data Structures and Program Design</EM>. 
  Prentice-Hall, Englewood Cliffs, New Jersey, second edition, 1987. (The first 
  edition is also available from the library). 
  <P></P>
  <DT><A name=Standish94></A>
  <DD>Thomas A Standish. <EM>Data Structures, Algorithms and Software 
  Principles</EM>. Addison-Wesley, Reading, Massachusetts, 1994. 
  <P></P>
  <DT><A name=Aho92></A>
  <DD>Alfred Aho and Jeffrey Ullman. <EM>Foundations of Computer Science</EM>. 
  Computer Science Press, New York, 1992. 
  <P></P>
  <DT><A name=Rumbaughetal91></A>
  <DD>J. Rumbaugh, M. Blaha, W. Permerlani, F Eddi, and W Lorensen. 
  <EM>Object-Oriented Modeling and Design</EM>. Prentice-Hall, 1991. 
  <P></P>
  <DT><A name=Booch94></A>
  <DD>Grady Booch. <EM>Object-Oriented Analysis and Design</EM>. Addison-Wesley, 
  1994. 
  <P></P>
  <DT><A name=erikssonpenker97></A>
  <DD>Hans-Erik Eroksson and Magnus Penker. <EM>UML Toolkit</EM>. Wiley, New 
  York, October 1997. ISBN 0-471-19161-2. 
  <P></P></DD></DL>
<H6>Version 1.7</H6>
<HR>

<CENTER>
<TABLE>
  <TBODY>
  <TR>
    <TD><A 
      href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/">Syllabus</A></TD>
    <TD><A href="http://www.aber.ac.uk/~dcswww/">Home 
Page</A></TD></TR></TBODY></TABLE></CENTER>
<CENTER>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align=left>
      <ADDRESS><A 
      href="http://www.aber.ac.uk/~dcswww/Admin/staff/HTML/nwh.html">Nigel 
      Hardy</A> Departmental Advisor</ADDRESS></TD>
    <TD align=right>
      <ADDRESS><A 
  href="mailto:nwh@aber.ac.uk">nwh@aber.ac.uk</A></ADDRESS></TD></TR></TBODY></TABLE></CENTER></BODY></HTML>
