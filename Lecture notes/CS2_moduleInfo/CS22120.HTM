<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0080)http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS22120.module.html -->
<HTML><HEAD><TITLE>Computer Science Module CS22120</TITLE>
<META content="text/html; charset=windows-1252" http-equiv=Content-Type>
<META content="MSHTML 5.00.2314.1000" name=GENERATOR></HEAD>
<BODY>
<H4>Computer Science, Prifysgol Cymru Aberystwyth University of Wales</H4>
<HR>

<H1>CS22120 (1999-00 session)<BR>The Software Development Lifecycle</H1>
<HR>

<H2>Brief Description</H2>The objectives of the lecture course are first to 
introduce students to the best traditional practices for the specification, 
design, implementation, testing and operation of large software systems; and 
second to provide a framework for the more detailed material on design which is 
taught in other courses. The practical work is a group project. 
<P>Long thin module. No lectures in Semester 2 
<P>The pastoral and general tutorial system for Year 2 honours students is 
administered through this module. 
<P><A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS22120.module.html#aimsanchor">Aims</A>, 
<A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS22120.module.html#objectivesanchor">Objectives</A>, 
<A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS22120.module.html#syllabusanchor">Syllabus</A>, 
<A 
href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS22120.module.html#booklistanchor">Booklist</A>
<P>
<HR>

<H2>Further Details</H2>
<DL>
  <DT>Number of lectures
  <DD>18 
  <DT>Number of seminars/tutorials (up to)
  <DD>24 
  <DT>Number of practicals (up to)
  <DD>0 
  <DT>Coordinator
  <DD>Dr. Mark Ratcliffe 
  <DT>Other staff involved
  <DD>Not yet known 
  <DT>Pre-requisites
  <DD>Pass or exemption in Computer Science at Level 1 
  <DT>Co-requisites
  <DD>None 
  <DT>Incompatibilities
  <DD>None 
  <DT>Assessment
  <DD>Assessed coursework - 75% <BR>Two hour written examination - 25% <BR>There 
  is no external resit available for this module 
  <DT>Timing
  <DD>This module extends over both Semester 1 and Semester 2</DD></DL><A 
name=aimsanchor>
<H2>Aims</H2></A>This module aims to introduce students to the basic principles 
of software engineering and to give them experience of developing a software 
system in a team. Specifically, it aims to: 
<UL>
  <LI>introduce students to the best traditional practices for the 
  specification, design, implementation, testing and operation of large software 
  systems; 
  <LI>provide a framework for the more detailed material on design which is 
  taught in other courses; 
  <LI>involve students in the development of a piece of software which 
  approximates as closely as possible in the university environment the software 
  development conditions found in industry. </LI></UL><A name=objectivesanchor>
<H2>Objectives</H2></A>On successful completion of this module students should: 
<UL>
  <LI>understand the approach and obligations of the professional engineer and 
  the analogies between software and other branches of engineering; 
  <LI>have an appreciation of the software life cycle, and the management issues 
  involved in software development; 
  <LI>be aware of the need for quality assurance and know how it is applied in 
  the software industry; 
  <LI>understand the concept of configuration management and be able to use the 
  UNIX tools sccs and make; 
  <LI>be able to produce the key deliverables of the software life cycle; 
  <LI>have an appreciation of the use of CASE tools in software engineering. 
  </LI></UL><A name=syllabusanchor>
<H2>Syllabus</H2></A>
<DL>
  <DT>Introduction - <EM>1 Lecture</EM>
  <DD>The approach and the obligations of the professional engineer. Software as 
  an engineering artifact. Analogies between software and other branches of 
  engineering. 
  <DT>The Software Life Cycle - <EM>2 Lectures</EM>
  <DD>Description of the phases of the software life cycle and the major 
  deliverables and activities associated with each phase. 
  <DT>Project Management - <EM>2 Lectures</EM>
  <DD>Planning and cost estimation. Progress monitoring. Team structure and team 
  management. 
  <DT>Quality Management - <EM>3 Lectures</EM>
  <DD>Validation, verification and testing. Quality plans. Walkthroughs, code 
  inspections and other types of review. Role of the quality assurance group. 
  Standards (international, national and local). 
  <DT>Configuration Management - <EM>2 Lectures</EM>
  <DD>Baselines. Change control procedures. Version control. Software tools to 
  support configuration management: `sccs' and `make'. 
  <DT>Requirements Specification - <EM>2 Lectures</EM>
  <DD>The IEEE standard for requirements specifications. Validation of 
  requirement by e.g., prototyping. Deficiencies in the traditional approach to 
  requirements. 
  <DT>Design - <EM>2 Lectures</EM>
  <DD>Outline (architectural) design and detailed design. Use of abstraction, 
  information hiding, functional and hierarchical decomposition at levels higher 
  then the individual program. Contents of design documentation. [Note that <A 
  href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS21120.module.html">CS21120</A> 
  , <A 
  href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS23110.module.html">CS23110</A> 
  and <A 
  href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/CS27310.module.html">CS27310</A> 
  contain more detailed coverage of design methods.] 
  <DT>Implementation and Testing - <EM>2 Lectures</EM>
  <DD>Importance of suitable programming languages and a good support 
  environment. Testing strategies. Testing tools: static and dynamic analysers, 
  test harnesses and test data generators, simulators. Performance testing. 
  Regression testing. User documentation and training. Cutover. 
  Post-implementation reviews. 
  <DT>Tools - <EM>1 Lecture</EM>
  <DD>How CASE tools can aid the software engineer. Upper and lower CASE. Meta 
  CASE tools. 
  <DT>The capability maturity model. - <EM>1 Lecture</EM>
  <DD>
  <DT>Tutorials - 
  <DD>A weekly tutorial will be associated with this course. The tutorial will 
  be used to organize group project activities and to discuss software 
  engineering issues. </DD></DL><A name=booklistanchor>
<H2>Booklist</H2></A>
<H3>It is considered essential to purchase the following</H3>
<DL>
  <DT><A name=sommerville96></A>
  <DD>Ian Sommerville. <EM>Software Engineering</EM>. Addison Wesley, 5th. 
  edition, 1996. ISBN 0-201-42765-6. 
  <P></P></DD></DL>
<H3>The following should be consulted for different approaches or for further 
information</H3>
<DL>
  <DT><A name=vanvliet93></A>
  <DD>H. van Vliet. <EM>Software Engineering: Principles and Practice</EM>. John 
  Wiley and Sons, 1993. 
  <P></P>
  <DT><A name=pfleeger98></A>
  <DD>Shari Lawrence Pfleeger. <EM>Software Engineering: Theory and 
  practice</EM>. Prentice Hall, 1998. ISBN 0-13-624842-X. 
  <P></P>
  <DT><A name=berzinsluqi91></A>
  <DD>V. Berzins and Luqi. <EM>Software Engineering with Abstractions</EM>. 
  Addison Wesley, 1991. 
  <P></P></DD></DL>
<H6>Version 5.9</H6>
<HR>

<CENTER>
<TABLE>
  <TBODY>
  <TR>
    <TD><A 
      href="http://www.aber.ac.uk/~dcswww/Dept/Teaching/Syllabus/1999-00/">Syllabus</A></TD>
    <TD><A href="http://www.aber.ac.uk/~dcswww/">Home 
Page</A></TD></TR></TBODY></TABLE></CENTER>
<CENTER>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD align=left>
      <ADDRESS><A 
      href="http://www.aber.ac.uk/~dcswww/Admin/staff/HTML/nwh.html">Nigel 
      Hardy</A> Departmental Advisor</ADDRESS></TD>
    <TD align=right>
      <ADDRESS><A 
  href="mailto:nwh@aber.ac.uk">nwh@aber.ac.uk</A></ADDRESS></TD></TR></TBODY></TABLE></CENTER></BODY></HTML>
