%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: l14.dvi
%%Pages: 13
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips -o l14.ps l14
%DVIPSParameters: dpi=300, compressed, comments removed
%DVIPSSource:  TeX output 1996.10.15:1338
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale false def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300 (l14.dvi)
@start /Fa 8 89 df<14181430146014E014C0EB01801303EB07001306130E130C131C
5BA25BA25BA212015BA2485AA3120790C7FCA25A120EA2121EA3121CA2123CA412381278
A8127012F0B3A812701278A81238123CA4121CA2121EA3120EA2120F7EA27F1203A36C7E
A27F1200A21370A27FA27F130C130E13061307EB03801301EB00C014E014601430141815
7C768121>32 D<12C012607E123812187E120E7E7E7F12017F6C7EA21370A27FA2133C13
1CA27FA3130F7FA214801303A214C0A31301A214E0A4130014F0A814701478B3A8147014
F0A814E01301A414C0A21303A31480A213071400A25B130EA35BA2133C1338A25BA25BA2
485A5B120390C7FC5A120E120C5A123812305A5A157C7F8121>I<1318137813F0EA01E0
EA03C0EA0780EA0F005A121E123E123C127CA2127812F8B3A50D25707E25>56
D<12F8B3A51278127CA2123C123E121E121F7EEA0780EA03C0EA01E0EA00F0137813180D
25708025>58 D<137CB3A613F8A313F0120113E0120313C0EA07801300120E5A5A12F012
C012F012387E7E7E1380EA03C013E0120113F0120013F8A3137CB3A60E4D798025>60
D<12F8AE050E708025>62 D<B712F0A20070C7EA0FF8007814006C1538001C151C6C150C
000F15046C15066C6C14026D14006C7E1200137013787F131C131E7F7F6D7EA291C8FC5B
13065B5B133813305B5B120149140248C8120600061504000E150C000C151C4815384815
F80070140F007FB612F0B7FC272A7E7F2C>80 D<B912C018E06CC81201EE001F6C6CED03
F06C6C1500000F17386D16186C6C160C6C6C1604A26C6C16026C6C1600137FA26D7E6D7E
130F806D7E6D7EA26D7E6D7E147E147F6E7E6E7EA2140F6E5A14034AC9FC140E5C5C5CA2
5C495A495A49CAFC130EA24916024916045B49160C00011718491638484816F848C9EA01
F0000E160F48ED01FF003FB812E0A25AB912C0373A7E7F3C>88 D
E /Fb 3 62 df<1310137013F0120712FF12F81200B3AD487E387FFFE0A213287BA71E>
49 D<13FE3807FF80380E07E0381803F0382001F8130048137CA200F8137E7E143EA300
78137EC7FC147CA214F8A2EB01F014E0EB03C0EB07801400130E5B5B5B13605B38018002
EA0300000613045A5A0010130C383FFFFC4813F8B5FCA217287DA71E>I<B712FEA27ECA
FCA9007FB612FEB7FCA2270F7D952E>61 D E /Fc 4 106 df<127012F812FCA2127412
04A41208A21210A212201240060F7C840E>59 D<90B512F090380F003C150E81011EEB03
80A2ED01C0A25B16E0A35BA449EB03C0A44848EB0780A216005D4848130E5D153C153848
485B5D4A5A0207C7FC000F131CB512F023227DA128>68 D<9039FFF83FFE90390F0003C0
A3011EEB0780A449EB0F00A449131EA490B512FC9038F0003CA348485BA448485BA44848
485AA4000F130339FFF83FFE27227DA128>72 D<13E0A21201EA00C01300A9121E1223EA
4380A21283EA8700A21207120EA35AA3EA38201340127013801230EA3100121E0B227EA1
11>105 D E /Fd 2 107 df<903803FFF8131F137FD801FCC7FCEA03E0EA078048C8FC12
1E121C5AA25AA35AA3B612F8A300E0C8FCA31270A37EA27E121E7E6C7EEA03E0EA01FC39
007FFFF8131F13031D257BA028>50 D<12E0B3B3B3A6033C79AC11>106
D E /Fe 14 111 df<127812FCA212FEA2127A1202A41204A31208A21210122012400712
7B8511>59 D<15021506150EA2151FA25D155FA2159FA2EC011F1402821404150F140814
10A214201460144014808290380100075B91B5FC5B90380400075B5BA2498015035B5BA2
48C7FC5AD80F80497ED8FFF090387FFF8092B51200292A7EA92D>65
D<013FB512F016FC903901F8003F4AEB0F80EE07C0EE03E0EE01F0495AEE00F8A3495A17
FCA3495AA449C812F81601A3013EEC03F0A217E016074915C0A2EE0F80EE1F005B163E5E
5E4848495AED07C0ED1F800003027EC7FCB612F815C02E297EA831>68
D<903B3FFFE07FFFC0A2903B01F80003F0004A5CA44948495AA44948495AA4494849C7FC
A449B512FEA291C7123EA2013E5CA4495CA449495AA44848495AA300031407B50081B5FC
A232297EA832>72 D<90383FFFF0A2D901F8C7FC5CA4495AA4495AA4495AA449C8FCA413
3EA31610491420A21640A24914C016801501ED030048485B5D153E000314FEB6FC5D2429
7EA829>76 D<D93FF8EDFFF0A201019238017C0002785D17026E1404A20102ED09F01711
A2172101044B5A801783EE010301084B5A1602A2160401104A485A801610162001204BC7
FC16401680A2903A400781003EA21582158401805D15881590EC03D0D8010001E05B5D5A
D80780EB8001D8FFF89039007FFFC0A23C297EA83A>I<013FB512E016FC903901F8007E
4AEB1F80160FEE07C0A2494814E0A44948EB0FC0A21780161F49481400163E5EED01F090
391F0007E091B5C7FC91C9FCA2133EA45BA45BA4485AA31203B57EA22B297EA826>80
D<91383F80409138FFE0C0903803E078903807801990390E000F80491307491303137801
70140013F0A300011402A292C7FC7F6C7EEBFFC0EB7FF814FF6D13C0010F7F01037FEB00
3FEC07F814011400A215781210A300305CA25D140100705C0078495A007C49C7FC007613
1E38E3C07C38C0FFF038803FC0222B7DA925>83 D<B5903801FFC0495BD807E09038007C
0049143016205E7F00035D150193C7FC1502A25D6D5BA200015C5DA25DA25D6D48C8FC12
0014025CA25C5C13FCEB7C20A25C5CA2017DC9FC137EA2133CA213381330A22A2A7DA823
>86 D<133CEA07FCA2EA007C1378A45BA4485AA43803C1F8EBC60EEBC80FEBF007EA07A0
01C013801380A2390F000F00A4001E131EA35C5A15101478A248EB702014F0EC70401580
4813310060EB1E001C2A7DA922>104 D<131C133EA2133C13381300A9EA0780EA08E012
10EA20F0A21240A2EA41E012811201EA03C0A2EA0780A3EA0F00A21304121EA2EA1C0812
3CEA1C101320EA0C60EA07800F287EA715>I<1407140F141FA2140E1400A9EB03E0EB04
30EB0838EB103C1320A21340A2EB80781300A314F0A4EB01E0A4EB03C0A4EB0780A4EB0F
00A3131E1270EAF81C5B485A485A003FC7FC183481A719>I<000F017F133F3B11818380
C1C03B21C201C101E09039E400E600D841E813E401F001F813F0495BA23B83C001E001E0
1203A33B078003C003C0A3EE0780390F0007801782EE0F02A2001E90390F000E04161EEE
0E08171048011EEB06300018010CEB03C02F1A7E9934>109 D<000F137E391181838039
21C203C0EBEC01EA41E801F013E013E0A23983C003C01203A33907800780A3EC0F00EA0F
001504141EA2001EEB1C08143CEC1C10152048EB0C600018EB07801E1A7E9924>I
E /Ff 25 122 df<902601FFFCEE7FFF4995B5FC7F90260007FE4B138002031800DA077E
4B5AF1077EA2190E020E5F191C1938A24A6CED71F8A219E1F001C10238EEC3F0F00383A2
F00703027092380E07E0A26F6C131CA202E04B485A1870A218E0D901C04C5AEF01C0EF03
80A249486C6C484848C7FCA2170E5FD90700167E5FA25F010E4B5BA2EEC1C0ED07E14991
39E38001F8EEE700A216EE494C5A16FC5E13784C495A01F81303D803FE4A130F267FFFE0
D9C007B512C0B55D6C4B7E503B7BBA4D>77 D<49B612FE49EDFFC06D82903B0007F8000F
F80203EC03FC4A48EB00FEA2187FA24A48EC3F80A3187F4A5AA44A48ECFF00A26017014A
C75B4D5AA24D5A02FEEC0FC0EF3F8005FFC7FCEE07FC49B612F0178002FCCAFCA2495AA4
495AA4495AA4495AA4495AA449CBFCA25B007F13FEB5FC7E393B7BBA3A>80
D<49B612F04915FF6D16C0903B0007F8003FE00203EC07F84A481303717E717EA24A4880
84A2604A5AA44A48495AA2604D5A4AC7120760EF0FC04D5A02FE027FC7FCEE01FCEE0FF0
91B61280494AC8FC9139FC001F80EE07C0707E494880160183A2494880A44948495AA449
481307A44948130F9438F00380A2190049C700075B1806490203130E007F01FE6E5AB502
015B6C9238007FF0CAEA1FC0393C7BBA3F>82 D<92383FC002913901FFF8074AEBFC0E91
390FC03F1E91381F000F023CEB03BE4AEB01FC5C49481300495A010715F85C010F1578A2
49C81270A317F017E06E14601700A28014F014FE90380FFFC015F86D13FF6D14C06D806D
6C7F021F7F02037FEC003FED07FE15011500167FA282A20006153E120EA4001E5DA21678
16F8003E5D003F4A5A15036D5C007F4A5AD87DC0011FC7FCD879F0133E39707E01F839F0
3FFFF0D8E00F13C026C001FEC8FC303D7ABB30>I<48B812F85AA2903AFC003F8007D807
F0150101C049C7FC49167848C7FC000E1770001E14FE121CA25A4A5AA24817E0A24A5A5A
A2C716004A5AA44A5AA44A5AA44A5AA44AC9FCA414FEA4495AA4495AA4495AA2EB1FF800
3FB512FC48805D353B71BA3E>I<147CEB03FF90380F838690381F01CF90383C00FF5B01
F87F485A4848137E120749133E120F001F5C5B123FA290C75A5AA300FE495AA448495A16
70A3913807C0E0140F127C141F91383FC1C0003C1377003E01E31380391E01C3C33A0F07
81C7003903FE00FED800F8137C242777A52C>97 D<133EEA0FFF485A120FEA007EA2137C
A45BA4485AA4485AA43807C0FCEBC3FF9038CF07809038DC03C0D80FB813E0EBF00101E0
13F013C0D81F8013F8A21300A2123EA4481303A448EB07F0A315E0140F4814C0A2EC1F80
A2EC3F00143E00785B14785C383801E06C485A380E0F80D807FEC7FCEA01F81D3D76BB28
>I<EC3F80903801FFF0903807E07890380F801C90381E000E137C49133E0001147E4848
13FE5B000714FC4848137C153048481300123FA290C8FC5AA312FEA55AA31504007C140E
151C007E143C003E1478001E14E0001FEB03C06CEB0F803907C07E003801FFF838007F80
1F2777A528>I<167CED1FFEED3FFC151F1500A216F8A4ED01F0A4ED03E0A4ED07C0A491
387C0F80EB03FF90380F838F90381F01CF90393C00FF005B01F87F485A4848137E120749
133E120F001F5C5B123FA290C75A5AA300FE495AA448495A1670A3913807C0E0140F127C
141F91383FC1C0003C1377003E01E31380391E01C3C33A0F0781C7003903FE00FED800F8
137C273D77BB2C>I<EC3F80903801FFE0903807E07090381F803890383E001C5B5B485A
1203485A485A1538001F14784913F0003FEB03E0EC3F80397FFFFE0014E090C8FCA2127E
12FEA5127EA21504150E151C003E143C15786C14E06CEB03C03907800F803903C07E0038
01FFF838007F801F2777A528>I<ED01E0ED07F8ED0E1CED1C0EED3C1EED783F167FEDF8
FEA2EDF07C020113381600A25D1403A44A5AA5140F0103B512804914C016809039000F80
00A24AC7FCA5143EA55CA55CA5495AA5495AA413075CA4495AA391C8FC5B121CEA3E1E12
7EEAFE3E133C12FCEAF838EA7070EA30E0EA1FC06C5A284F82BC1A>I<EB03E0EBFFF048
5B7E1307A25CA4495AA449C8FCA4133EA490387C07F0EC1FFCEC7C1EECE00F9039F9C007
80EBFB80EBFF004914C0485AA25B5B0003EC0F80A25BA24848EB1F00A3153E485AA25DA2
48C7FCEDF80EA3003E903801F01CA3EDE0385A1630167016E048903800E1C0ED7F800070
EC3E00273D7ABB2C>104 D<14E0EB01F0EB03F8EB07F0A2EB03E0EB01C090C7FCAC13F8
487EEA030EEA060F120C001C1380121812381400485AA3EAE03EA2C65AA35BA3485AA348
5AA23807C070A3380F80E0A3EB01C0A2EB038014005BEA070EEA03FCEA01F0153A79B81A
>I<EB03E0EBFFF0485B7E1307A25CA4495AA449C8FCA4133EA449EB07C0ED1FE0ED7870
EDE0F89038F80181EC03031406020C13F03801F01891383001C04AC7FC5CEA03E1EBE380
01E6C8FC13FC485AEBFF80EBDFE0EBC1F0380F80F8143C143E80EA1F0016E0A3003E9038
3E01C0A3ED03805A141EED0700EC0E06486D5AEC03F800706D5A253D7ABB28>107
D<EB0F803803FFC04813807EEA001FA21400A4133EA45BA45BA4485AA4485AA4485AA448
5AA448C7FCA4123EA45A130EA3485AA45BA2EA7870A2EA38E0EA1FC06C5A123D78BB16>
I<D803E001FEEB03F83C07F003FF800FFE3C0E380F83C03E0F3D1C3C1C01E0700780903C
1E3800F0E003C0003849EBF1C04AEBF380D93FC0D9FF0013E00070495BA291C75A013E5C
D8E07E0101EC07C0A2D8007C5CA2494948EB0F80A3F01F004848495AA2183EA24848495A
F07C07A3484849C7EAF80EA3F0F01C4848133E19181938197048C748EC70E0F03FC0000E
0238EC1F00402779A546>I<D803E013FE3A07F003FF803A0E380F83C03A1C3C1C01E06D
486C7E00385B5CD93FC07F00705BA291C7FC133ED8E07E495AA2EA007CA249495AA34B5A
485AA24B5AA2485A92381F01C0A3484890383E0380A392383C0700485A16065E161C48C7
EA1C38ED0FF0000EEC07C02A2779A530>I<EC3F80903801FFE0903807E0F890380F803C
90383E001E49131F5B0001EC0F80485A4914C01207485AA2485A123FA290C7121F5AA300
FEEC3F80A316005D48147E15FE5D5D007C13014A5A007E5C003E495A4A5A6C49C7FC6C13
7C3807C1F83801FFE06C6CC8FC222777A52C>I<90390F8007E090391FC01FF8903938E0
783C903970F0E01E913879C01F9039E07B800FDA7F00138014FE48484814C0A25CA23803
81F0A2EA0001A24948131FA44948EB3F80A3170049485B167EA25E131F4B5A5E4B5A013F
5C6E485A013E49C7FCECE01E90387C707CEC3FF0EC0FC091C9FC5BA4485AA4485AA31207
B57EA32A377FA52C>I<3903E001F83907F00FFE3A0E381E0780381C3C3890391E700FC0
0038EBE01FEB1FC0D93F80138012709138000E0092C7FC133EEAE07E137C1200A25BA448
5AA4485AA4485AA4485AA448C9FCA2120E222779A524>114 D<14FF010313C090380F81
E090381C007049133813780170137801F013F8EBE001120115F0EC00E06D1300A213FEEB
FFE06C13FC6D7E6D7E6D1380010313C0EB003FEC0FE014071403121C123E127E00FE14C0
A248148048130700E014000070130E5C6C5B381F01F03807FFC0D801FEC7FC1D277AA523
>I<EB0380EB07C0A3EB0F80A4EB1F00A4133EA45B007FB5FCB6FC14FE3800F800A4485A
A4485AA4485AA4485AA448C7FC141CA21438123E1430147014E0A2EB01C0381E0380EB07
00EA0E0EEA07FCEA01F0183778B51D>I<13F8486C1470D8070E14F8EA060F000CEC01F0
001C138012181238ED03E038701F00A3D8E03EEB07C0A2C65AA2ED0F805BA34848EB1F00
A44848133E1607A3ED7C0EA315FC0201131C12019138033C182600F00613389039783C1C
7090393FF80FE090390FE007C0282779A52E>I<903907E003F090391FF80FFC90393C3C
1C1E9038701E309039E00E703F3A01C00FE07FD8038013C00100147E4814800006153800
0E1500A24849C7FCA2C7FCA2143EA45CA45C1638A349481370121C003E15E0EA7E0300FE
EC01C00107EB038026FC0678130039780E380E3938381C1C391FF00FF83907E007E02827
7CA528>120 D<13F8486C1470D8070E14F8EA060F000CEC01F0001C138012181238ED03
E038701F00A3D8E03EEB07C0A2C65AA2ED0F805BA34848EB1F00A44848133EA45DA315FC
4A5A120114033800F0069038783DF0EB3FF9EB0FE1EB00014A5AA25D001C1307003E5C00
7F130F92C7FC007E131E143E0078133C00705B5C383803C0381C0F80D80FFEC8FCEA03F8
253879A52A>I E /Fg 21 121 df<121C123E127FEAFF80A3EA7F00123E121C09097988
18>58 D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A25A
5AA25A12200A1A798818>I<17181738173C177C17FCA21601A216031607A2160D831618
163816301660A216C0150116804B487EA203067F150E150C5DA25D157015604B80A24A48
133F140392C7FC1406A2020FB6FC5CA20230C7EA3FC0A24A141F14E05C495AA249C8FC13
06A24982170F5B1338137813F8D807FCED3FF0267FFFC0010FB512C0B517E06C4916C03B
3D7DBC41>65 D<0103B712C018F818FE903B0007F80001FF02039138007F804A48EC1FC0
19E0180F19F04A481407A44A5AA2180F19E04A5AF01FC0183F19804AC8EA7F0018FE4D5A
EF07F802FEEC1FE0EF7F8091B600FEC7FC5FD901FCC7EA7F80EF1FC0EF07F0717E495A71
7E84A249481400A4495A1701A349484A5AA24D5A604948140F4D5A4D5A4D5A49C74848C7
FCEE07FE49EC1FF8B812E0178004F8C8FC3C3B7CBA41>I<0103B77E18F818FE903B0007
F80003FF02039138007F804A48EC1FC0F00FE0F007F0F003F84A48140119FC180019FE4A
48157EA2197FA24A5AA44AC9FCA402FE16FFA4494816FE1801A3494816FC180319F8A249
48150719F0F00FE0A24948ED1FC0A2F03F80F07F004948157E18FE4D5A4D5A49484A5A4D
5AEF1F80057FC7FC49C7EA01FEEE07F849EC3FE0B812804CC8FC16E0403B7CBA47>68
D<0103B812E0A390260007F8C7123F020315074A4814031801A219C04A481400A44A5AA2
F00180A24A5A1760A295C7FC4AC75AA3160102FE5C1603161F91B6FC4992C8FCA29138FC
001F8249481306A449485BA31608494890C9FCA4495AA4495AA449CBFCA2497EB612C0A3
3B3B7CBA37>70 D<0103B5D8FC01B512FEA390260007FCC73803FE004B5D4B5DA44A484A
5AA44A484A5AA44A484A5AA44AC8485AA402FE4BC7FCA291B8FCA2495E02FCC8FCA34948
4A5AA449484A5AA449484A5AA449484A5AA449484A5AA449C8485AA249157FB6017FB57E
A3473B7CBA48>72 D<0103B77E18F018FC903B0007F80003FE9438007F804B143FF01FC0
F00FE0A24A4815F0A44A5AA44A48EC1FE0A219C0183F4AC81380F07F0018FE4D5A02FE4A
5A4D5AEF1FC005FFC7FC49B612FC17E002FCCAFCA2495AA4495AA4495AA4495AA4495AA4
49CBFCA25BB6FCA33C3B7CBA37>80 D<DB1FE013809239FFFC01C002039038FF03809139
0FE01F8391391F0003C7023EEB00EF0278EC7F004A80495A4948800107151E5C130FA249
C8120CA3171C17186E140894C7FC80808014FF6D13E06D13FEEDFFC06D14F06D806D6C7F
021F7F02017FEC003F03037FED007F163F161F83A2160F00045E120CA4001C4BC7FCA216
1E163E003C153C003E5D5E003F1401486C495AD87DC0495AD878F0011FC8FCD8707F137E
486CB45AD8C00F13F001001380323D7BBB35>83 D<267FFFFC91380FFFF0B56C4A13F84A
6E13F0000190C80001130049ED00F8606000005F1701604DC7FC5F17066D5D7F5F5FA25F
17E06E5C4C5A133F4CC8FC1606A25E6E5BA2011F5C167016605EA24B5A6E48C9FCA2010F
13065DA25D1538ECF0305D13075DECF180A202F3CAFC14FEA26D5AA25C5CA25C5CA26D5A
3D3C7BBA32>86 D<91B500FC90380FFFFC704913FE4C15FC020301C001031380020090C7
3801FC00F000F0F001C06F6C5C4EC7FC6F6C130660031F141C705B606F6C5B4D5A030749
5A04F890C8FC17066F6C5A5F6F6C5A5F03005B705AA2167FA2163F83167F8316DF923801
8FF0ED030FED0607030C7F15184B6C7E1560EDE001DA01C07FEC03804AC77E140E4A6E7E
14184A143F4A815C49486E7E49C8FC49150F011F82137F2603FF80EC3FF8007F01F00103
B512F0B55C6C81473B7EBA47>88 D<147E49B47E903907C1C38090391F0067C0013E136F
49133F5B4848131F00031580485AA2485A001FEC3F005B123FA290C7127E5AA300FE5CA4
4A5A481506A3913803F00CA2127C02071318140F6C131B001E013113306C01E113602607
83C013E03A03FF007FC0D800FCEB1F0027277DA52D>97 D<EC1FE0ECFFF8903803F01C90
380FC00649C67E013E131F495B495B48485B485A12074848137E153C001F91C7FC485AA2
90C9FC5AA312FEA65AA21680007C1401007EEC0300003E14065D6C14386C14F039078003
C02603E01FC7FC3800FFFCEB3FE021277DA525>99 D<163F92380FFF804B130081ED007F
A2167EA45EA44B5AA44B5AA491387E07E0903801FF87903807C1C790381F0067013EEB6F
C049133F5B4848131F00035D485AA2485A001F4AC7FC5B123FA290C7127E5AA300FE5CA4
4A5A481506A34A485AA2127C02075B140F6C131B001E01315B6C01E15B260783C013E03A
03FF007FC0D800FC011FC7FC293D7DBB2D>I<EC1FE0ECFFF8903807F03C90380F800E90
383F0007137C5B485A1203485A120F49130E121F49133C003F14F0EC0FE048B5128002F8
C7FC90C9FCA2127E12FEA4127EA316801501003EEC030015066C5C15386C6C13F00007EB
03C02603E01FC7FC3800FFFCEB3FE021277DA528>I<167C4BB4FC923803C38092380700
C0ED0F07ED1E0FED3E1F163F157EA292387C1F809238FC0E0093C7FCA34A5AA54A5AA401
03B512F8A25E90260007E0C7FCA44A5AA54A5AA54AC8FCA6147EA55CA5495AA45C1303A2
5CA3381E07C0123FEA7F875CEAFF0F91C9FCEAFE0EEA7C1EEA601CEA3878EA1FE0EA07C0
2A4F7CBC2A>I<EB03F0EBFFF8485B7E1307A25CA4495AA4495AA449C9FCA490387E03FC
EC0FFF91383C0F8091387007C09039FCC003E0EBFD80EBFF004980485AA25B5E48481307
A44848495AA34B5A485AA24BC7FCA2485A037E13C0A348C738FC0180A2EE030015F8007E
1506A25EED7818481570007CEC3FE00038EC0F802A3D7CBB32>104
D<147014F8EB01FC1303A214F8EB01F0EB00E01400AC137CEA01FEEA038738060780000C
13C01218A2EA300FA21260EB1F80A212C0EB3F001200A2137EA25BA3485AA3485A140CA2
EA07E01418EA0FC01430A214601380000713C0EB81803803C300EA01FEEA007C163B7EB9
1E>I<D801F0EB3FC0D803FCEBFFF03A061E03C0F83A0C1F07007C26180F0C7F14980030
13B0D91FE0133F5C12605C163E4848C7127EA21200A2017E5CA34B5A5BA24B5AA2485A92
3807E00CA3484890380FC018A21730168048481560A217C092380781804848EC87000007
EC03FE6C48EB00F82E277EA534>110 D<D801F0137E3903FC03FF3A061E0781803A0C1F
0C03C03A180F180FE0ECB01F003013E0131F02C013C0006001801380ED0F0092C7FC4848
C8FCA21200A2137EA45BA4485AA4485AA4485AA4485A12076C5A23277EA527>114
D<D903F013FC90390FFC01FF903A3C1E0303809026700F0613C0903AC0078C0FE0D80180
EBD81FD8030013F0A2000602E013C0178048ED0F0093C7FC48495AA2C7FCA24A5AA44AC8
FCA4147E1603A3001E491306123FD87F805C1381D8FF015CD9033C5B007E013E5B267C06
1E5B3A381C0F0780271FF807FFC7FC3907E001F82B277EA531>120
D E /Fh 66 123 df<EC07FCEC3FFF9138FC0380903903F000C0D907C0136090390F8001
F04948487E491307137EA2137C01FC6D5AED00C093C7FCAAED01F8B7FCA33900FC000715
01B3AB486C497E3B7FFFF07FFFF0A32C3D7FBC30>12 D<DA07FCEB07FC913A3FFF803FFF
913BFE03C0FC0380903C03F00063F000C0D907C0D937C0136049489039FF8001F0494848
49487E49491407017E5CA2017C5C01FC01016E5A0300EC00C096C7FCAAF001F8BAFCA3D8
00FCC738FC00071801B3AB486C496C497E297FFFF87FFFF8B512F0A3443D7FBC48>14
D<001C131C007E137E007F137F39FF80FF80A26D13C0007F137FA2001C131C00001300A5
3901800180A33903000300A200061306A2485B485BA2485B002013201A1A7DBB2B>34
D<013E161801FF163C2603C180157C260780C01578260F007015F8000E6DEC03F0001E01
1E4A5A48011F141FDA19E0EB7FC0007C903A0CFF0FE78092381FFF8F0078912600F01FC7
FC6EEB001E00F8163E173C177C5F5F16014C5A5F160700784B5A4A91C8FC007C5D163E00
3C49133C167C6C5D000E495B000FEB60016C6C48485A2603C1805B3900FF0007013E495A
90C790C712F84BEB03FC031EEB0F06033EEB1E034B90383C0180037890383800C003F801
7813604A485B5D020301011430EC07C003805B020F161891381F0003141E143E5C147814
F8495A5C13034A13010107173049488091C7FC4902001460133E013C1578017C033813C0
4992383C01804992381E03000001EE0F0649ED03FC6C48ED00F83D467BC048>37
D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A25A5AA25A
12200A1A79BB18>39 D<146014E0EB01C0EB0380EB0700130E5BA25B137813705B12015B
1203A2485AA248C7FCA35A121EA2123EA2123CA2127CA5127812F8B21278127CA5123CA2
123EA2121EA2121F7EA36C7EA26C7EA212017F12001370137813387FA27F7FEB0380EB01
C0EB00E01460135678C021>I<124012E012707E7E7E7EA26C7E7F12016C7E7F13701378
A27FA27FA3131F7FA21480A21307A214C0A5130314E0B214C01307A51480A2130FA21400
A25B131EA35BA25BA2137013F05B485A12035B48C7FCA2120E5A5A5A5A124013567BC021
>I<1518153CB3A7007FB812FEBAFCA26C17FEC8003CC8FCB3A7151838387BB143>43
D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A25A5AA25A
12200A1A798818>I<B512FCA516057F941D>I<121C123E127FEAFF80A3EA7F00123E121C
0909798818>I<1506150FA2151F151EA2153E153CA2157C1578A215F815F0A2140115E0
A2140315C0A214071580A2140F1500A25C141EA2143E143CA2147C1478A214F85CA21301
5CA213035C13075CA2130F91C7FCA25B131EA2133E133CA2137C1378A213F85BA212015B
A212035BA212075BA2120F90C8FCA25A121EA2123E123CA2127C1278A212F85AA2126020
577BC02B>I<EB03FC90381FFF8090387E07E09038F801F048486C7E4848137C48487F48
487FA248C7EA0F80A24815C0A3007EEC07E0A500FE15F0B3007E15E0A4007F140F6C15C0
A36C15806D131F000F1500A26C6C133E6C6C5B6C6C5B6C6C485A90387E07E090381FFF80
D903FCC7FC24397DB72B>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8EB7FF0
007FB512F8A31D3879B72B>I<EB0FF8EB7FFF48B512C03903E03FE039070007F8000E6D
7E00186D7E481300157F481580127C00FE143F6C15C07FA46CC7FC123EC8FC1680157F16
00A215FEA24A5A5D4A5A4A5A5D4A5A4AC7FC143E143C5C5C495A495A495A49C8FC011E14
C013381330491301491480485A48C7FC00061403000FB6FC5A5A481500B7FCA322387CB7
2B>I<EB07FC90383FFF8090B512E03901F807F03903C001F848C77E000E80D80FC07F48
6C7F6D1480A46C5A6C5A0001C71300C85AA25D4A5A5D4A5A5DEC0FC0023FC7FCEB1FFCEC
FF8090380007E0EC01F86E7E157E157FED3F8016C0A2ED1FE0A216F0A3123F487E487EA2
16E0A2153F4914C06CC7FC0070EC7F806C15006C14FE390F8001FC3907F007F80001B512
E06C6C1380D907FCC7FC24397DB72B>I<151C153CA2157C15FCA214011403A21407140F
141D141914311471146114C11301EB038114011307130E130C131813381330136013E0EA
01C01380EA03005A12065A121C5A123012705AB712FCA3C73801FC00AB4A7E49B512FCA3
26397EB82B>I<00061406D80780131E9038F801FC90B55A5D5D5D92C7FC5C38067FF090
C9FCABEB03FCEB1FFF90387C0FC09038E003E039078001F090C77E0006800004147EC8FC
157FED3F80A316C0A4123E127F5A7FA290C71380A248147F00601500A26C14FE00385C6C
495A6C495A6C6C485A3903E01FC06CB5C7FC6C6C5AEB0FF022397CB72B>I<EC1FC0ECFF
F0010313FC90380FE03E90381F800690383E000349131F49EB3F804848137F1203485AA2
4848EB3F00001F141E4990C7FCA2123FA2127F90C9FCA2EB01FE903807FFC039FF0E03E0
90381800F849137C497F153F49EB1F80A24914C0ED0FE0A290C7FC16F0A37EA56C7E16E0
A2121FED1FC06C7E16800007EC3F006C6C133E6C6C5B6C6C5B90387E03F06DB45A010F13
80D903FEC7FC24397DB72B>I<12301238123E003FB612F0A316E04815C01680A20070C7
EA030000601406A25D00E05C485CA25DC85A4A5AA24AC7FC1406A25C141C141814381478
147014F0A2495AA21303A31307A25C130FA3131FA5133FA96D5A6DC8FC243B7BB92B>I<
EB03FC90381FFF804913E09038FC03F03901E000F8D80380133C90C77E4880120EED0780
A2121EA2121FA27F6DEB0F00EA0FF06D131E01FE131C6C6C5B6CEBC070ECE1E06CEBFBC0
6C01FFC7FC133F6D7F6D13E0497F017813FC3901E07FFE3903C01FFF48486C1380380F00
03001E010013C048EC7FE0151F48140FED07F04814031501A21500A316E01278ED01C07E
ED03806CEC07006C6C130ED807E0133C3903FC01F8C6B512E0013F1380D907FCC7FC2439
7DB72B>I<EB03FC90381FFF80017F7F9038FE07F03901F001F848486C7E4848137C000F
804848133F003F80168048C7FC16C0A248140F16E0A516F0A37E151FA26C7E001F143FA2
6C6C136F12076C6C13CF3901F0018F39007C070FEB3FFED907F813E090C7FCA3ED1FC0A3
1680D80780133F486C1400487E157E157C15FC49485AD80F805B390C0003E00007EB0FC0
2603C03FC7FC3801FFFE6C13F8EB1FC024397DB72B>I<121C123E127FEAFF80A3EA7F00
123E121CC7FCB3121C123E127FEAFF80A3EA7F00123E121C092579A418>I<007FB812FE
BAFCA3CCFCAEBAFCA36C17FE38167BA043>61 D<EB3FE03801FFFE3907C03F80390E000F
C00018EB07E048EB03F04814F8140100FC14FC7E7EA3127E123CC7EA03F8A215F0EC07E0
EC0FC0EC1F80EC3E00143C5C5C5C13015C495AA291C7FC5BA21306AA130490C8FCA8130E
131F497E497EA36D5A6DC7FC130E1E3D7BBC29>63 D<150C151EA3153FA34B7EA34B7EA3
9138019FE0A202037F150FA202077FEC0607A2020C7F1503A202187F1501A24A6C7EA34A
6D7EA202E0804A133FA20101814A131FA249C77F91B6FCA249810106C71207A2496E7EA3
496E7EA2013881013080A20170820160157FA201F082EA03F8D80FFC4A487EB500C0013F
EBFFC0A33A3D7DBC41>65 D<B712F816FF17E0C69039C0001FF06D48EB07FC707E707E82
EF7F8018C0173F18E0A718C0A2EF7F8017FF18004C5A4C5AEE0FF8EE3FE091B61280A291
3980001FE0EE03F8EE01FE707EEF7F80EF3FC018E0171F18F0170F18F8A8EF1FF0A218E0
173FEF7FC0EFFF804C13004C5A496CEB1FFCB812F017C04CC7FC353B7EBA3D>I<DBFFC0
1360020713F8023F01FE13E09139FFC01F01903A03FE000783D907F8EB01E3D90FE0EB00
77D91F80143F017FC8121F01FE150F4915071201484815031207491501120F48481500A2
123F5B1860127FA25B180012FFAB127FA26D1660A2123FA27F121F18C06C7E12076DED01
8012036C6CED03006C6C5D1706017F5DD91F805CD90FE05CD907F814E0D903FEEB03C090
3A00FFC01F8091263FFFFEC7FC020713F8020013C0333D7BBB3E>I<B712F816FF17C0C6
9039C0003FF06D48EB07FCEE01FEEE007F717E717E717E717EA2717E84170184170084A3
F07F80A419C0AC1980A4F0FF00A34D5AA2604D5AA24D5A4D5A4D5A173F4DC7FCEE01FEEE
07FC496CEB3FF0B85A94C8FC16F83A3B7EBA42>I<B812FEA3C69038C000076D48130017
3F8383A283A283A418801701A21660A294C7FCA416E0A21501150791B5FCA3EC80071501
1500A21660A693C8FCAEEBFFE0B612F0A3313B7EBA38>70 D<DB7FC01330913807FFF802
3F01FE1370913AFFC01F80F0903A01FE0003C1D907F8EB00E1D90FE014334948141F49C8
120F017E150713FE48481503484815011207491500120F48481670A3485A1830127FA25B
95C7FC12FFAB007F037FB512C0A27F9339003FF800003FEE0FF0A26C7EA36C7E12077F12
036C7E6C7E137F6D6C141F6D7E6D6C1433D907F81473D901FEEB01E1903A00FFE00FC002
3FB5EA0070020701FC13309126007FE090C7FC3A3D7BBB44>I<B612C0A3C6EBC0006D5A
B3B3AF497EB612C0A31A3B7EBA1F>73 D<B612F0A3C601E0C8FCEB7F80B3AE1706A5170E
170CA4171CA3173C177CA2EE01FCEE03F8160F496C137FB8FCA32F3B7EBA36>76
D<B56C4BB5FC6E5DA2C61900D96FE0ED06FEA3D967F0150CA2D963F81518A3D961FC1530
A2D960FE1560A3027F15C0A36E6CEB0180A26E6CEB0300A36E6C1306A36E6C5BA26E6C5B
A36E6C5BA26E6C5BA3037F5BA392383F8180A2DB1FC3C7FCA3ED0FE6A3ED07FCA26F5AA2
13F0486C6D5AD807FE4C7EB527F000E001B6FCA3483B7DBA4F>I<4AB47E021F13F89138
7F00FED901F8EB1F80D907F0EB0FE0D90FC0EB03F049486D7E49C87E017E157E49810001
17804848ED1FC04848ED0FE0A2000F17F0491507001F17F8491503003F17FCA3007F17FE
491501A300FF17FFAB007F17FE6D1503A4003F17FC6D1507001F17F8A26C6CED0FF0A200
0717E06D151F000317C06C6CED3F806C6CED7F00017F15FE6D5D6D6C495AD90FE0EB07F0
6D6C495AD901FCEB3F80D9007F01FEC7FC91381FFFF802011380383D7BBB43>79
D<B712F016FF17C0C69039C0003FF06D48EB07F8707E707E707EEF7F80A218C0173F18E0
A718C0A2177F188018005F4C5A4C5AEE0FF0EE3FE091B6128004FCC7FC0280C9FCB3A649
7EB612C0A3333B7EBA3B>I<003FB812F8A3D9E001EB800790C7EB0001007CEE007C0078
173CA20070171CA20060170CA500E0170E481706A4C81500B3B1020313C0010FB612F0A3
373B7DBA3E>84 D<B5D8FC01B500FC90383FFFE0A3000790268000070180010713000001
90C76C48C7EA01FC49725A6D020116706C1A60836E7F017F618480013F4E5AA2933801BF
C06D6C4DC7FCA29338031FE06D6C1706A29338060FF06D6C5FA24C6C7E6D6C5FA24C6C7E
6D6C5FA24C6C7E6D6C5FA204707F91277F8060005CA204E014806F48EB7F81023F5F03C1
15C1DBE180EB3FC3021F94C8FC03E315E303F3C7EA1FE7020F16E619F603FEEC0FFE0207
5EA24B140702035EA24B140302015EA24B140102005EA24B140003605D533C7EBA58>87
D<485B485B00061306A2485B485BA2485BA2485BA3485BA500CE13CE39FF80FF80A26D13
C0007F137FA2393F803F80001F131F390E000E001A1A73BB2B>92
D<1330137813FC487EEA03CF38078780380F03C0381C00E048137048133848131C48130C
160C76BA2B>94 D<EB1FF0EBFFFC3803E03F3907000F80486D7E9038C003E0486C6C7E81
A214006C487F6C5AC8FCA4140FEB03FFEB1FF8EBFF00EA01FCEA07F0EA0FC0485A123F90
C7FC5A007E150612FEA31401A2007EEB037C127F3A3F80063E0C3A1FC00C3F1C3A0FF038
1FF83A03FFF00FF03A007FC007C027287DA62B>97 D<EA01F812FFA312071201B1EC0FF0
EC3FFEECF01F9039F9C007C09039FB0003E001FE6D7E496D7E167C49147E163E163FA217
80161FA217C0A91780A2163F1700A2167E167C6D14FC5E01F6495A01E3495A9039E1800F
809026C0F03FC7FC9038807FFCC7EA0FE02A3D7EBB30>I<EB03FE90381FFFC090383E01
F09038F800384848133C484813FC3907C001FE120F1380121F48C712FC1578481400A212
7EA212FEA9127EA2127F6C1403A26C7E15066C7E0007140C6C6C13186C6C13306C6C13E0
90387E03C090381FFF00EB03FC20287DA626>I<ED07E0EC03FFA3EC001F1507B1EB01FC
90380FFF8790383F03C790387C0067D801F013374848131F4848130F120F491307121F48
C7FCA25A127EA212FEA9127EA2127F7EA27E6D130F120F6C6C131F6C7E6C6CEB77F86C6C
9038E7FFC090383E038790381FFF07D903FCEBE0002A3D7DBB30>I<EB03FCEB1FFF9038
7E07C09038F801E03901E000F0000314784848137C48487F121F90C7123F4880A25A007E
1580A212FEA2B7FCA248C9FCA5127EA3127F6CEC0180A26C7E000FEC03007F000714066C
6C5B6C6C5BD80078137090383F01E090380FFF80D901FEC7FC21287EA626>I<147F9038
01FFC0903807C0E090380F81F090381F03F8EB3E07137CA29038FC03F09038F801E00001
90C7FCAEB512FCA3D801F8C7FCB3AC487E387FFFF8A31D3D7FBC1A>I<903907F001F890
393FFE0FFC90397C1F1E3E9038F007F03A01E003E01C2603C00113080007ECF000000F80
EB8000001F80A7000F5CEBC00100075C00035C6C6C485A6D485A26037C1FC7FC38073FFE
380607F090C9FC120EA3120FA2EA07C090B512C06C14FC6C14FF6C1580000315C03A0F80
003FE048C7EA07F0003EEC01F8003C1400127C0078157C12F8A5007C15F8A26CEC01F06C
EC03E06C6CEB07C0D803E0EB1F00D801FC13FE39003FFFF00107138027397EA52B>I<EA
01F812FFA312071201B1EC07F8EC1FFEEC781F9138E00F809039F98007C0D9FB007F1503
01FE805BA35BB3A5486C497EB500F1B512E0A32B3C7EBB30>I<EA0380487E487E487EA3
6C5A6C5A6C5AC8FCABEA03F012FFA3120F1203B3AB487EB512C0A3123A7EB917>I<14E0
EB01F0EB03F8EB07FCA3EB03F8EB01F0EB00E01400ABEB01FC137FA3130313011300B3B3
A3123C007E13F8B4FC130114F0A2387E03E0003C13C0381C0F80380FFE00EA03F8164C84
B91A>I<EA03F012FFA3120F1203B2913801FFFCA39138007FC0ED7E00157C157015604A
5A4A5A0206C7FC5C5C5C147814FCEBF1FEEBF73EEBFE3F9038F81F80EBF00F816E7E1403
816E7E140081157E81A2ED1F8016C0486CEB3FF0B500C0B5FCA3283C7DBB2D>I<EA03F0
12FFA3120F1203B3B3AF487EB512C0A3123C7EBB17>I<2701F803F8EB03F800FFD91FFF
EB1FFF913B3C0F803C0F80913BE007C0E007C03D07F9C003E1C003E02601FB00D9F3007F
0301140101FE02FE80A2495CA2495CB3A5486C496C497EB500F0B500F0B512F0A344267E
A549>I<3901F807F800FFEB1FFEEC781F9138E00F803A07F98007C02601FB007F150301
FE805BA35BB3A5486C497EB500F1B512E0A32B267EA530>I<EB01FE90380FFFC090383F
03F09038F8007C48487F48487F4848EB0F804848EB07C0A248C7EA03E04815F0A3007EEC
01F8A300FE15FCA9007E15F8A2007F14036C15F0A26C15E06D1307000F15C06C6CEB0F80
6C6CEB1F006C6C133E6C6C5B90383F03F090380FFFC0D901FEC7FC26287EA62B>I<3901
F80FF000FFEB3FFEECF01F9039F9C007C03A03FB0003E0D801FE6D7E49806F7E49147EA2
167F821780A2161F17C0A91780163FA217005E167E5E7F4B5A6D495A01FB495A9039F980
0F809026F8F03FC7FCEC7FFCEC0FE091C9FCAC487EB512F0A32A377EA530>I<D901FC13
C090380FFF0190383F03819038FC00C3D801F013634848133712074848131F485AA2003F
140F90C7FC5AA2127E12FEA9127E127FA27EA26C7E151F6C7E0007143F6C6C136F6C6C13
EF3900F801CF90387E070FEB1FFEEB03F890C7FCACED1FE00203B5FCA328377DA52D>I<
3903F00F8000FFEB3FE0EC70F0ECC1F83807F1833801F303A29038F601F0EC004001FC13
00A45BB3A3487EB512F8A31D267EA522>I<90387F81803803FFE3380F807F381E001F00
381307A2481303A200F01301A37EA200FE90C7FCEA7F8013FC383FFFC06C13F06C13FC00
037F6C7FD8001F13801300EC1FC00040130F00C0EB07E014036C1301A47E15C06C13036C
1480EC070000F7130E38E3C03C38C0FFF8EB3FC01B287DA622>I<1330A61370A413F0A2
1201A212031207001FB5FCB6FCA2D803F0C7FCB2EC0180A912019038F80300A21200EB7C
066D5AEB1FF8EB03F019367EB421>I<D801F8EB03F000FFEB01FFA30007EB000F000114
03B3A51507A30000140FA26D131B017C14FC6D903873FFE090381F81E390380FFF83903A
01FE03F0002B277EA530>I<B538801FFFA33A07F80007F86C48EB03E0ED01C06C7E1680
6D130300001500A2017E1306A2137F6D5BA2EC801C011F1318A26D6C5AA2ECE070010713
60A26D6C5AA214F901015BA26DB4C7FCA3147EA2143CA3141828267EA42D>I<B53B87FF
F80FFF80A33D0FF8003FC003FC006C486DC75A00035F701360A26C6C5E8215376C6C4B5A
ED77E06D01631303017E93C7FCEDE3F0017F01C15B6D1506020113F8DA8180130E011F15
0C028313FC9139C3007C1C010F151802C7137E02E6EB3E380107EC3F3002EC131FD903FC
5C17E04A130F01015DA24A130701005DA24A1303026091C8FC39267EA43E>I<B539C03F
FF80A300039039001FF000C648EB0FC093C7FC017E130E6D130C6D6C5AECC038010F5B6D
6C5A6D6C5AECF980EB01FB6DB4C8FC147E147F80814A7EEC6FE014C7903801C3F0903803
81F8EC01FCEB0600010E137E497F49800130131F01706D7ED801F880000F4A7ED8FFFE90
387FFFC0A32A257FA42D>I<B538801FFFA33A07F80007F86C48EB03E0ED01C06C6C1480
A26D130300001500A2017E1306A2017F130E6D130CA26D6C5AA2ECC038010F1330A26D6C
5AA2ECF0E001035B14F8903801F980A214FF6D90C7FCA2147EA2143CA31418A25CA35CA2
5C1210EA7C0100FE5BA249C8FC5BEAFC0EEA701C6C5AEA1FF0EA07C028377EA42D>I<00
3FB512FEA290388000FC393E0001F8003C1303003814F00030EB07E00070130FEC1FC000
601480EC3F005C147E5CEA0001495A5C495A130F5C495A013F1303EB7F00137E5B120149
1307485A12074848130649130E485A003F141E90C7127E007EEB01FEB6FCA220257EA426
>I E /Fi 8 107 df<007FB812E0B912F0A26C17E03404799743>0
D<EB0FF0EB7FFE48B512804814C04814E04814F04814F84814FCA24814FEA3B7FCA86C14
FEA36C14FCA26C14F86C14F06C14E06C14C06C148039007FFE00EB0FF020207BA52B>15
D<007FB712F8B812FCA27ECA123CB217182E177B9E39>58 D<14034A7EA24A7EA24A7EA2
4A7E143CEC7CF8EC7878A2ECF87CECF03C0101133EECE01E0103131F4A7EA2010780EC80
07010F80EC00034980011E1301013E80013C1300A2017C800178147801F8147C49143C00
01153E49141EA20003151F498000071680491407000F16C090C812034816E0001E1501A2
003E16F0003C1500007C16F80078167800F8167C48163CA2006016182E347BB239>94
D<0060161800F0163CA26C167C00781678007C16F8003C16F0003E1501001E16E0A2001F
15036C16C06D1407000716806D140F000316006D5C0001151EA26D143E0000153C6D147C
01781478017C14F8013C5CA2013E1301011E5C011F13036D5CEC800701075CECC00F0103
91C7FCA26E5A0101131EECF03E0100133CECF87CEC7878A2EC7CF8EC3CF0143F6E5AA26E
5AA26E5AA26EC8FC2E347BB239>I<14C0EB01E0A2130314C0A213071480130F1400A25B
131EA2133E133CA2137C137813F85BA212015BA212035B12075BA2120F90C7FCA25A121E
A2123E123C127C1278A212F85AA27E1278A2127C123C123E121EA2121F7EA27F1207A27F
12037F1201A27F1200A27F1378137C133CA2133E131EA2131F7FA21480130714C01303A2
14E01301A2EB00C0135678C021>104 D<126012F0A27E1278A2127C123C123E121EA212
1F7EA27F1207A27F12037F1201A27F1200A27F1378137C133CA2133E131EA2131F7FA214
80130714C01303A214E01301A2130314C0A213071480130F1400A25B131EA2133E133CA2
137C137813F85BA212015BA212035B12075BA2120F90C7FCA25A121EA2123E123C127C12
78A212F85AA2126013567BC021>I<126012F0B3B3B3B3AD1260045776C018>I
E /Fj 33 122 df<1678A316FCA34B7EA24B7EA34B7FA34B7FED0E7FA2031E7FED1C3FA2
033C7FED381FA203707F160FA203E07F1607A24A486C7EA34A486C7EA34AC77FA24A8102
0E147FA2021E81021C143FA2023C810238141FA2027881027FB6FCA291B77E02E0C71207
A20101824A1403A249488183A249C97FA3010E707EA349707E131E133E017F8348486C82
000701E0EDFFFCB500FC023FEBFFFCA346497DC84D>65 D<B812E017FE717E26007FF0C7
EA7FE06D48EC1FF8011F6F7E717E717E7113808319C019E0187FA219F0A2183FA3187FA2
19E0A218FF19C0A24D13804D13004D5A4D5AEF1FF0EF7FE0933801FF8091B600FCC7FC17
FF02E0C7EA3FE0EF0FF8EF03FE717E711380F07FC019E0F03FF0F01FF8A219FC180FA219
FEA819FC181FA219F8183FF07FF019E0F0FFC04D13804D1300013FED0FFE496CEC7FFCB9
12F0188005FCC7FC3F477DC649>I<DB03FF140C033F01F0131C4AB512FC0207D9007F13
3CDA1FF090380F807CDA7FC0903803C0FC4AC812F0D903FC15794948153F4948151F4948
150F494815074948150313FF4890C912015B00031700485A197C120F5B001F183CA2485A
A2191C127FA25B190012FFAD127FA26D171CA2123FA36C7E1938120F7F120719706C7E00
0118E07F6C6DED01C0137F6D6CED03806D6CED07006D6C150E6D6C5D6D6C5DD900FF5DDA
7FC0495ADA1FF0EB07C0DA07FF017FC7FC0201EBFFFEDA003F13F0030313803E497AC74B
>I<BA1280A3C601F0C7120F6D48020013C0013F163F181F180F18071803A2180119E0A2
1800A51970A217E0A21900A41601A316031607163F91B6FCA39138E0003F160716031601
A31600A3190EA394C7121CA5193CA21938A21978A219F8A2F001F01803A2180F181F017F
167F496CEC07FFBA12E0A33F477DC646>69 D<BAFCA3C601F0C7121F6D4802011380013F
ED007F183F181F180F1807A2180319C0A21801A5F000E0A3EE01C01900A51603A3160716
0F167F91B6FCA39138E0007F160F16071603A31601A693C9FCB1497EEBFFFCB7FCA33B47
7DC643>I<B6D8FE01B612FCA326007FFCC8EBF8006D486F5A6D486F5AB3AA91B8FCA302
F0C8123FB3AC496C4B7E496C4B7EB6D8FE01B612FCA346477DC64D>72
D<B77EA3C66C48CAFCEB3FF86D5AB3B3A4F00380A4F00700A560A360181E183EA2187E18
FE17011703170F013F153F496C49B45AB9FCA339477DC641>76 D<B500F8051FB5FCA3C6
6C6C94383FFE00013F61D91DFEEF77F8A3D91CFF17E7A26E6CED01C7A36E6CED0387A26E
6CED0707A36E6C150EA36E6C151CA26E6C1538A36E6C1570A26E6C15E0A36F6CEB01C0A3
6F6CEB0380A26F6CEB0700A36F6C130EA26F6C5BA36F6C5BA26F6C5BA36F6C5BA393387F
81C0A293383FC380A3DC1FE7C7FCA2EE0FFEA3705AA2133E017F6E5A496C4D7E000301E0
6D484A7EB60080033FB6FCA2705A58477DC65F>I<ED0FFE92B512E0913907F803FC9139
1FC0007F027FC7EA1FC002FE6E7ED903FCEC07F8D907F0EC01FC49486E7E011F8249486F
7E49486F7E49C96C7EA24848707E0003844916070007844848707EA2001F84A24982003F
1980A3007F19C04982A300FF19E0AD007F19C06D5EA4003F1980A26D5E001F1900A26C6C
4C5AA20007606D160F0003606C6C4C5AA26C6D4B5A6D6C4B5A013F5F6D6C4BC7FC6D6C4A
5A6D6C4A5A6D6C4A5AD900FEEC0FE0DA7F80EB3FC0DA1FE001FFC8FC913907FC07FC0200
B512E0DB0FFEC9FC43497AC750>79 D<B812C017FC17FFC69026F0000113C06D48903800
3FF0013FED0FF8717E717E717E19808319C019E0187FA219F0A819E0A2F0FFC0A219805F
19004D5A4D5AEF0FF0EF3FE0933803FF8091B648C7FC17F002E0CAFCB3AB497E497EB612
F8A33C477DC646>I<B712FEEEFFE017FC3B007FF8000FFF6D48010013C0011FED3FE0EF
1FF8EF07FC717E8483858583A285A761A24D5BA296C7FC4D5A4D5A60EF1FF0EF3FC005FF
C8FCEE0FFC91B612E017809139F0000FE0EE03F8EE00FC177E177F717E717E84A2717EA2
84A484A584A41A0272130783A27113801A0E496C80496C6EEBC01CB600FE027F13189538
1FF070953807FFE0CCEA7F8048487DC64C>82 D<003FBAFCA3903BF8000FFE000701C06D
48130090C7163F007EF01F80007C180FA200781807A300701803A500F019C0481801A5C8
93C7FCB3B3A64B7E92383FFF800103B712F8A342467CC54B>84 D<B600E0021FB5FCA300
0101FCC8000313F026007FF0030013804AEE7F00013F173E193C6D6C1638A280010F5FA2
6E16F001075FA26D6C4B5AA2806D4C5AA26F14076D94C7FCA26E6C140EA281023F5DA26F
143C021F1538A26E6C5CA26F14F002075DA26F130102035DA26E6C495AA2EE80076E92C8
FCA2705A037F130EA26F6C5AA2EEF03C031F1338A2EEF878030F137016FC03075BA216FF
6F5BA36F5BA26F90C9FCA3167EA3163CA248487EC64D>86 D<EB03FE90383FFFC09038FC
03F03901E000FCD80380137E48C77E486C6D7E01E080001F140F6D80A26F7E6C5AA2EA03
80C8FCA4EC01FF147F903803FF8790381FF007EB7F803801FE00EA03F8485A485A485A12
3F5B007F161CA248C7FCA3150FA36C6C131B15336C6C903831F838001F14613B0FF001C0
FC703B03FC0780FFE03B00FFFE003FC0D90FF8EB1F802E2F7CAD34>97
D<13FE12FFA3120312011200B3A315FF020713E091381F01FC913838007E4AEB1F8002C0
6D7E6D486D7E707E91C77F496E7EA2707EA283A2EF7F80A318C0AA1880A217FF1800A25F
16015F5F6D4A5A6E130701FD5DD9F9C0EB0F80D9F8E0013FC7FCD9F078137E91381E03F8
9039E00FFFE090260001FEC8FC32497DC739>I<EC3FE0903801FFFE903907E01F809039
1F8003C0013EC712E001FC1470484814F8000314034914FC00071407485A121F49EB03F8
123FED00E01600127F5BA212FFAA127FA27F123F160E121F7F000F151C7F000715386C7E
000115706C6C14E0017EEB01C090391F80078090390FE03E00903801FFFC9038003FE027
2F7DAD2E>I<EE1FC0ED1FFFA3ED007F163F161FB3A3EC1FE0903801FFFC903807F01E90
391F80079F90393F0001DF017CEB00FF4848147F0003153F5B4848141F120F121F5B123F
A2127F5BA212FFAA127FA36C7EA2121FA26C7E163F6C7E0003157F6C6C14FF6C6C903801
DFE0017E9038039FF0903B1F800F1FFFC090380FE03E903801FFF89026003FC0EBC00032
497DC739>I<EC7F80903803FFF090380FC0FC90383F003F017CEB1F8049EB0FC00001EC
07E0485A4848EB03F0000F15F8A24848EB01FCA2123FA2484814FE1500A212FFA290B6FC
A20180C8FCA6127FA37F123F160E121F7F000F151C12076D1438000315706C7E6C6C14E0
013EEB03C090391F800700903807E03E903801FFF89038003FC0272F7DAD2E>I<EC07F0
EC3FFCEC7C0E903801F81F903903F03F80903907E07FC0EB0FC0A2EB1F80013FEB3F80ED
1F00EC000E4990C7FCB1B612E0A3C66CC8FCB3B28048487E007FEBFFC0A322497DC820>
I<49B4EB03F0010F9038E01FFC903A1F83F07C3E903A7E00FDE07E01F8EB3F800001ED00
3C484890381F80180007EDC000A248486D7EA2001F81A7000F5DA26C6C495AA200035D6C
6C49C7FC0000143ED801FE13FC90389F83F039030FFFE0010190C8FC48CAFCA67F7F7F6C
B512FEEDFFE06C15F86C15FE6D8048B712802703E0000113C0D80F809038003FE048C812
0F003EED03F0003C1501007C16F80078150012F8A5007CED01F0A26CED03E0001E16C06C
ED0780D807C0EC1F006C6C143ED800FCEB01F890393F800FE0010FB51280010001F8C7FC
2F437DAC34>I<13FE12FFA3120312011200B3A3ED7F80913803FFF091380781F891380C
007C4A137E4A7F4A804A131F6D5A8391C7FCA35BB3AA2603FF80EB7FF0B5D8FE1FB512C0
A332487CC739>I<EA01F0487E487E487EA56C5A6C5A6C5AC8FCAE13FE127FA312031201
1200B3B1EA03FFB512FCA316467DC51C>I<13FE12FFA3120312011200B3B3B3A83803FF
80B512FEA317487DC71C>108 D<D801FCD97FC0EB07FC00FF902601FFF890381FFF8091
260780FC9038780FC091260E003E9038E003E00003011890263F01807F000149903A1F83
0001F800004902C6804A14CCD9FD80D90FD8130005F88001FFC75BA3495DB3AA2603FF80
D93FF8903803FF80B5D8FE0FB500E0B512FEA34F2D7CAC56>I<D801FCEB7F8000FF9038
03FFF091380781F891380C007C000349137E0001497F000049804A131FEBFD808301FFC7
FCA35BB3AA2603FF80EB7FF0B5D8FE1FB512C0A3322D7CAC39>I<EC3FE0903801FFFC90
3807E03F90391F800FC090397E0003F0496D7E48486D7E4848147E0007157F4980000F16
804848EC1FC0A2003F16E0A249140F007F16F0A300FF16F8AA007F16F0A36C6CEC1FE0A3
001F16C06C6CEC3F80A26C6CEC7F000003157E6C6C5C6C6C495A017E495A90391F800FC0
90390FE03F80902603FFFEC7FC9038003FE02D2F7DAD34>I<01FE13FF00FF010713E091
381F01FC913838007E0003496D7E000101C06D7E6C6C486D7E707E91C77F496E7E160183
A2707EA21880A2177F18C0AA188017FFA21800A24C5AA24C5A5F6D4A5A804C5A6EEB1F80
496C49C7FC027813FE91381E03F891380FFFE0DA01FEC8FC91CAFCAF3803FF80B512FEA3
32417DAC39>I<3901FC01FC00FFEB07FF91380E0F809138181FC000039038303FE00001
1360000013C0A29039FD801FC0ED0F80ED070001FFC8FCA45BB3A77F00037FB67EA3232D
7EAC28>114 D<90381FF80690B5120E3903F0079E39078001FE000EC7127E5A003C143E
48141EA212F8150EA27EA27E7ED87FC090C7FC13FC383FFFE06C13FE6C6D7E6C14E06C80
C614FC011F7F13019038000FFF02011380EC007F0060EC1FC012E0150F7E1507A37E1680
7EED0F007E6C141E6D5BD8F9E05B39F0F803E039E03FFFC026C007FCC7FC222F7DAD29>
I<130EA7131EA4133EA3137EA213FE120112031207001FB512FCB6FCA2C648C7FCB3A415
0EAB017E131C137F7F151890381F803890380FC070903807E0E0903801FFC09038007F00
1F417EBF28>I<01FEEC1FC000FFEC1FFFA30003EC007F0001153F0000151FB3A9163FA3
167F137EA26D14DF9238019FE06D9038031FF090260F8006EBFFC0903807F01C903801FF
F89026003FE0EBC000322E7CAC39>I<B500F890387FFFC0A30007018090380FFE00D801
FEC7EA07F80000ED03E05F7F6D5DA26D6C49C7FCA26E5B011F140EA26D6C5BA26E133C01
071438A26D6C5BA26E13F001015CA26D6C485AA2ECFF03027F5BA2DA3F87C8FCA215CFEC
1FCEA2EC0FFCA36E5AA26E5AA36E5AA2322D7EAB37>I<B500F890387FFFC0A300030180
90381FFE006C48C7EA07F80000ED03E05F7F6D5D6E1307013F92C7FCA26D6C130EA26E13
1E010F141CA26D6C5BA26E137801031470A26D6C5BA2ECFE0101005CA291387F0380A215
87023F90C8FC15CFEC1FCEA215FE6E5AA26E5AA26E5AA36E5AA25DA214035DA24AC9FCA2
5C140E003C131E007E131CB4FC5C14781470485B387C01C038380380D81E0FCAFCEA0FFE
EA03F832417EAB37>121 D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 1 1
1 0 bop 25 170 a Fj(Outline)p 0 321 1947 2 v 40 538 a
Fi(\017)21 b Fh(Ba)n(y)n(es)28 b(Theorem)40 683 y Fi(\017)21
b Fh(MAP)28 b(h)n(yp)r(otheses)40 829 y Fi(\017)21 b
Fh(MAP)28 b(learners)952 2748 y(1)p eop
%%Page: 2 2
2 1 bop 25 160 a Fj(Ba)m(y)m(esian)34 b(Learning)p 0
321 1947 2 v 0 537 a Fh(F)-7 b(eatures:)40 683 y Fi(\017)21
b Fh(T)-7 b(raining)30 b(examples)f(incremen)n(tally)104
786 y(increase/decrease)h(probabilit)n(y)i(of)d(eac)n(h)f(h)n(yp)r
(othesis)40 932 y Fi(\017)21 b Fh(Considers)29 b(b)r(oth)g(prior)g(kno)
n(wledge)i(\(prior)104 1035 y(probabilities\))i(and)28
b(observ)n(ed)h(data)40 1181 y Fi(\017)21 b Fh(Accomo)r(date)28
b(probabilisti)q(c)k(h)n(yp)r(otheses)d(\(e.g.,)h(\\83\045)104
1284 y(of)f(studen)n(ts)g(will)i(pass)e(the)g(test"\))40
1430 y Fi(\017)21 b Fh(Classify)31 b(new)e(instances)h(b)n(y)f(com)n
(bining)g(predictions)104 1534 y(of)g(m)n(ultiple)h(h)n(yp)r(otheses)40
1679 y Fi(\017)21 b Fh(Often)29 b(ine\016cien)n(t)40
1824 y Fi(\017)21 b Fh(F)-7 b(ramew)n(ork)27 b(for)i(c)n(haracterizing)
i(algs)f(that)f(don't)104 1928 y(explicit)q(l)q(y)j(use)d
(probabilities)952 2748 y(2)p eop
%%Page: 3 3
3 2 bop 25 160 a Fj(Ba)m(y)m(es)34 b(Theorem)p 0 321
1947 2 v 538 651 a Fg(P)12 b Fh(\()p Fg(h)p Fi(j)p Fg(D)r
Fh(\))25 b(=)939 593 y Fg(P)12 b Fh(\()p Fg(D)r Fi(j)p
Fg(h)p Fh(\))p Fg(P)g Fh(\()p Fg(h)p Fh(\))p 939 630
466 2 v 1068 710 a Fg(P)g Fh(\()p Fg(D)r Fh(\))40 854
y Fi(\017)21 b Fg(P)12 b Fh(\()p Fg(h)p Fh(\))29 b(=)g(prior)g
(probabilit)n(y)i(of)e(h)n(yp)r(othesis)h Fg(h)40 1000
y Fi(\017)21 b Fg(P)12 b Fh(\()p Fg(D)r Fh(\))30 b(=)f(prior)g
(probabilit)n(y)i(of)e(training)i(data)e Fg(D)40 1145
y Fi(\017)21 b Fg(P)12 b Fh(\()p Fg(h)p Fi(j)p Fg(D)r
Fh(\))30 b(=)f(probabilit)n(y)i(of)e Fg(h)f Fh(giv)n(en)i
Fg(D)40 1290 y Fi(\017)21 b Fg(P)12 b Fh(\()p Fg(D)r
Fi(j)p Fg(h)p Fh(\))30 b(=)f(probabilit)n(y)i(of)e Fg(D)i
Fh(giv)n(en)f Fg(h)952 2748 y Fh(3)p eop
%%Page: 4 4
4 3 bop 25 160 a Fj(Cho)s(osing)34 b(Hyp)s(otheses)p
0 321 1947 2 v 538 651 a Fg(P)12 b Fh(\()p Fg(h)p Fi(j)p
Fg(D)r Fh(\))25 b(=)939 593 y Fg(P)12 b Fh(\()p Fg(D)r
Fi(j)p Fg(h)p Fh(\))p Fg(P)g Fh(\()p Fg(h)p Fh(\))p 939
630 466 2 v 1068 710 a Fg(P)g Fh(\()p Fg(D)r Fh(\))0
845 y(Generally)31 b(w)n(an)n(t)d(the)h(most)f(probable)h(h)n(yp)r
(othesis)i(giv)n(en)0 949 y(the)e(training)i(data)0 1053
y Ff(Maximum)h(a)f(p)l(osteriori)e Fh(h)n(yp)r(othesis)i
Fg(h)1340 1066 y Fe(M)7 b(AP)1497 1053 y Fh(:)432 1207
y Fg(h)482 1219 y Fe(M)g(AP)681 1207 y Fh(=)24 b(arg)15
b(max)923 1255 y Fe(h)p Fd(2)p Fe(H)1082 1207 y Fg(P)d
Fh(\()p Fg(h)p Fi(j)p Fg(D)r Fh(\))681 1401 y(=)24 b(arg)15
b(max)923 1449 y Fe(h)p Fd(2)p Fe(H)1087 1343 y Fg(P)d
Fh(\()p Fg(D)r Fi(j)p Fg(h)p Fh(\))p Fg(P)g Fh(\()p Fg(h)p
Fh(\))p 1087 1380 V 1215 1460 a Fg(P)g Fh(\()p Fg(D)r
Fh(\))681 1563 y(=)24 b(arg)15 b(max)923 1611 y Fe(h)p
Fd(2)p Fe(H)1082 1563 y Fg(P)d Fh(\()p Fg(D)r Fi(j)p
Fg(h)p Fh(\))p Fg(P)g Fh(\()p Fg(h)p Fh(\))0 1736 y(If)29
b(w)n(e)g(assume)e Fg(P)12 b Fh(\()p Fg(h)660 1749 y
Fe(i)683 1736 y Fh(\))25 b(=)f Fg(P)12 b Fh(\()p Fg(h)982
1749 y Fe(j)1012 1736 y Fh(\))29 b(then)g(can)g(further)0
1840 y(simplify)-7 b(,)30 b(and)f(c)n(ho)r(ose)g(the)g
Ff(Maximum)k(likeliho)l(o)l(d)28 b Fh(\(ML\))0 1944 y(h)n(yp)r(othesis)
531 2114 y Fg(h)581 2127 y Fe(M)7 b(L)711 2114 y Fh(=)24
b(arg)16 b(max)944 2162 y Fe(h)978 2174 y Fc(i)997 2162
y Fd(2)p Fe(H)1112 2114 y Fg(P)c Fh(\()p Fg(D)r Fi(j)p
Fg(h)1359 2127 y Fe(i)1383 2114 y Fh(\))952 2748 y(4)p
eop
%%Page: 5 5
5 4 bop 25 160 a Fj(Ba)m(y)m(es)34 b(Theorem)p 0 321
1947 2 v 0 538 a Fh(Do)r(es)29 b(patien)n(t)h(ha)n(v)n(e)f(cancer)g(or)
f(not?)104 683 y(A)g(patien)n(t)i(tak)n(es)g(a)e(lab)i(test)g(and)e
(the)h(result)104 787 y(comes)f(bac)n(k)h(p)r(ositiv)n(e.)41
b(The)29 b(test)h(returns)e(a)104 891 y(correct)h(p)r(ositiv)n(e)j
(result)e(in)f(only)h(98\045)f(of)g(the)104 995 y(cases)g(in)g(whic)n
(h)h(the)f(disease)h(is)g(actually)h(presen)n(t,)104
1099 y(and)d(a)h(correct)g(negativ)n(e)i(result)f(in)f(only)h(97\045)f
(of)104 1202 y(the)g(cases)g(in)h(whic)n(h)f(the)g(disease)h(is)g(not)f
(presen)n(t.)104 1306 y(F)-7 b(urthermore,)27 b Fg(:)p
Fh(008)i(of)g(the)g(en)n(tire)h(p)r(opulation)104 1410
y(ha)n(v)n(e)e(this)i(cancer.)134 1709 y Fg(P)12 b Fh(\()p
Fg(cancer)r Fh(\))26 b(=)403 b Fg(P)12 b Fh(\()p Fi(:)p
Fg(cancer)r Fh(\))26 b(=)89 1825 y Fg(P)12 b Fh(\(+)p
Fi(j)p Fg(cancer)r Fh(\))26 b(=)357 b Fg(P)12 b Fh(\()p
Fi(\000j)p Fg(cancer)r Fh(\))26 b(=)60 1941 y Fg(P)12
b Fh(\(+)p Fi(j:)p Fg(cancer)r Fh(\))26 b(=)329 b Fg(P)12
b Fh(\()p Fi(\000j:)p Fg(cancer)r Fh(\))26 b(=)952 2748
y(5)p eop
%%Page: 6 6
6 5 bop 25 170 a Fj(Basic)34 b(F)-9 b(orm)m(ulas)36 b(for)f
(Probabilities)p 0 321 1947 2 v 40 543 a Fi(\017)21 b
Ff(Pr)l(o)l(duct)30 b(R)n(ule)p Fh(:)37 b(probabilit)n(y)32
b Fg(P)12 b Fh(\()p Fg(A)19 b Fi(^)h Fg(B)t Fh(\))30
b(of)f(a)104 647 y(conjunction)h(of)f(t)n(w)n(o)g(ev)n(en)n(ts)g(A)f
(and)h(B:)235 800 y Fg(P)12 b Fh(\()p Fg(A)19 b Fi(^)h
Fg(B)t Fh(\))25 b(=)f Fg(P)12 b Fh(\()p Fg(A)p Fi(j)p
Fg(B)t Fh(\))p Fg(P)g Fh(\()p Fg(B)t Fh(\))27 b(=)d Fg(P)12
b Fh(\()p Fg(B)t Fi(j)p Fg(A)p Fh(\))p Fg(P)g Fh(\()p
Fg(A)p Fh(\))40 975 y Fi(\017)21 b Ff(Sum)32 b(R)n(ule)p
Fh(:)37 b(probabilit)n(y)31 b(of)f(a)e(disjunction)j(of)e(t)n(w)n(o)104
1078 y(ev)n(en)n(ts)g(A)f(and)h(B:)297 1232 y Fg(P)12
b Fh(\()p Fg(A)20 b Fi(_)f Fg(B)t Fh(\))25 b(=)f Fg(P)12
b Fh(\()p Fg(A)p Fh(\))20 b(+)f Fg(P)12 b Fh(\()p Fg(B)t
Fh(\))21 b Fi(\000)e Fg(P)12 b Fh(\()p Fg(A)20 b Fi(^)f
Fg(B)t Fh(\))40 1406 y Fi(\017)i Ff(The)l(or)l(em)29
b(of)j(total)e(pr)l(ob)l(ability)p Fh(:)37 b(if)30 b(ev)n(en)n(ts)f
Fg(A)1612 1419 y Fb(1)1643 1406 y Fg(;)15 b(:)f(:)g(:)g(;)h(A)1900
1419 y Fe(n)104 1510 y Fh(are)29 b(m)n(utually)g(exclusiv)n(e)j(with)
1169 1468 y Fa(P)1213 1479 y Fe(n)1213 1531 y(i)p Fb(=1)1326
1510 y Fg(P)12 b Fh(\()p Fg(A)1491 1523 y Fe(i)1514 1510
y Fh(\))24 b(=)g(1,)29 b(then)542 1679 y Fg(P)12 b Fh(\()p
Fg(B)t Fh(\))26 b(=)891 1616 y Fe(n)879 1628 y Fa(X)861
1737 y Fe(i)p Fb(=1)972 1679 y Fg(P)12 b Fh(\()p Fg(B)t
Fi(j)p Fg(A)1230 1692 y Fe(i)1254 1679 y Fh(\))p Fg(P)g
Fh(\()p Fg(A)1452 1692 y Fe(i)1475 1679 y Fh(\))952 2748
y(6)p eop
%%Page: 7 7
7 6 bop 25 160 a Fj(Brute)35 b(F)-9 b(orce)36 b(MAP)e(Hyp)s(othesis)h
(Learner)p 0 321 1947 2 v 16 538 a Fh(1.)21 b(F)-7 b(or)28
b(eac)n(h)h(h)n(yp)r(othesis)h Fg(h)f Fh(in)g Fg(H)7
b Fh(,)28 b(calculate)k(the)104 642 y(p)r(osterior)e(probabilit)n(y)590
835 y Fg(P)12 b Fh(\()p Fg(h)p Fi(j)p Fg(D)r Fh(\))25
b(=)991 777 y Fg(P)12 b Fh(\()p Fg(D)r Fi(j)p Fg(h)p
Fh(\))p Fg(P)g Fh(\()p Fg(h)p Fh(\))p 991 815 466 2 v
1119 895 a Fg(P)g Fh(\()p Fg(D)r Fh(\))16 1051 y(2.)21
b(Output)29 b(the)g(h)n(yp)r(othesis)h Fg(h)1032 1063
y Fe(M)7 b(AP)1219 1051 y Fh(with)30 b(the)f(highest)104
1154 y(p)r(osterior)h(probabilit)n(y)576 1308 y Fg(h)626
1321 y Fe(M)7 b(AP)808 1308 y Fh(=)24 b(argmax)974 1373
y Fe(h)p Fd(2)p Fe(H)1193 1308 y Fg(P)12 b Fh(\()p Fg(h)p
Fi(j)p Fg(D)r Fh(\))952 2748 y(7)p eop
%%Page: 8 8
8 7 bop 25 160 a Fj(Relation)35 b(to)g(Concept)f(Learning)p
0 321 1947 2 v 0 538 a Fh(Consider)29 b(our)g(usual)g(concept)h
(learning)g(task)40 696 y Fi(\017)21 b Fh(instance)30
b(space)f Fg(X)7 b Fh(,)29 b(h)n(yp)r(othesis)h(space)f
Fg(H)7 b Fh(,)28 b(training)104 800 y(examples)h Fg(D)40
945 y Fi(\017)21 b Fh(consider)29 b Fg(F)12 b(indS)33
b Fh(learning)d(algorithm)g(\(pic)n(ks)g(a)f(most)104
1049 y(sp)r(eci\014c)h(h)n(yp)r(othesis)g(from)e(the)h(v)n(ersion)h
(space)104 1153 y Fg(V)19 b(S)226 1165 y Fe(H)r(;D)347
1153 y Fh(\))0 1310 y(What)30 b(w)n(ould)f(Ba)n(y)n(es)f(rule)i(pro)r
(duce)f(as)f(the)i(MAP)0 1414 y(h)n(yp)r(othesis?)0 1518
y(Do)r(es)f Fg(F)12 b(indS)33 b Fh(output)c(a)g(MAP)f(h)n(yp)r
(othesis??)952 2748 y(8)p eop
%%Page: 9 9
9 8 bop 25 160 a Fj(Relation)35 b(to)g(Concept)f(Learning)p
0 321 1947 2 v 0 543 a Fh(Assume)27 b(\014xed)i(set)g(of)h(instances)g
Fi(h)p Fg(x)1211 556 y Fb(1)1243 543 y Fg(;)15 b(:)f(:)g(:)g(;)h(x)1484
556 y Fe(m)1539 543 y Fi(i)0 647 y Fh(Assume)27 b Fg(D)k
Fh(is)f(the)f(set)h(of)f(classi\014cations)0 751 y Fg(D)e
Fh(=)c Fi(h)p Fg(c)p Fh(\()p Fg(x)340 763 y Fb(1)374
751 y Fh(\))p Fg(;)15 b(:)f(:)g(:)g(;)h(c)p Fh(\()p Fg(x)718
763 y Fe(m)773 751 y Fh(\))p Fi(i)0 904 y Fh(Cho)r(ose)29
b Fg(P)12 b Fh(\()p Fg(D)r Fi(j)p Fg(h)p Fh(\):)952 2748
y(9)p eop
%%Page: 10 10
10 9 bop 25 160 a Fj(Relation)35 b(to)g(Concept)f(Learning)p
0 321 1947 2 v 0 543 a Fh(Assume)27 b(\014xed)i(set)g(of)h(instances)g
Fi(h)p Fg(x)1211 556 y Fb(1)1243 543 y Fg(;)15 b(:)f(:)g(:)g(;)h(x)1484
556 y Fe(m)1539 543 y Fi(i)0 647 y Fh(Assume)27 b Fg(D)k
Fh(is)f(the)f(set)h(of)f(classi\014cations)0 751 y Fg(D)e
Fh(=)c Fi(h)p Fg(c)p Fh(\()p Fg(x)340 763 y Fb(1)374
751 y Fh(\))p Fg(;)15 b(:)f(:)g(:)g(;)h(c)p Fh(\()p Fg(x)718
763 y Fe(m)773 751 y Fh(\))p Fi(i)0 854 y Fh(Cho)r(ose)29
b Fg(P)12 b Fh(\()p Fg(D)r Fi(j)p Fg(h)p Fh(\))40 1000
y Fi(\017)21 b Fg(P)12 b Fh(\()p Fg(D)r Fi(j)p Fg(h)p
Fh(\))25 b(=)f(1)29 b(if)h Fg(h)e Fh(consisten)n(t)i(with)g
Fg(D)40 1145 y Fi(\017)21 b Fg(P)12 b Fh(\()p Fg(D)r
Fi(j)p Fg(h)p Fh(\))25 b(=)f(0)29 b(otherwise)0 1290
y(Cho)r(ose)g Fg(P)12 b Fh(\()p Fg(h)p Fh(\))30 b(to)f(b)r(e)g
Ff(uniform)i Fh(distribution)40 1435 y Fi(\017)21 b Fg(P)12
b Fh(\()p Fg(h)p Fh(\))24 b(=)436 1402 y Fb(1)p 407 1415
88 2 v 407 1465 a Fd(j)p Fe(H)5 b Fd(j)529 1435 y Fh(for)29
b(all)h Fg(h)e Fh(in)i Fg(H)0 1586 y Fh(Then,)142 1844
y Fg(P)12 b Fh(\()p Fg(h)p Fi(j)p Fg(D)r Fh(\))26 b(=)539
1661 y Fa(8)539 1698 y(>)539 1711 y(>)539 1723 y(>)539
1736 y(>)539 1748 y(>)539 1760 y(>)539 1773 y(>)539 1785
y(<)539 1860 y(>)539 1873 y(>)539 1885 y(>)539 1897 y(>)539
1910 y(>)539 1922 y(>)539 1935 y(>)539 1947 y(:)695 1695
y Fb(1)p 601 1708 218 2 v 601 1759 a Fd(j)p Fe(V)13 b(S)703
1772 y Fc(H)q(;D)802 1759 y Fd(j)865 1729 y Fh(if)30
b Fg(h)e Fh(is)i(consisten)n(t)g(with)g Fg(D)688 1958
y Fh(0)134 b(otherwise)930 2748 y(10)p eop
%%Page: 11 11
11 10 bop 25 170 a Fj(Ev)m(olution)36 b(of)d(P)m(osterior)j
(Probabiliti)q(es)p 0 321 1947 2 v 0 478 a
 26049576 7814871 1184071 920944 25918013 8485847 startTexFig
 0 478 a
%%BeginDocument: ./bookps/bayes-vs.ps

/arrowHeight 10 def
/arrowWidth 5 def

/IdrawDict 51 dict def
IdrawDict begin

/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ifelse } forall
/Encoding ISOLatin1Encoding def
currentdict end definefont
} def

/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] def
/Times-Roman reencodeISO def

/none null def
/numGraphicParameters 17 def
/stringLimit 65535 def

/Begin {
save
numGraphicParameters dict begin
} def

/End {
end
restore
} def

/SetB {
dup type /nulltype eq {
pop
false /brushRightArrow idef
false /brushLeftArrow idef
true /brushNone idef
} {
/brushDashOffset idef
/brushDashArray idef
0 ne /brushRightArrow idef
0 ne /brushLeftArrow idef
/brushWidth idef
false /brushNone idef
} ifelse
} def

/SetCFg {
/fgblue idef
/fggreen idef
/fgred idef
} def

/SetCBg {
/bgblue idef
/bggreen idef
/bgred idef
} def

/SetF {
/printSize idef
/printFont idef
} def

/SetP {
dup type /nulltype eq {
pop true /patternNone idef
} {
dup -1 eq {
/patternGrayLevel idef
/patternString idef
} {
/patternGrayLevel idef
} ifelse
false /patternNone idef
} ifelse
} def

/BSpl {
0 begin
storexyn
newpath
n 1 gt {
0 0 0 0 0 0 1 1 true subspline
n 2 gt {
0 0 0 0 1 1 2 2 false subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 2 copy false subspline
} if
n 2 sub dup n 1 sub dup 2 copy 2 copy false subspline
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Circ {
newpath
0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
} def

/CBSpl {
0 begin
dup 2 gt {
storexyn
newpath
n 1 sub dup 0 0 1 1 2 2 true subspline
1 1 n 3 sub {
/i exch def
i 1 sub dup i dup i 1 add dup i 2 add dup false subspline
} for
n 3 sub dup n 2 sub dup n 1 sub dup 0 0 false subspline
n 2 sub dup n 1 sub dup 0 0 1 1 false subspline
patternNone not { ifill } if
brushNone not { istroke } if
} {
Poly
} ifelse
end
} dup 0 4 dict put def

/Elli {
0 begin
newpath
4 2 roll
translate
scale
0 0 1 0 360 arc
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 1 dict put def

/Line {
0 begin
2 storexyn
newpath
x 0 get y 0 get moveto
x 1 get y 1 get lineto
brushNone not { istroke } if
0 0 1 1 leftarrow
0 0 1 1 rightarrow
end
} dup 0 4 dict put def

/MLine {
0 begin
storexyn
newpath
n 1 gt {
x 0 get y 0 get moveto
1 1 n 1 sub {
/i exch def
x i get y i get lineto
} for
patternNone not brushLeftArrow not brushRightArrow not and and { ifill } if
brushNone not { istroke } if
0 0 1 1 leftarrow
n 2 sub dup n 1 sub dup rightarrow
} if
end
} dup 0 4 dict put def

/Poly {
3 1 roll
newpath
moveto
-1 add
{ lineto } repeat
closepath
patternNone not { ifill } if
brushNone not { istroke } if
} def

/Rect {
0 begin
/t exch def
/r exch def
/b exch def
/l exch def
newpath
l b moveto
l t lineto
r t lineto
r b lineto
closepath
patternNone not { ifill } if
brushNone not { istroke } if
end
} dup 0 4 dict put def

/Text {
ishow
} def

/idef {
dup where { pop pop pop } { exch def } ifelse
} def

/ifill {
0 begin
gsave
patternGrayLevel -1 ne {
fgred bgred fgred sub patternGrayLevel mul add
fggreen bggreen fggreen sub patternGrayLevel mul add
fgblue bgblue fgblue sub patternGrayLevel mul add setrgbcolor
eofill
} {
eoclip
originalCTM setmatrix
pathbbox /t exch def /r exch def /b exch def /l exch def
/w r l sub ceiling cvi def
/h t b sub ceiling cvi def
/imageByteWidth w 8 div ceiling cvi def
/imageHeight h def
bgred bggreen bgblue setrgbcolor
eofill
fgred fggreen fgblue setrgbcolor
w 0 gt h 0 gt and {
l b translate w h scale
w h true [w 0 0 h neg 0 h] { patternproc } imagemask
} if
} ifelse
grestore
end
} dup 0 8 dict put def

/istroke {
gsave
brushDashOffset -1 eq {
[] 0 setdash
1 setgray
} {
brushDashArray brushDashOffset setdash
fgred fggreen fgblue setrgbcolor
} ifelse
brushWidth setlinewidth
originalCTM setmatrix
stroke
grestore
} def

/ishow {
0 begin
gsave
fgred fggreen fgblue setrgbcolor
/fontDict printFont printSize scalefont dup setfont def
/descender fontDict begin 0 [FontBBox] 1 get FontMatrix end
transform exch pop def
/vertoffset 1 printSize sub descender sub def {
0 vertoffset moveto show
/vertoffset vertoffset printSize sub def
} forall
grestore
end
} dup 0 3 dict put def
/patternproc {
0 begin
/patternByteLength patternString length def
/patternHeight patternByteLength 8 mul sqrt cvi def
/patternWidth patternHeight def
/patternByteWidth patternWidth 8 idiv def
/imageByteMaxLength imageByteWidth imageHeight mul
stringLimit patternByteWidth sub min def
/imageMaxHeight imageByteMaxLength imageByteWidth idiv patternHeight idiv
patternHeight mul patternHeight max def
/imageHeight imageHeight imageMaxHeight sub store
/imageString imageByteWidth imageMaxHeight mul patternByteWidth add string def
0 1 imageMaxHeight 1 sub {
/y exch def
/patternRow y patternByteWidth mul patternByteLength mod def
/patternRowString patternString patternRow patternByteWidth getinterval def
/imageRow y imageByteWidth mul def
0 patternByteWidth imageByteWidth 1 sub {
/x exch def
imageString imageRow x add patternRowString putinterval
} for
} for
imageString
end
} dup 0 12 dict put def

/min {
dup 3 2 roll dup 4 3 roll lt { exch } if pop
} def

/max {
dup 3 2 roll dup 4 3 roll gt { exch } if pop
} def

/midpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 x1 add 2 div
y0 y1 add 2 div
end
} dup 0 4 dict put def

/thirdpoint {
0 begin
/y1 exch def
/x1 exch def
/y0 exch def
/x0 exch def
x0 2 mul x1 add 3 div
y0 2 mul y1 add 3 div
end
} dup 0 4 dict put def

/subspline {
0 begin
/movetoNeeded exch def
y exch get /y3 exch def
x exch get /x3 exch def
y exch get /y2 exch def
x exch get /x2 exch def
y exch get /y1 exch def
x exch get /x1 exch def
y exch get /y0 exch def
x exch get /x0 exch def
x1 y1 x2 y2 thirdpoint
/p1y exch def
/p1x exch def
x2 y2 x1 y1 thirdpoint
/p2y exch def
/p2x exch def
x1 y1 x0 y0 thirdpoint
p1x p1y midpoint
/p0y exch def
/p0x exch def
x2 y2 x3 y3 thirdpoint
p2x p2y midpoint
/p3y exch def
/p3x exch def
movetoNeeded { p0x p0y moveto } if
p1x p1y p2x p2y p3x p3y curveto
end
} dup 0 17 dict put def

/storexyn {
/n exch def
/y n array def
/x n array def
n 1 sub -1 0 {
/i exch def
y i 3 2 roll put
x i 3 2 roll put
} for
} def

/SSten {
fgred fggreen fgblue setrgbcolor
dup true exch 1 0 0 -1 0 6 -1 roll matrix astore
} def

/FSten {
dup 3 -1 roll dup 4 1 roll exch
newpath
0 0 moveto
dup 0 exch lineto
exch dup 3 1 roll exch lineto
0 lineto
closepath
bgred bggreen bgblue setrgbcolor
eofill
SSten
} def

/Rast {
exch dup 3 1 roll 1 0 0 -1 0 6 -1 roll matrix astore
} def


/arrowhead {
0 begin
transform originalCTM itransform
/taily exch def
/tailx exch def
transform originalCTM itransform
/tipy exch def
/tipx exch def
/dy tipy taily sub def
/dx tipx tailx sub def
/angle dx 0 ne dy 0 ne or { dy dx atan } { 90 } ifelse def
gsave
originalCTM setmatrix
tipx tipy translate
angle rotate
newpath
arrowHeight neg arrowWidth 2 div moveto
0 0 lineto
arrowHeight neg arrowWidth 2 div neg lineto
patternNone not {
originalCTM setmatrix
/padtip arrowHeight 2 exp 0.25 arrowWidth 2 exp mul add sqrt brushWidth mul
arrowWidth div def
/padtail brushWidth 2 div def
tipx tipy translate
angle rotate
padtip 0 translate
arrowHeight padtip add padtail add arrowHeight div dup scale
arrowheadpath
ifill
} if
brushNone not {
originalCTM setmatrix
tipx tipy translate
angle rotate
arrowheadpath
istroke
} if
grestore
end
} dup 0 9 dict put def

/arrowheadpath {
newpath
arrowHeight neg arrowWidth 2 div moveto
0 0 lineto
arrowHeight neg arrowWidth 2 div neg lineto
} def

/leftarrow {
0 begin
y exch get /taily exch def
x exch get /tailx exch def
y exch get /tipy exch def
x exch get /tipx exch def
brushLeftArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def

/rightarrow {
0 begin
y exch get /tipy exch def
x exch get /tipx exch def
y exch get /taily exch def
x exch get /tailx exch def
brushRightArrow { tipx tipy tailx taily arrowhead } if
end
} dup 0 4 dict put def


%I Idraw 10 Grid 8 8 


Begin
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 0.799705 0 0 0.799705 0 0 ] concat
/originalCTM matrix currentmatrix def

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 23 0 ] concat

Begin %I Line
%I b 65535
0 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 -1 -202 ] concat
%I
29 259 29 363 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 -2 -201 ] concat
%I
30 258 129 258 Line
%I 1
End

Begin %I Rect
none SetB %I b n
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.5 SetP
%I t
[ 1 -0 -0 1 13 37 ] concat
%I
16 20 114 34 Rect
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 42 50.5 ] concat
%I
[
(hypotheses)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 65 32 ] concat
%I
[
(\(a\))
] Text
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 23.0001 -3.5 ] concat

Begin %I Line
%I b 65535
0 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 164 -199 ] concat
%I
29 259 29 363 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 163 -198 ] concat
%I
30 258 129 258 Line
%I 1
End

Begin %I Rect
none SetB %I b n
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.5 SetP
%I t
[ 1 -0 -0 1 52 41 ] concat
%I
165 19 224 48 Rect
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 213 54.5 ] concat
%I
[
(hypotheses)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 234 36 ] concat
%I
[
(\(b\))
] Text
End

End %I eop

Begin %I Pict
%I b u
%I cfg u
%I cbg u
%I f u
%I p u
%I t
[ 1 0 0 1 23.0001 -7 ] concat

Begin %I Line
%I b 65535
0 0 1 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0 SetP
%I t
[ 1 0 0 1 341 -195 ] concat
%I
29 259 29 363 Line
%I 1
End

Begin %I Line
%I b 65535
0 0 0 [] 0 SetB
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
none SetP %I p n
%I t
[ 1 0 0 1 340 -194 ] concat
%I
30 258 129 258 Line
%I 1
End

Begin %I Rect
none SetB %I b n
%I cfg Black
0 0 0 SetCFg
%I cbg White
1 1 1 SetCBg
%I p
0.5 SetP
%I t
[ 1 -0 -0 1 116 43 ] concat
%I
297 21 313 106 Rect
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 386 57.5 ] concat
%I
[
(hypotheses)
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 414 39 ] concat
%I
[
(\(c\))
] Text
End

End %I eop

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 25 138 ] concat
%I
[
(P\(h\))
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 170 138 ] concat
%I
[
(P\(h|D1\))
] Text
End

Begin %I Text
%I cfg Black
0 0 0 SetCFg
%I f -*-times-medium-r-normal-*-14-*-*-*-*-*-*-*
Times-Roman 14 SetF
%I t
[ 1 0 0 1 327 138 ] concat
%I
[
(P\(h|D1,D2\))
] Text
End

End %I eop

showpage


end
%%EndDocument

 endTexFig
 930 2748 a Fh(11)p eop
%%Page: 12 12
12 11 bop 25 160 a Fj(Learning)35 b(A)g(Real)g(V)-9 b(alued)36
b(F)-9 b(unction)p 0 321 1947 2 v 598 478 a
 11840716 10538231 3946905 8288501 23747215 26049576 startTexFig
 598 478 a
%%BeginDocument: ./bookps/bayes-linear.epsf
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
72.000 396.000 moveto
/Triangular 14.099 7.049 false 90.006 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 72.000 648.000 72.000 398.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
351.000 648.000 moveto
/Triangular 14.099 7.049 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 349.000 648.000 72.000 648.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 360.000 459.000 63.000 585.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 522.000 126.000 0.000 0.000 9.000 9.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 549.000 216.000 0.000 0.000 9.000 9.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 549.000 81.000 0.000 0.000 9.000 9.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 495.000 342.000 0.000 0.000 9.000 9.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 477.000 270.000 0.000 0.000 9.000 9.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {[9.000 9.000 ] 0 setdash} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 360.000 477.000 63.000 576.000 Line
%@EndLine
%@BeginText
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 500.308 299.768 0.000 0.000 16.000 19.500 rect
%@EndRect
gsave
309.518 508.308 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(h) -9.731 2.000 S
9.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(M) -3.731 5.000 S
(L) 4.270 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 468.000 306.000 0.000 0.000 14.000 3.996 rect
%@EndRect
gsave
307.998 475.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(f) -1.500 3.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
220.250 519.000 moveto
/Triangular 7.637 5.874 false 90.006 DrawArrowHead
220.250 548.250 moveto
/Triangular 7.637 5.874 false 270.019 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 220.249 546.949 220.250 520.300 Line
%@EndLine
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 526.346 224.807 0.000 0.000 14.000 5.326 rect
%@EndRect
gsave
227.470 533.346 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(e) -1.692 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 422.000 60.000 0.000 0.000 14.000 6.000 rect
%@EndRect
gsave
63.000 429.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(y) -2.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 651.077 318.432 0.000 0.000 14.000 6.000 rect
%@EndRect
gsave
321.432 658.077 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -2.067 3.000 S
grestore
%@EndText
restore
end
%%EndDocument

 endTexFig
 0 1250 a Fh(Consider)29 b(an)n(y)g(real-v)-5 b(alued)31
b(target)f(function)g Fg(f)0 1353 y Fh(T)-7 b(raining)30
b(examples)f Fi(h)p Fg(x)800 1366 y Fe(i)824 1353 y Fg(;)880
1331 y Fh(^)862 1353 y Fg(f)9 b Fh(\()p Fg(x)995 1366
y Fe(i)1019 1353 y Fh(\))p Fi(i)p Fh(,)29 b(where)40
1503 y Fi(\017)122 1480 y Fh(^)104 1503 y Fg(f)9 b Fh(\()p
Fg(x)237 1516 y Fe(i)261 1503 y Fh(\))24 b(=)g Fg(f)9
b Fh(\()p Fg(x)542 1516 y Fe(i)566 1503 y Fh(\))19 b(+)g
Fg(e)744 1516 y Fe(i)40 1648 y Fi(\017)i Fg(e)144 1661
y Fe(i)195 1648 y Fh(is)30 b(random)d(v)-5 b(ariable)31
b(\(noise\))f(dra)n(wn)104 1752 y(indep)r(enden)n(tly)h(for)e(eac)n(h)f
Fg(x)1035 1765 y Fe(i)1087 1752 y Fh(according)i(to)f(some)104
1856 y(Gaussian)g(distribution)i(with)f(mean=0)0 2001
y(Then)f(the)g(maxim)n(um)d(lik)n(eli)q(ho)r(o)s(d)31
b(h)n(yp)r(othesis)f Fg(h)1641 2014 y Fe(M)7 b(L)1777
2001 y Fh(is)0 2105 y(the)29 b(one)g(that)h(minimizes)f(the)g(sum)e(of)
i(squared)g(errors:)345 2275 y Fg(h)395 2288 y Fe(M)7
b(L)525 2275 y Fh(=)24 b(arg)16 b(min)759 2324 y Fe(h)p
Fd(2)p Fe(H)932 2212 y(m)928 2225 y Fa(X)909 2333 y Fe(i)p
Fb(=1)1021 2193 y Fa( )1072 2253 y Fh(^)1054 2275 y Fg(f)9
b Fh(\()p Fg(x)1187 2288 y Fe(i)1210 2275 y Fh(\))20
b Fi(\000)f Fg(h)p Fh(\()p Fg(x)1481 2288 y Fe(i)1504
2275 y Fh(\))1537 2193 y Fa(!)1570 2215 y Fb(2)930 2748
y Fh(12)p eop
%%Page: 13 13
13 12 bop 0 143 a Fh(Wh)n(y)29 b(isn't)h Fg(h)450 156
y Fe(M)7 b(L)581 143 y Fh(=)24 b Fg(f)9 b Fh(?)930 2748
y(13)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
