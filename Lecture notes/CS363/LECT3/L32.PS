%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: l11.dvi
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips -o l11.ps l11
%DVIPSParameters: dpi=300, compressed, comments removed
%DVIPSSource:  TeX output 1996.10.01:1345
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale false def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300 (l11.dvi)
@start /Fa 12 117 df<B6FCA518057E9421>45 D<B712FCEEFF8017F0C69039C0001F
F86D48EB03FEEE00FFEF3FC0717E717E717E1703717E717EA2187F1980A2F03FC0A319E0
181FA319F0AC19E0A3183F19C0A21980187F190060604D5AA24D5A4D5A4D5AEF3FC04D5A
DC03FEC7FC496CEB1FFCB812F0178004FCC8FC3C3B7CBA47>68 D<DB3FF0130C913803FF
FE021F9038FF801C913A7FE007C03C4948C7EAF07CD903FC1438D90FF0EC1CFCD91FC014
0F4948140349C8FC01FE1501484815000003177C5B4848163C120F5B001F171CA2485A18
0C127FA34993C7FC12FFAB007F031FB512F07FA29339000FFE00003FEE03FCA26C7EA212
0F7F12076C7E7F12016C7E137F6D6C14076D7ED90FF0140CD903FC141C6DB4EC787C903B
007FF003E03C021FB5EAC01C0203EC000C9126003FF090C7FC3C3D7ABB49>71
D<EC0380A24A7EA34A7EA24A7E141BA2EC31F8A3EC60FCA24A7E157EA249487EA2010380
EC001FA201066D7EA2010E80010C1307A2496D7E011FB5FC49809038300001A2496D7EA3
49147EA20001157F82120300071680D81FE0EC7FC0D8FFF8903803FFFEA22F2D7DAC35>
97 D<91391FE00180903801FFFC903907F01F0390391F800387013EC712EF49147F01F0
143F0001151F4848140F48481407120F48481403A248C8FC16015AA2127E00FE92C7FCAA
127E007FED0180A27EA26C7EEE03006C7E000715066C7E6C6C5C00005D017C5C6D5C6D6C
485A903907F00F80902601FFFEC7FC9038001FF0292E7BAC33>99
D<B612F815FF3A07F8001FC06C48EB07E0ED01F86F7E163E163FEE1F80160F17C0160717
E0A2EE03F0A317F8AA17F0A3160717E0A2EE0FC01780161F1700163E5E4B5AED07F0486C
EB1FC0B7C7FC15F82D2C7CAB36>I<B712F8A23907F800076C481300163CA2161C160CA4
82A2153093C7FCA31570A2EC01F090B5FCA2EBF001EC0070A21530A2EE0180A21500A2EE
0300A45EA25EA25E167E486CEB03FEB7FCA2292C7CAB30>I<B512C0A23807F8006C5AB3
B3A2487EB512C0A2122C7CAB1A>105 D<D8FFF0903801FFF8A2D803F89038003FC06DEC
1F80017EEC0F0016067F6D7E6D7EA26D7E6D7E8013016D7E147E147F80EC1F80EC0FC0A2
EC07E0EC03F0EC01F8A2EC00FC157E153FA2ED1F86ED0FC6ED07E6A2ED03F6ED01FEA215
00167E163E487E486C141E486C140ED8FFFC1406A22D2C7CAB35>110
D<B612C015FC3907F8007F6C48EB0FC06F7E6F7E6F7E82150082A55E15015E4B5A4B5A4B
5A037FC7FC90B512FC15F09038F000FC153E816F7E82150782A482A41706A2ED03F8170C
486CEB01FCB5D8C0001318EE3FF0C9EA0FE02F2D7CAB34>114 D<90387F80603801FFE0
39078078E0380E001D48130748130314015A140012F0A21560A27EA26C1400127EEA7F80
EA3FF86CB47E6C13F86C13FE6C7FC61480011F13C0010113E0EB001FEC07F0140115F814
00124000C01478A46C1470A26C14F015E06CEB01C07E00F7EB078039E3E01E0038C0FFFC
EB1FF01D2E7BAC27>I<007FB712F0A29039001FE003007890380FC00000701670A20060
163000E01638A2481618A5C71500B3A9EC3FF0011FB512E0A22D2C7DAB33>I
E /Fb 14 124 df<B812C017FC17FF18C028007FF0000113F0706C7E717E717EA2717EA2
711380A719005FA24D5A604D5A4D5A4C485A040F138091B648C7FCA2EFFFC002F0C7EA7F
F0EF1FFC717E717E19807113C0A27113E0A219F0A819E05F19C05F4D13804D13004D5A4C
B45AB95A18E0188005F8C7FC3C3B7CBA46>66 D<B612FCA439007FF800B3B3AFB612FCA4
1E3B7CBA26>73 D<90381FFF8048B512F04814FC3907F003FF486CC67F486C6D7E6F7E82
151F6C4880A26C5AEA01C0C8FCA391B5FC130F90387FFC1F3801FFC03807FE00485AEA1F
F0123F485AA2485AA4153F6C7E156F3A3FF001CFFC3B1FFC0787FFF00007B512070001EB
FC033A003FF0007F2C267DA530>97 D<ECFFF0010F13FF013F14809039FFC01FC0489038
003FE0D803FCEB7FF01207485A485AED3FE0123FED1FC04848EB070092C7FCA212FFA812
7FA27F123FA2001F15787F000F15F06C7E6C6CEB01E03A01FF8007C06C9038E01F80013F
B51200010F13FC010013C025267DA52C>99 D<EE3FC0ED3FFFA4150181B0ECFFC0010F13
F8013F13FE9038FFE03F48EB000F4848130348487F48487F485AA2123F5B127FA312FFA9
127FA36C7EA2121F6C6C5B00075C6C6C5B6CB44913E06CD9C07E13FF90383FFFFC010F13
F001011380303C7DBB37>I<49B47E010F13F8013F13FE9038FF80FF3A01FE003F80D807
FCEB1FC04848EB0FE016F048481307003F15F8A2485AED03FCA312FF90B6FCA301E0C8FC
A4127FA3123F6D143C121FA26C6C14786C6C14F86C6CEB01F06C6CEB07E06C9038C03FC0
013FB51200010713FC010013E026267DA52D>I<13FFB5FCA412077EB0ED7FC0913801FF
F802077F91380F03FE91381C01FF023014804A7E02E014C05C5CA391C7FCB3A4B5D8FC3F
13FFA4303C7CBB37>104 D<13FFB5FCA412077EB3B3AEB512FCA4163C7DBB1B>108
D<01FED93FE0EB07FC00FF902601FFFC90383FFF8002076D90B57E913C0F81FF01F03FE0
DA1C00903983801FF0000749DAC7007F00030160D97FCC130F02E002FC804A5C6D485CA3
91C75BB3A4B5D8FC1FB50083B512F0A44C267CA553>I<01FEEB7FC000FF903801FFF802
077F91380F03FE91381C01FF0007013014800003497E02E014C05C6D5AA391C7FCB3A4B5
D8FC3F13FFA430267CA537>I<ECFFC0010F13FC013F13FFD9FFC013C03A01FE001FE0D8
07FCEB0FF849130748486D7E001F81003F81497F007F1680A400FF16C0A9007F1680A36C
6C491300A2001F5D6C6C495AA26C6C495A6C6C495A3A00FFC0FFC0013FB5C7FC010F13FC
010113E02A267DA531>I<9038FE01FC00FFEB07FF4A138091381E1FC09138383FE00007
9038707FF00003136014C0A201FFEB3FE01480ED1FC0ED070091C8FCB3A3B512FEA42426
7EA529>114 D<130FA55BA45BA25BA25B5A5A5A001FEBFFF0B6FCA3000390C7FCB3153C
A86C147814806C14F090387FC1E090383FFFC0010F1380903801FE001E377EB626>116
D<B9FCA33003809831>123 D E /Fc 34 122 df<1506150E1518153015E0EC01C0EC03
80EC0700140EA25C5C5C14F0495A5C1303495A91C7FC5B130E131E5BA25BA25BA212015B
A2485AA212075BA2120FA290C8FC5AA2121EA2123EA2123CA2127CA31278A412F8A35AAB
1270A21278A31238A2123C121CA27EA2120612077E6C7E6C7EA21F5673C023>40
D<1404140C80801580140115C0A2EC00E0A215F01570A21578A31538A2153CAB157CA315
78A415F8A315F0A21401A215E0A21403A215C01407A21580A2140F1500A2141EA2143E14
3CA25CA25CA2495A5C13035C130749C7FC130E131E5B13385B5B485AA2485A48C8FC120E
5A12305A5A5A1E567EC023>I<EA03C0EA07E0EA0FF0A2EA1FF8A213F0120FEA07B0EA00
30A21360A213C0A2EA0180A2EA0300A212065A5A5A5A5A5A0D1A7A881A>44
D<120E123FEA7F80A212FFA21300127E123C090977881A>46 D<EC03F8EC1FFE91387C0F
80903901F007C0903903E003E0903807C001D90F8013F0EB1F00133E16F85B13FC5B1201
A2485AA2000714035BA2120F16F0491307121FA34848EB0FE0A448C7EA1FC0A4007EEC3F
8012FEA2ED7F00A248147EA215FE5DA24A5A485C14035D4A5A127C4A5A4AC7FC6C133E6C
13F8380F83F03807FFC0C648C8FC253976B72C>48 D<491404D903C0133C9138F801F891
B512F04914E016C0160015FC010E13F00206C7FC91C8FCA25BA45BA45BEC3F80903871FF
E0903877C0F09038EE007801F87F49133E49133F497F90C7FC1680A3153FA5000CEC7F00
123E127F157E4814FE5A48495A485C12E04A5A4A5A00705C4A5A6C013FC7FC003C137E38
1F03FC380FFFF06C13C0C648C8FC263977B72C>53 D<49B7FC4916E06D16F8903B0007F8
0003FC02036E7E4A486D7E841980183F4A5AA44A5AA2187FA24A48150060604D5A4AC748
5A4D5A4D5A4D5A02FEEC7F80DC01FEC7FC91B612F8A2903A01FC0001FE9338003F80717E
717E4948811707841703495AA4495A1707A349484A5AA24D5AA249484A5A4D5A4DC7FC4C
5A49C7485AEE0FF849EC7FE0007F90B61280B748C8FC6C15F0393B7BBA3D>66
D<49B7FC4916E06D82903B0007F80007FC0203EC01FE4A48EB007FF03F80F01FC0180F4A
4815E0180719F018034A5A19F8A34A5AA44AC8FCA402FE1507A4494816F0180FA3494816
E0181F19C0A24948153F1980187F1900494815FEA24D5A60494814034D5A4D5A6049484A
5A057FC7FC17FE4C5A49C7EA07F0EE1FE049ECFF80007F90B548C8FCB712F86C15803D3B
7BBA41>68 D<49B812C05B7F90260007F8C7FC0203151F4A48140F1807A2F003804A5AA4
4A5AA2F00700A24A4813C01601A295C7FC4A48485AA21607A202FE49C8FC163F91B6FCA2
495C9138FC007E161EA24948131CA318184948491338A393C75A495A60A2170149485D17
03601707495A4DC7FC5F173E49C812FE160349EC1FFC007F90B6FCB85A7E3A3B7BBA3A>
I<4BB45B031F9038E00380037F9038F00700913A01FF00FC0FDA07F8EB1E1FDA1FE0130E
DA3F80EB073E027EC7EA03FE49481401495A49485D49481400495A495A91C95A49167813
FE485A1870485A12074916F0000F5F1860484893C7FCA3485AA3485AA590CCFC484AB512
F8A260DB000190C7FC705A7E4C5AA46C4B5A7FA2121F6D4A5A120F6C6C140F7F6C6CEC3F
E06C6C147BD8007FEB01F190393FE00FC16DB5EA80C001079038FC00409026007FE090C8
FC393D74BB43>71 D<49B512F84914FC16F890390007FC006E5A4A5AA44A5AA44A5AA44A
5AA44AC7FCA414FEA4495AA4495AA4495AA4495AA4495AA4495AA449C8FCA25B007F13FE
B6FC5C263B7BBA21>73 D<902601FFFCEE7FFF4995B5FC7F90260007FE4B138002031800
DA077E4B5AF1077EA2190E020E5F191C1938A24A6CED71F8A219E1F001C10238EEC3F0F0
0383A2F00703027092380E07E0A26F6C131CA202E04B485A1870A218E0D901C04C5AEF01
C0EF0380A249486C6C484848C7FCA2170E5FD90700167E5FA25F010E4B5BA2EEC1C0ED07
E1499139E38001F8EEE700A216EE494C5A16FC5E13784C495A01F81303D803FE4A130F26
7FFFE0D9C007B512C0B55D6C4B7E503B7BBA4D>77 D<147CEB03FF90380F838690381F01
CF90383C00FF5B01F87F485A4848137E120749133E120F001F5C5B123FA290C75A5AA300
FE495AA448495A1670A3913807C0E0140F127C141F91383FC1C0003C1377003E01E31380
391E01C3C33A0F0781C7003903FE00FED800F8137C242777A52C>97
D<EC3F80903801FFF0903807E07890380F801C90381E000E137C49133E0001147E484813
FE5B000714FC4848137C153048481300123FA290C8FC5AA312FEA55AA31504007C140E15
1C007E143C003E1478001E14E0001FEB03C06CEB0F803907C07E003801FFF838007F801F
2777A528>99 D<167CED1FFEED3FFC151F1500A216F8A4ED01F0A4ED03E0A4ED07C0A491
387C0F80EB03FF90380F838F90381F01CF90393C00FF005B01F87F485A4848137E120749
133E120F001F5C5B123FA290C75A5AA300FE495AA448495A1670A3913807C0E0140F127C
141F91383FC1C0003C1377003E01E31380391E01C3C33A0F0781C7003903FE00FED800F8
137C273D77BB2C>I<EC3F80903801FFE0903807E07090381F803890383E001C5B5B485A
1203485A485A1538001F14784913F0003FEB03E0EC3F80397FFFFE0014E090C8FCA2127E
12FEA5127EA21504150E151C003E143C15786C14E06CEB03C03907800F803903C07E0038
01FFF838007F801F2777A528>I<ED01E0ED07F8ED0E1CED1C0EED3C1EED783F167FEDF8
FEA2EDF07C020113381600A25D1403A44A5AA5140F0103B512804914C016809039000F80
00A24AC7FCA5143EA55CA55CA5495AA5495AA413075CA4495AA391C8FC5B121CEA3E1E12
7EEAFE3E133C12FCEAF838EA7070EA30E0EA1FC06C5A284F82BC1A>I<EC07E0EC1FF891
387C1C309138F80E78903901E007F8903803C0031307EB0F80D91F0013F0491301137EA2
01FEEB03E05B1201A24848EB07C0A44848EB0F80A4ED1F005BA25D153E0003147E15FEA2
6C6C485A0000EB037CEB780EEB3C3C90381FF8F8EB07E090C7FCA24A5AA44A5AA2001C5C
007E13074A5A00FE91C7FC141E485B007813F8387C03F0381FFFC0D807FEC8FC25387CA5
28>I<EB03E0EBFFF0485B7E1307A25CA4495AA449C8FCA4133EA490387C07F0EC1FFCEC
7C1EECE00F9039F9C00780EBFB80EBFF004914C0485AA25B5B0003EC0F80A25BA24848EB
1F00A3153E485AA25DA248C7FCEDF80EA3003E903801F01CA3EDE0385A1630167016E048
903800E1C0ED7F800070EC3E00273D7ABB2C>I<14E0EB01F0EB03F8EB07F0A2EB03E0EB
01C090C7FCAC13F8487EEA030EEA060F120C001C1380121812381400485AA3EAE03EA2C6
5AA35BA3485AA3485AA23807C070A3380F80E0A3EB01C0A2EB038014005BEA070EEA03FC
EA01F0153A79B81A>I<EB03E0EBFFF0485B7E1307A25CA4495AA449C8FCA4133EA449EB
07C0ED1FE0ED7870EDE0F89038F80181EC03031406020C13F03801F01891383001C04AC7
FC5CEA03E1EBE38001E6C8FC13FC485AEBFF80EBDFE0EBC1F0380F80F8143C143E80EA1F
0016E0A3003E90383E01C0A3ED03805A141EED0700EC0E06486D5AEC03F800706D5A253D
7ABB28>107 D<EB0F803803FFC04813807EEA001FA21400A4133EA45BA45BA4485AA448
5AA4485AA4485AA448C7FCA4123EA45A130EA3485AA45BA2EA7870A2EA38E0EA1FC06C5A
123D78BB16>I<D803E001FEEB03F83C07F003FF800FFE3C0E380F83C03E0F3D1C3C1C01
E0700780903C1E3800F0E003C0003849EBF1C04AEBF380D93FC0D9FF0013E00070495BA2
91C75A013E5CD8E07E0101EC07C0A2D8007C5CA2494948EB0F80A3F01F004848495AA218
3EA24848495AF07C07A3484849C7EAF80EA3F0F01C4848133E19181938197048C748EC70
E0F03FC0000E0238EC1F00402779A546>I<D803E013FE3A07F003FF803A0E380F83C03A
1C3C1C01E06D486C7E00385B5CD93FC07F00705BA291C7FC133ED8E07E495AA2EA007CA2
49495AA34B5A485AA24B5AA2485A92381F01C0A3484890383E0380A392383C0700485A16
065E161C48C7EA1C38ED0FF0000EEC07C02A2779A530>I<EC3F80903801FFE0903807E0
F890380F803C90383E001E49131F5B0001EC0F80485A4914C01207485AA2485A123FA290
C7121F5AA300FEEC3F80A316005D48147E15FE5D5D007C13014A5A007E5C003E495A4A5A
6C49C7FC6C137C3807C1F83801FFE06C6CC8FC222777A52C>I<90390F8007E090391FC0
1FF8903938E0783C903970F0E01E913879C01F9039E07B800FDA7F00138014FE48484814
C0A25CA2380381F0A2EA0001A24948131FA44948EB3F80A3170049485B167EA25E131F4B
5A5E4B5A013F5C6E485A013E49C7FCECE01E90387C707CEC3FF0EC0FC091C9FC5BA4485A
A4485AA31207B57EA32A377FA52C>I<3903E001F83907F00FFE3A0E381E0780381C3C38
90391E700FC00038EBE01FEB1FC0D93F80138012709138000E0092C7FC133EEAE07E137C
1200A25BA4485AA4485AA4485AA4485AA448C9FCA2120E222779A524>114
D<14FF010313C090380F81E090381C007049133813780170137801F013F8EBE001120115
F0EC00E06D1300A213FEEBFFE06C13FC6D7E6D7E6D1380010313C0EB003FEC0FE0140714
03121C123E127E00FE14C0A248148048130700E014000070130E5C6C5B381F01F03807FF
C0D801FEC7FC1D277AA523>I<EB0380EB07C0A3EB0F80A4EB1F00A4133EA45B007FB5FC
B6FC14FE3800F800A4485AA4485AA4485AA4485AA448C7FC141CA21438123E1430147014
E0A2EB01C0381E0380EB0700EA0E0EEA07FCEA01F0183778B51D>I<13F8486C1470D807
0E14F8EA060F000CEC01F0001C138012181238ED03E038701F00A3D8E03EEB07C0A2C65A
A2ED0F805BA34848EB1F00A44848133E1607A3ED7C0EA315FC0201131C12019138033C18
2600F00613389039783C1C7090393FF80FE090390FE007C0282779A52E>I<01F8EB0380
D803FCEB07C0D8070E130FD80E0FEB1FE0120C001CEB800F001814071238150338701F00
A21501D8E03E14C0A2C65AA2ED03805BA34848EB0700A3150E485AA25DA25DA215305D00
0114E05D6C6C485A4AC7FCEB7C0EEB1FFCEB07F0232779A528>I<01F8ED01C0486C9138
E003E0D8070E903901F007F0D8060F150F000CEC03E0001C018014070018160312389238
07C00138701F00A21700D8E03E494813E0A2C65AA292391F0001C05BA34848013EEB0380
A318004848495BA21706170EA25F15FC171800010101143803BC5B2600F0031460902678
071E5B903A3C0E0F838090271FFC07FFC7FC903907F000FC342779A539>I<903907E003
F090391FF80FFC90393C3C1C1E9038701E309039E00E703F3A01C00FE07FD8038013C001
00147E48148000061538000E1500A24849C7FCA2C7FCA2143EA45CA45C1638A349481370
121C003E15E0EA7E0300FEEC01C00107EB038026FC0678130039780E380E3938381C1C39
1FF00FF83907E007E028277CA528>I<13F8486C1470D8070E14F8EA060F000CEC01F000
1C138012181238ED03E038701F00A3D8E03EEB07C0A2C65AA2ED0F805BA34848EB1F00A4
4848133EA45DA315FC4A5A120114033800F0069038783DF0EB3FF9EB0FE1EB00014A5AA2
5D001C1307003E5C007F130F92C7FC007E131E143E0078133C00705B5C383803C0381C0F
80D80FFEC8FCEA03F8253879A52A>I E /Fd 17 89 df<140C141814381430146014E014
C01301EB0380A2EB0700A2130EA25BA25BA21378137013F0A25B1201A2485AA4485AA312
0F90C7FCA35AA2121EA3123EA4123CA3127CA81278A212F8B1164B748024>48
D<12C01260127012307E121C120C120E7EA26C7EA26C7EA26C7EA21370A213781338133C
A2131C131EA27FA4EB0780A314C01303A314E0A21301A314F0A41300A314F8A81478A214
7CB1164B7F8024>I<EAFFFCA3EAE000B3B3B3B10E4A73801C>I<EAFFFCA3EA001CB3B3B3
B10E4A80801C>I<12E0B3B3B3B1EAFFFCA30E4A73811C>I<131CB3B3B3B1EAFFFCA30E4A
80811C>I<12E0B3A9031B73801C>I<12E0B3A9031B75801C>I<1318137813F0EA01E0EA
03C0EA0780EA0F005A121E123E123C127CA2127812F8B3A50D25707E25>I<12F8B3A512
78127CA2123C123E121E121F7EEA0780EA03C0EA01E0EA00F0137813180D25708025>58
D<137CB3A613F8A313F0120113E0120313C0EA07801300120E5A5A12F012C012F012387E
7E7E1380EA03C013E0120113F0120013F8A3137CB3A60E4D798025>60
D<12F8AE050E708025>62 D<12F8B11278A2127CA8123CA3123EA4121EA3121FA27EA37F
1207A36C7EA46C7EA212007FA2137013781338A27FA27FA27FA2EB0380A2EB01C0130014
E01460143014381418140C164B748224>64 D<147CB11478A214F8A814F0A31301A414E0
A31303A214C0A313071480A3EB0F00A4131EA2131C133CA2133813781370A25BA2485AA2
485AA248C7FCA2120E120C121C12185A127012605A164B7F8224>I<12F8B3A9051B7480
24>I<12F8B3A9051B6E8024>I<B912C018E06CC81201EE001F6C6CED03F06C6C1500000F
17386D16186C6C160C6C6C1604A26C6C16026C6C1600137FA26D7E6D7E130F806D7E6D7E
A26D7E6D7E147E147F6E7E6E7EA2140F6E5A14034AC9FC140E5C5C5CA25C495A495A49CA
FC130EA24916024916045B49160C00011718491638484816F848C9EA01F0000E160F48ED
01FF003FB812E0A25AB912C0373A7E7F3C>88 D E /Fe 7 121 df<90380FFFFC017F13
FE90B512FC3903F07C003807801C380F001E000E130E121E48130F12381278140E48131E
A3141C143C5A5C14706C5B387001C0383003806C48C7FCEA0C1CEA03F01F1A7E9922>27
D<127812FCA212FEA2127A1202A41204A31208A212101220124007127B8511>59
D<013FB512F016FC903901F8003F4AEB0F80EE07C0EE03E0EE01F0495AEE00F8A3495A17
FCA3495AA449C812F81601A3013EEC03F0A217E016074915C0A2EE0F80EE1F005B163E5E
5E4848495AED07C0ED1F800003027EC7FCB612F815C02E297EA831>68
D<15F0141FA2140115E0A4EC03C0A4EC0780A490381F0F00EB70CF3801C02FEA03800007
131EEA0F00121EA2003E5B123C127CA2485BA4485B1540A3903801E080EA7003EA780439
3808E100381C30733807C01C1C2A7EA91F>100 D<131C133EA2133C13381300A9EA0780
EA08E01210EA20F0A21240A2EA41E012811201EA03C0A2EA0780A3EA0F00A21304121EA2
EA1C08123CEA1C101320EA0C60EA07800F287EA715>105 D<000F137E39118183803921
C203C0EBEC01EA41E801F013E013E0A23983C003C01203A33907800780A3EC0F00EA0F00
1504141EA2001EEB1C08143CEC1C10152048EB0C600018EB07801E1A7E9924>110
D<90387C07C0390186082039020310700004EBA0F0000813A114C10010EBC0E015004848
5A1200A349C7FCA4131E1540A200301480EA783E00F8EB0100134E00F013063861870838
1E01F01C1A7E9922>120 D E /Ff 2 51 df<B712E0A323037B8F2E>0
D<903803FFF8131F137FD801FCC7FCEA03E0EA078048C8FC121E121C5AA25AA35AA3B612
F8A300E0C8FCA31270A37EA27E121E7E6C7EEA03E0EA01FC39007FFFF8131F13031D257B
A028>50 D E /Fg 7 54 df<130813101320134013C0EA0180A2EA03001206A2120E120C
121CA212181238A212301270A512F05AAD7E1270A512301238A21218121CA2120C120E12
06A27EEA0180A2EA00C013401320131013080D3D7AAC17>40 D<7E12407E7E12187EA27E
7EA21380120113C0A2120013E0A213601370A513781338AD13781370A5136013E0A213C0
1201A2138012031300A212065AA25A12105A5A5A0D3D7DAC17>I<137F3801C1C0380780
F0380F0078000E1338487F003C131EA3487FA400F81480AF00781400A46C131EA3001C13
1C6C5B000F13786C6C5A3801C1C0D8007FC7FC19297EA71E>48 D<1310137013F0120712
FF12F81200B3AD487E387FFFE0A213287BA71E>I<13FE3807FF80380E07E0381803F038
2001F8130048137CA200F8137E7E143EA30078137EC7FC147CA214F8A2EB01F014E0EB03
C0EB07801400130E5B5B5B13605B38018002EA0300000613045A5A0010130C383FFFFC48
13F8B5FCA217287DA71E>I<1460A214E01301A21303A213051309A213111321A2134113
81A2EA01011202A212041208A2121012301220124012C0B61280A2390001E000A8497E90
387FFF80A219287EA71E>52 D<00181318001F13F0EBFFE014C01480EBFE00EA11F80010
C7FCA8137E38138380381400C0001813E000101370C71278147C143CA2143EA3127012F8
A3143C12800040137C14787E003013F0381801E0380E07C03807FF00EA01FC17297DA71E
>I E /Fh 28 127 df<D801F0EB3FC0D803FCEBFFF03A061E03C0F83A0C1F07007C2618
0F0C133E1498003013B0D91FE0133F5C12605C163E4848C7127EA21200A2017E14FCA449
EB01F8A44848EB03F0A44848EB07E0A44848EB0FC0A44848EB1F8012076C5AC8FCED3F00
A4157EA45DA44A5AA25D6E5A28387EA52B>17 D<027FB512E049B612F01307131F4915E0
90267F81FEC7FC9038FE007ED801F87F48487F485A4980485A121F90C7FC5AA2127EA348
4AC7FCA3153E157E5A5D5DA24A5A4A5A007C5C4A5A003C49C8FC6C131E6C137C380781F0
3803FFC0C66CC9FC2C267CA431>27 D<121C123E127FEAFF80A3EA7F00123E121C090979
8818>58 D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A2
5A5AA25A12200A1A798818>I<124012F812FE6C7EEA3FE0EA0FF8EA03FEC66C7EEB3FE0
EB0FF8EB03FE903800FF80EC3FE0EC0FF8EC03FE913800FF80ED3FE0ED0FF8ED03FE9238
00FF80EE3FE0EE0FF8EE03FE933800FF80EF3FE0EF0FF0A2EF3FE0EFFF80933803FE00EE
0FF8EE3FE0EEFF80DB03FEC7FCED0FF8ED3FE0EDFF80DA03FEC8FCEC0FF8EC3FE0ECFF80
D903FEC9FCEB0FF8EB3FE0EBFF80D803FECAFCEA0FF8EA3FE0EAFF8048CBFC12F8126034
3479AF43>62 D<EC03FC91381FFF80027F7F9138F807F0903901E000F8D90380137C49C7
7E010E80130C011FEC0F8080496CEB07C0A217E05C6DC7FC130E90C8FC17F0A4EC0FF0EC
7FFC903801F80E902607C00313E090390F000187013EEB00CF5B49146F485A0003ED7FC0
4848143FA2485A001F16805B003F157F170048C8FCA216FEA200FE5DA24B5AA24B5A5A4B
5A5E007E4A5AA2003E4AC7FC153E6C5C6C6C485A6C6C485A3903F01FC06CB55A6C01FCC8
FCEB1FE02C3E7CBC2E>64 D<17181738173C177C17FCA21601A216031607A2160D831618
163816301660A216C0150116804B487EA203067F150E150C5DA25D157015604B80A24A48
133F140392C7FC1406A2020FB6FC5CA20230C7EA3FC0A24A141F14E05C495AA249C8FC13
06A24982170F5B1338137813F8D807FCED3FF0267FFFC0010FB512C0B517E06C4916C03B
3D7DBC41>I<0103B77E18F818FE903B0007F80003FF02039138007F804A48EC1FC0F00F
E0F007F0F003F84A48140119FC180019FE4A48157EA2197FA24A5AA44AC9FCA402FE16FF
A4494816FE1801A3494816FC180319F8A24948150719F0F00FE0A24948ED1FC0A2F03F80
F07F004948157E18FE4D5A4D5A49484A5A4D5AEF1F80057FC7FC49C7EA01FEEE07F849EC
3FE0B812804CC8FC16E0403B7CBA47>68 D<0103B812F8A390260007F8C7121F18014B14
001978A219704A481530A44A5AA21960A24A4813101730A219004AC75AA217E0A202FE49
5A160F91B6FCA2495D9138FC000F16071603494891C8FCA31980494801061301A2F00300
93C7FC49485D1806180E180C4948151C1818183818304948157018F04D5A170349C8EA0F
C0173F49913803FF80B9FC95C7FCA23D3B7CBA40>I<0103B5D8FC01B512FEA390260007
FCC73803FE004B5D4B5DA44A484A5AA44A484A5AA44A484A5AA44AC8485AA402FE4BC7FC
A291B8FCA2495E02FCC8FCA349484A5AA449484A5AA449484A5AA449484A5AA449484A5A
A449C8485AA249157FB6017FB57EA3473B7CBA48>72 D<902603FFF891380FFFFE81A290
260003FE9138007FC0F13E00DA06FF151C6F1518A26F7E020C5E82151FA24A6C6C5CA26F
7EA202306D5C1503A26F7E02604B5A821500A24A017F49C7FCA2EE3F80A24948ECC00616
1FA2EE0FE049C75C17F01607A201066E6C5AA2EE01FCA2496F5A1600A2177F495E18E017
3FA2496F5AA2170F13706001F01507EA07FCB500E0140395C8FC83473B7CBA45>78
D<147E49B47E903907C1C38090391F0067C0013E136F49133F5B4848131F00031580485A
A2485A001FEC3F005B123FA290C7127E5AA300FE5CA44A5A481506A3913803F00CA2127C
02071318140F6C131B001E013113306C01E11360260783C013E03A03FF007FC0D800FCEB
1F0027277DA52D>97 D<EC1FE0ECFFF8903803F01C90380FC00649C67E013E131F495B49
5B48485B485A12074848137E153C001F91C7FC485AA290C9FC5AA312FEA65AA21680007C
1401007EEC0300003E14065D6C14386C14F039078003C02603E01FC7FC3800FFFCEB3FE0
21277DA525>99 D<163F92380FFF804B130081ED007FA2167EA45EA44B5AA44B5AA49138
7E07E0903801FF87903807C1C790381F0067013EEB6FC049133F5B4848131F00035D485A
A2485A001F4AC7FC5B123FA290C7127E5AA300FE5CA44A5A481506A34A485AA2127C0207
5B140F6C131B001E01315B6C01E15B260783C013E03A03FF007FC0D800FC011FC7FC293D
7DBB2D>I<EC1FE0ECFFF8903807F03C90380F800E90383F0007137C5B485A1203485A12
0F49130E121F49133C003F14F0EC0FE048B5128002F8C7FC90C9FCA2127E12FEA4127EA3
16801501003EEC030015066C5C15386C6C13F00007EB03C02603E01FC7FC3800FFFCEB3F
E021277DA528>I<EC03F0EC1FFC91383E0E1C9138F8033E903901F001FEEB03E0903807
C000495A011F14FC49C7FCA2137E01FEEB01F85B1201A249EB03F01203A34848EB07E0A4
ED0FC05BA30003EC1F80A2153F6C6C137FEDFF000000EB01BF903878033FEB3C1E90381F
FC7EEB07E090C7FCA25DA44A5A121E003F5C48130348495A5D4A5A4849C7FC0078137E38
3C01F8381FFFE0000390C8FC27387FA529>103 D<147014F8EB01FC1303A214F8EB01F0
EB00E01400AC137CEA01FEEA038738060780000C13C01218A2EA300FA21260EB1F80A212
C0EB3F001200A2137EA25BA3485AA3485A140CA2EA07E01418EA0FC01430A21460138000
0713C0EB81803803C300EA01FEEA007C163B7EB91E>105 D<EB0FC03803FFE014C0A2EA
001FA21480A4EB3F00A4137EA45BA4485AA4485AA4485AA4485AA4485AA448C7FCA4127E
1303A3EAFC06A35BA3EA7C18A2EA3C30EA1FE0EA07C0133D7CBB1A>108
D<D801F0D91FC0EB3FC0D803FCD9FFF0EBFFF03D061E01E07C03C0F83D0C1F07003E0700
7C26180F0E020C7F02986D5A003001B05CD91FE002E0133F5F00605B4A5C193E4848C748
C7127EA21200A2017E027E5CA34E5A495CA24E5AA24848495A953807E00CA34848494890
380FC018A21A301980484849481560A21AC0953807818048484948EC870000070207EC03
FE6C486D48EB00F846277EA54C>I<D801F0EB3FC0D803FCEBFFF03A061E03C0F83A0C1F
07007C26180F0C7F1498003013B0D91FE0133F5C12605C163E4848C7127EA21200A2017E
5CA34B5A5BA24B5AA2485A923807E00CA3484890380FC018A21730168048481560A217C0
92380781804848EC87000007EC03FE6C48EB00F82E277EA534>I<EC1FE0ECFFFC903803
F03E90380FC00F90391F000780013EEB03C04914E04914F0484813011203484814F8485A
A2121F5B003F140390C7FC5AA300FEEC07F0A3ED0FE0A216C048141F1680007CEC3F0000
7E143E157E003E5C5D6CEB03E06C495A6C6C485A2603E07EC7FC3800FFF8EB3FC025277D
A52A>I<90390F8003F090391FE00FFC903930F03C1F903A60F87007809038C078C09139
7D8003C02701807F0013E014FE17F048485AA3380601F8A21200A249481307A44948EB0F
E0A317C04948131F1780A2EE3F00495A167E167C5E496C485A5E91386003C0ED0F809026
7E383FC7FCEC1FFCEC07E091C9FC5BA4485AA4485AA31207B512C0A32C3783A52B>I<D8
01F0137E3903FC03FF3A061E0781803A0C1F0C03C03A180F180FE0ECB01F003013E0131F
02C013C0006001801380ED0F0092C7FC4848C8FCA21200A2137EA45BA4485AA4485AA448
5AA4485A12076C5A23277EA527>114 D<EC7F80903801FFE0903807C07090380E001849
130C133C0138137C017813FCEB700113F0A29038F800F815606D1300EBFF8014FC14FF6D
13806D13C06D13E0010713F0EB007FEC07F814011400121E123F5A4814F0A24814E04813
014814C00060EB03800070EB07006C131E000F137C3807FFF0C613801E277CA528>I<EB
01C0497E1307A2495AA4495AA449C7FCA4137E007FB51280B6FC1500D800FCC7FCA4485A
A4485AA4485AA4485AA4485A1406A25CEA3F005CA25CA25C6C5B495AD80F07C7FCEA07FE
EA01F819377DB51F>I<017C163848B40238137C26038780017C13FE260607C0017E13FF
000C5D800018177F0030173F4B48131F26600FC0150FA348484848481306A21200EB3F00
4B48130C137EA34949481318A318304848495AA21860A218C0A2EF0180A20000023FEB03
00036F1306017CEB67C06D01C3131C903A1F0381F078903A07FF00FFE0D901FCEB3F8038
277EA53E>119 D<D903F013FC90390FFC01FF903A3C1E0303809026700F0613C0903AC0
078C0FE0D80180EBD81FD8030013F0A2000602E013C0178048ED0F0093C7FC48495AA2C7
FCA24A5AA44AC8FCA4147E1603A3001E491306123FD87F805C1381D8FF015CD9033C5B00
7E013E5B267C061E5B3A381C0F0780271FF807FFC7FC3907E001F82B277EA531>I<1503
ED0780A216C0150316E0ED01F0007FB612F8B712FCA26C15F8C8EA07F0ED0FC0ED1F0015
3E153C15381510261271BD2B>126 D E /Fi 72 127 df<ED0380A24B7EA24B7EA24B7E
A24B7EA2ED67FCA2EDC3FEA291380181FFA24AC67F167F020680163F4A80161F4A80160F
4A8002706D7E146002E06D7E5C01016E7E5C01036E7F91C8FC496F7E1306010E6F7E130C
011C6F7E131801386F7E133001706F7E136001E06F7E5B0001707E5B000370138090CAFC
48EF7FC01206000EEF3FE0120C001CEF1FF0001FB9FC4818F8A24818FCA2BA12FEA23F3D
7CBC48>1 D<EC07FCEC3FFF9138FC0380903903F000C0D907C0136090390F8001F04948
487E491307137EA2137C01FC6D5AED00C093C7FCAAED01F8B7FCA33900FC00071501B3AB
486C497E3B7FFFF07FFFF0A32C3D7FBC30>12 D<DA07FCEB07FC913A3FFF803FFF913BFE
03C0FC0380903C03F00063F000C0D907C0D937C0136049489039FF8001F049484849487E
49491407017E5CA2017C5C01FC01016E5A0300EC00C096C7FCAAF001F8BAFCA3D800FCC7
38FC00071801B3AB486C496C497E297FFFF87FFFF8B512F0A3443D7FBC48>14
D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A25A5AA25A
12200A1A79BB18>39 D<146014E0EB01C0EB0380EB0700130E5BA25B137813705B12015B
1203A2485AA248C7FCA35A121EA2123EA2123CA2127CA5127812F8B21278127CA5123CA2
123EA2121EA2121F7EA36C7EA26C7EA212017F12001370137813387FA27F7FEB0380EB01
C0EB00E01460135678C021>I<124012E012707E7E7E7EA26C7E7F12016C7E7F13701378
A27FA27FA3131F7FA21480A21307A214C0A5130314E0B214C01307A51480A2130FA21400
A25B131EA35BA25BA2137013F05B485A12035B48C7FCA2120E5A5A5A5A124013567BC021
>I<1518153CB3A7007FB812FEBAFCA26C17FEC8003CC8FCB3A7151838387BB143>43
D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A25A5AA25A
12200A1A798818>I<B512FCA516057F941D>I<121C123E127FEAFF80A3EA7F00123E121C
0909798818>I<1506150FA2151F151EA2153E153CA2157C1578A215F815F0A2140115E0
A2140315C0A214071580A2140F1500A25C141EA2143E143CA2147C1478A214F85CA21301
5CA213035C13075CA2130F91C7FCA25B131EA2133E133CA2137C1378A213F85BA212015B
A212035BA212075BA2120F90C8FCA25A121EA2123E123CA2127C1278A212F85AA2126020
577BC02B>I<EB03FC90381FFF8090387E07E09038F801F048486C7E4848137C48487F48
487FA248C7EA0F80A24815C0A3007EEC07E0A500FE15F0B3007E15E0A4007F140F6C15C0
A36C15806D131F000F1500A26C6C133E6C6C5B6C6C5B6C6C485A90387E07E090381FFF80
D903FCC7FC24397DB72B>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8EB7FF0
007FB512F8A31D3879B72B>I<EB0FF8EB7FFF48B512C03903E03FE039070007F8000E6D
7E00186D7E481300157F481580127C00FE143F6C15C07FA46CC7FC123EC8FC1680157F16
00A215FEA24A5A5D4A5A4A5A5D4A5A4AC7FC143E143C5C5C495A495A495A49C8FC011E14
C013381330491301491480485A48C7FC00061403000FB6FC5A5A481500B7FCA322387CB7
2B>I<EB07FC90383FFF8090B512E03901F807F03903C001F848C77E000E80D80FC07F48
6C7F6D1480A46C5A6C5A0001C71300C85AA25D4A5A5D4A5A5DEC0FC0023FC7FCEB1FFCEC
FF8090380007E0EC01F86E7E157E157FED3F8016C0A2ED1FE0A216F0A3123F487E487EA2
16E0A2153F4914C06CC7FC0070EC7F806C15006C14FE390F8001FC3907F007F80001B512
E06C6C1380D907FCC7FC24397DB72B>I<151C153CA2157C15FCA214011403A21407140F
141D141914311471146114C11301EB038114011307130E130C131813381330136013E0EA
01C01380EA03005A12065A121C5A123012705AB712FCA3C73801FC00AB4A7E49B512FCA3
26397EB82B>I<00061406D80780131E9038F801FC90B55A5D5D5D92C7FC5C38067FF090
C9FCABEB03FCEB1FFF90387C0FC09038E003E039078001F090C77E0006800004147EC8FC
157FED3F80A316C0A4123E127F5A7FA290C71380A248147F00601500A26C14FE00385C6C
495A6C495A6C6C485A3903E01FC06CB5C7FC6C6C5AEB0FF022397CB72B>I<EC1FC0ECFF
F0010313FC90380FE03E90381F800690383E000349131F49EB3F804848137F1203485AA2
4848EB3F00001F141E4990C7FCA2123FA2127F90C9FCA2EB01FE903807FFC039FF0E03E0
90381800F849137C497F153F49EB1F80A24914C0ED0FE0A290C7FC16F0A37EA56C7E16E0
A2121FED1FC06C7E16800007EC3F006C6C133E6C6C5B6C6C5B90387E03F06DB45A010F13
80D903FEC7FC24397DB72B>I<12301238123E003FB612F0A316E04815C01680A20070C7
EA030000601406A25D00E05C485CA25DC85A4A5AA24AC7FC1406A25C141C141814381478
147014F0A2495AA21303A31307A25C130FA3131FA5133FA96D5A6DC8FC243B7BB92B>I<
EB03FC90381FFF804913E09038FC03F03901E000F8D80380133C90C77E4880120EED0780
A2121EA2121FA27F6DEB0F00EA0FF06D131E01FE131C6C6C5B6CEBC070ECE1E06CEBFBC0
6C01FFC7FC133F6D7F6D13E0497F017813FC3901E07FFE3903C01FFF48486C1380380F00
03001E010013C048EC7FE0151F48140FED07F04814031501A21500A316E01278ED01C07E
ED03806CEC07006C6C130ED807E0133C3903FC01F8C6B512E0013F1380D907FCC7FC2439
7DB72B>I<EB03FC90381FFF80017F7F9038FE07F03901F001F848486C7E4848137C000F
804848133F003F80168048C7FC16C0A248140F16E0A516F0A37E151FA26C7E001F143FA2
6C6C136F12076C6C13CF3901F0018F39007C070FEB3FFED907F813E090C7FCA3ED1FC0A3
1680D80780133F486C1400487E157E157C15FC49485AD80F805B390C0003E00007EB0FC0
2603C03FC7FC3801FFFE6C13F8EB1FC024397DB72B>I<121C123E127FEAFF80A3EA7F00
123E121CC7FCB3121C123E127FEAFF80A3EA7F00123E121C092579A418>I<007FB812FE
BAFCA3CCFCAEBAFCA36C17FE38167BA043>61 D<EB3FE03801FFFE3907C03F80390E000F
C00018EB07E048EB03F04814F8140100FC14FC7E7EA3127E123CC7EA03F8A215F0EC07E0
EC0FC0EC1F80EC3E00143C5C5C5C13015C495AA291C7FC5BA21306AA130490C8FCA8130E
131F497E497EA36D5A6DC7FC130E1E3D7BBC29>63 D<150C151EA3153FA34B7EA34B7EA3
9138019FE0A202037F150FA202077FEC0607A2020C7F1503A202187F1501A24A6C7EA34A
6D7EA202E0804A133FA20101814A131FA249C77F91B6FCA249810106C71207A2496E7EA3
496E7EA2013881013080A20170820160157FA201F082EA03F8D80FFC4A487EB500C0013F
EBFFC0A33A3D7DBC41>65 D<B712F816FF17E0C69039C0001FF06D48EB07FC707E707E82
EF7F8018C0173F18E0A718C0A2EF7F8017FF18004C5A4C5AEE0FF8EE3FE091B61280A291
3980001FE0EE03F8EE01FE707EEF7F80EF3FC018E0171F18F0170F18F8A8EF1FF0A218E0
173FEF7FC0EFFF804C13004C5A496CEB1FFCB812F017C04CC7FC353B7EBA3D>I<DBFFC0
1360020713F8023F01FE13E09139FFC01F01903A03FE000783D907F8EB01E3D90FE0EB00
77D91F80143F017FC8121F01FE150F4915071201484815031207491501120F48481500A2
123F5B1860127FA25B180012FFAB127FA26D1660A2123FA27F121F18C06C7E12076DED01
8012036C6CED03006C6C5D1706017F5DD91F805CD90FE05CD907F814E0D903FEEB03C090
3A00FFC01F8091263FFFFEC7FC020713F8020013C0333D7BBB3E>I<B712F816FF17C0C6
9039C0003FF06D48EB07FCEE01FEEE007F717E717E717E717EA2717E84170184170084A3
F07F80A419C0AC1980A4F0FF00A34D5AA2604D5AA24D5A4D5A4D5A173F4DC7FCEE01FEEE
07FC496CEB3FF0B85A94C8FC16F83A3B7EBA42>I<B91280A3C69038C000016D48EB003F
EF0FC017071703A21701A21700A418E018601630A31800A31670A216F0150391B5FCA3EC
800315001670A21630A2180CA3181893C7FCA31838A21830A21870A218F018E017011703
170F173F496CEB01FFB912C0A3363B7EBA3B>I<B812FEA3C69038C000076D481300173F
8383A283A283A418801701A21660A294C7FCA416E0A21501150791B5FCA3EC8007150115
00A21660A693C8FCAEEBFFE0B612F0A3313B7EBA38>I<DB7FC01330913807FFF8023F01
FE1370913AFFC01F80F0903A01FE0003C1D907F8EB00E1D90FE014334948141F49C8120F
017E150713FE48481503484815011207491500120F48481670A3485A1830127FA25B95C7
FC12FFAB007F037FB512C0A27F9339003FF800003FEE0FF0A26C7EA36C7E12077F12036C
7E6C7E137F6D6C141F6D7E6D6C1433D907F81473D901FEEB01E1903A00FFE00FC0023FB5
EA0070020701FC13309126007FE090C7FC3A3D7BBB44>I<B6D8C03FB512F0A3C601C0C7
383FF0006D486E5AB3A591B7FCA30280C7121FB3A7496C4A7EB6D8C03FB512F0A33C3B7E
BA41>I<B612C0A3C6EBC0006D5AB3B3AF497EB612C0A31A3B7EBA1F>I<B612F0A3C601E0
C8FCEB7F80B3AE1706A5170E170CA4171CA3173C177CA2EE01FCEE03F8160F496C137FB8
FCA32F3B7EBA36>76 D<B56C4BB5FC6E5DA2C61900D96FE0ED06FEA3D967F0150CA2D963
F81518A3D961FC1530A2D960FE1560A3027F15C0A36E6CEB0180A26E6CEB0300A36E6C13
06A36E6C5BA26E6C5BA36E6C5BA26E6C5BA3037F5BA392383F8180A2DB1FC3C7FCA3ED0F
E6A3ED07FCA26F5AA213F0486C6D5AD807FE4C7EB527F000E001B6FCA3483B7DBA4F>I<
B56C91B512F08080D8007F923807FE006EEC01F8D96FF86E5A01671660EB63FC801361EB
60FF816E7E143F816E7E140F6E7E8114036E7E816E7F157F826F7E151F6F7E8215076F7E
826F7E81EE7F8017C0163FEE1FE017F0160FEE07F817FCEE03FE1601EE00FF18E0177F17
3FA2171F170FA2170701F01503486C1501EA07FEB500F014001860A23C3B7EBA41>I<4A
B47E021F13F891387F00FED901F8EB1F80D907F0EB0FE0D90FC0EB03F049486D7E49C87E
017E157E4981000117804848ED1FC04848ED0FE0A2000F17F0491507001F17F849150300
3F17FCA3007F17FE491501A300FF17FFAB007F17FE6D1503A4003F17FC6D1507001F17F8
A26C6CED0FF0A2000717E06D151F000317C06C6CED3F806C6CED7F00017F15FE6D5D6D6C
495AD90FE0EB07F06D6C495AD901FCEB3F80D9007F01FEC7FC91381FFFF802011380383D
7BBB43>I<B712F016FF17C0C69039C0003FF06D48EB07F8707E707E707EEF7F80A218C0
173F18E0A718C0A2177F188018005F4C5A4C5AEE0FF0EE3FE091B6128004FCC7FC0280C9
FCB3A6497EB612C0A3333B7EBA3B>I<B77E16F816FEC69039C001FF80903A7F80003FE0
EE0FF0707E707E707EA2838284A795C7FC5E5F5F4C5A4C5A4C5AEE3F80DB01FEC8FC91B5
12F816E091388003F8ED007E82707E83707E83160783A683A61930A2707EA20401146049
6C6D7EB600C06D13C094383F838094380FFF00CAEA01FC3C3C7EBA3F>82
D<D90FF81360EB3FFF90B5EAC0E03901F807E13907E000F1D80F80133B90C7121F48140F
003E14071503481401A212FC1500A316607EA27E6C15007F13E0EA3FF8EBFF806C13F86C
EBFF806C14E06C14F86C806C80013F7F01071480D9007F13C0020713E0EC007FED1FF015
0F150716F81503124012C01501A37EA216F07E15036C15E0A26CEC07C0B4EC0F80D8FB80
1400D8F1F0133ED8F0FE13FC39E03FFFF8D8C00F13E001011380253D7BBB30>I<003FB8
12F8A3D9E001EB800790C7EB0001007CEE007C0078173CA20070171CA20060170CA500E0
170E481706A4C81500B3B1020313C0010FB612F0A3373B7DBA3E>I<B600C090B512F0A3
C601C0C73807FE006D48EC01F8715A1860B3B3A2013F5E80A2011F4B5AA26D6C4AC7FC01
075D6D6C14066D6C5C6D6C1438027E5C6E6C485A91391FF00FC00207B55A020149C8FC91
38001FF03C3C7EBA41>I<B5D8FC01B500FC90383FFFE0A3000790268000070180010713
00000190C76C48C7EA01FC49725A6D020116706C1A60836E7F017F618480013F4E5AA293
3801BFC06D6C4DC7FCA29338031FE06D6C1706A29338060FF06D6C5FA24C6C7E6D6C5FA2
4C6C7E6D6C5FA24C6C7E6D6C5FA204707F91277F8060005CA204E014806F48EB7F81023F
5F03C115C1DBE180EB3FC3021F94C8FC03E315E303F3C7EA1FE7020F16E619F603FEEC0F
FE02075EA24B140702035EA24B140302015EA24B140102005EA24B140003605D533C7EBA
58>87 D<EAFFF8A4EAF000B3B3B3B3A7EAFFF8A40D5777C018>91
D<EAFFF8A4EA0078B3B3B3B3A7EAFFF8A40D577FC018>93 D<EB1FF0EBFFFC3803E03F39
07000F80486D7E9038C003E0486C6C7E81A214006C487F6C5AC8FCA4140FEB03FFEB1FF8
EBFF00EA01FCEA07F0EA0FC0485A123F90C7FC5A007E150612FEA31401A2007EEB037C12
7F3A3F80063E0C3A1FC00C3F1C3A0FF0381FF83A03FFF00FF03A007FC007C027287DA62B
>97 D<EA01F812FFA312071201B1EC0FF0EC3FFEECF01F9039F9C007C09039FB0003E001
FE6D7E496D7E167C49147E163E163FA21780161FA217C0A91780A2163F1700A2167E167C
6D14FC5E01F6495A01E3495A9039E1800F809026C0F03FC7FC9038807FFCC7EA0FE02A3D
7EBB30>I<EB03FE90381FFFC090383E01F09038F800384848133C484813FC3907C001FE
120F1380121F48C712FC1578481400A2127EA212FEA9127EA2127F6C1403A26C7E15066C
7E0007140C6C6C13186C6C13306C6C13E090387E03C090381FFF00EB03FC20287DA626>
I<ED07E0EC03FFA3EC001F1507B1EB01FC90380FFF8790383F03C790387C0067D801F013
374848131F4848130F120F491307121F48C7FCA25A127EA212FEA9127EA2127F7EA27E6D
130F120F6C6C131F6C7E6C6CEB77F86C6C9038E7FFC090383E038790381FFF07D903FCEB
E0002A3D7DBB30>I<EB03FCEB1FFF90387E07C09038F801E03901E000F0000314784848
137C48487F121F90C7123F4880A25A007E1580A212FEA2B7FCA248C9FCA5127EA3127F6C
EC0180A26C7E000FEC03007F000714066C6C5B6C6C5BD80078137090383F01E090380FFF
80D901FEC7FC21287EA626>I<147F903801FFC0903807C0E090380F81F090381F03F8EB
3E07137CA29038FC03F09038F801E0000190C7FCAEB512FCA3D801F8C7FCB3AC487E387F
FFF8A31D3D7FBC1A>I<903907F001F890393FFE0FFC90397C1F1E3E9038F007F03A01E0
03E01C2603C00113080007ECF000000F80EB8000001F80A7000F5CEBC00100075C00035C
6C6C485A6D485A26037C1FC7FC38073FFE380607F090C9FC120EA3120FA2EA07C090B512
C06C14FC6C14FF6C1580000315C03A0F80003FE048C7EA07F0003EEC01F8003C1400127C
0078157C12F8A5007C15F8A26CEC01F06CEC03E06C6CEB07C0D803E0EB1F00D801FC13FE
39003FFFF00107138027397EA52B>I<EA01F812FFA312071201B1EC07F8EC1FFEEC781F
9138E00F809039F98007C0D9FB007F150301FE805BA35BB3A5486C497EB500F1B512E0A3
2B3C7EBB30>I<EA0380487E487E487EA36C5A6C5A6C5AC8FCABEA03F012FFA3120F1203
B3AB487EB512C0A3123A7EB917>I<14E0EB01F0EB03F8EB07FCA3EB03F8EB01F0EB00E0
1400ABEB01FC137FA3130313011300B3B3A3123C007E13F8B4FC130114F0A2387E03E000
3C13C0381C0F80380FFE00EA03F8164C84B91A>I<EA03F012FFA3120F1203B2913801FF
FCA39138007FC0ED7E00157C157015604A5A4A5A0206C7FC5C5C5C147814FCEBF1FEEBF7
3EEBFE3F9038F81F80EBF00F816E7E1403816E7E140081157E81A2ED1F8016C0486CEB3F
F0B500C0B5FCA3283C7DBB2D>I<EA03F012FFA3120F1203B3B3AF487EB512C0A3123C7E
BB17>I<2701F803F8EB03F800FFD91FFFEB1FFF913B3C0F803C0F80913BE007C0E007C0
3D07F9C003E1C003E02601FB00D9F3007F0301140101FE02FE80A2495CA2495CB3A5486C
496C497EB500F0B500F0B512F0A344267EA549>I<3901F807F800FFEB1FFEEC781F9138
E00F803A07F98007C02601FB007F150301FE805BA35BB3A5486C497EB500F1B512E0A32B
267EA530>I<EB01FE90380FFFC090383F03F09038F8007C48487F48487F4848EB0F8048
48EB07C0A248C7EA03E04815F0A3007EEC01F8A300FE15FCA9007E15F8A2007F14036C15
F0A26C15E06D1307000F15C06C6CEB0F806C6CEB1F006C6C133E6C6C5B90383F03F09038
0FFFC0D901FEC7FC26287EA62B>I<3901F80FF000FFEB3FFEECF01F9039F9C007C03A03
FB0003E0D801FE6D7E49806F7E49147EA2167F821780A2161F17C0A91780163FA217005E
167E5E7F4B5A6D495A01FB495A9039F9800F809026F8F03FC7FCEC7FFCEC0FE091C9FCAC
487EB512F0A32A377EA530>I<D901FC13C090380FFF0190383F03819038FC00C3D801F0
13634848133712074848131F485AA2003F140F90C7FC5AA2127E12FEA9127E127FA27EA2
6C7E151F6C7E0007143F6C6C136F6C6C13EF3900F801CF90387E070FEB1FFEEB03F890C7
FCACED1FE00203B5FCA328377DA52D>I<3903F00F8000FFEB3FE0EC70F0ECC1F83807F1
833801F303A29038F601F0EC004001FC1300A45BB3A3487EB512F8A31D267EA522>I<90
387F81803803FFE3380F807F381E001F00381307A2481303A200F01301A37EA200FE90C7
FCEA7F8013FC383FFFC06C13F06C13FC00037F6C7FD8001F13801300EC1FC00040130F00
C0EB07E014036C1301A47E15C06C13036C1480EC070000F7130E38E3C03C38C0FFF8EB3F
C01B287DA622>I<1330A61370A413F0A21201A212031207001FB5FCB6FCA2D803F0C7FC
B2EC0180A912019038F80300A21200EB7C066D5AEB1FF8EB03F019367EB421>I<D801F8
EB03F000FFEB01FFA30007EB000F00011403B3A51507A30000140FA26D131B017C14FC6D
903873FFE090381F81E390380FFF83903A01FE03F0002B277EA530>I<B538801FFFA33A
07F80007F86C48EB03E0ED01C06C7E16806D130300001500A2017E1306A2137F6D5BA2EC
801C011F1318A26D6C5AA2ECE07001071360A26D6C5AA214F901015BA26DB4C7FCA3147E
A2143CA3141828267EA42D>I<B53B87FFF80FFF80A33D0FF8003FC003FC006C486DC75A
00035F701360A26C6C5E8215376C6C4B5AED77E06D01631303017E93C7FCEDE3F0017F01
C15B6D1506020113F8DA8180130E011F150C028313FC9139C3007C1C010F151802C7137E
02E6EB3E380107EC3F3002EC131FD903FC5C17E04A130F01015DA24A130701005DA24A13
03026091C8FC39267EA43E>I<B539C03FFF80A300039039001FF000C648EB0FC093C7FC
017E130E6D130C6D6C5AECC038010F5B6D6C5A6D6C5AECF980EB01FB6DB4C8FC147E147F
80814A7EEC6FE014C7903801C3F090380381F8EC01FCEB0600010E137E497F4980013013
1F01706D7ED801F880000F4A7ED8FFFE90387FFFC0A32A257FA42D>I<B538801FFFA33A
07F80007F86C48EB03E0ED01C06C6C1480A26D130300001500A2017E1306A2017F130E6D
130CA26D6C5AA2ECC038010F1330A26D6C5AA2ECF0E001035B14F8903801F980A214FF6D
90C7FCA2147EA2143CA31418A25CA35CA25C1210EA7C0100FE5BA249C8FC5BEAFC0EEA70
1C6C5AEA1FF0EA07C028377EA42D>I<003FB512FEA290388000FC393E0001F8003C1303
003814F00030EB07E00070130FEC1FC000601480EC3F005C147E5CEA0001495A5C495A13
0F5C495A013F1303EB7F00137E5B1201491307485A12074848130649130E485A003F141E
90C7127E007EEB01FEB6FCA220257EA426>I<D801F01320D807FC1370486C13E0391FFF
83C0393C1FFF80D870071300486C5A384000F81C0879B82B>126
D E /Fj 10 115 df<007FB812E0B912F0A26C17E03404799743>0
D<121C123E127FEAFF80A3EA7F00123E121C0909799A18>I<EB03C0A2805CA50030140C
007C143E00FE147F007F14FEEBC3C3391FE187F83907F18FE03900FDBF00EB3FFCEB0FF0
EB03C0EB0FF0EB3FFCEBFDBF3907F18FE0391FE187F8397FC3C3FEEB03C000FE147F007C
143E0030140C00001400A5805CA220257BA72B>3 D<EB0FF0EB7FFE48B512804814C048
14E04814F04814F84814FCA24814FEA3B7FCA86C14FEA36C14FCA26C14F86C14F06C14E0
6C14C06C148039007FFE00EB0FF020207BA52B>15 D<007FB812FEBAFCA26C17FECCFCAD
007FB812FEBAFCA26C17FECCFCAD007FB812FEBAFCA26C17FE38267BA843>17
D<14301478A25CA313015CA2495AA2495A130F91CDFC131E5B137C5B485AEA07E0EA1FC0
007FBB1280BC12C0A26C1A80D81FC0CDFCEA07E0EA01F06C7E137C133C7F7F8013076D7E
A26D7EA2801300A31478A214304A2E7AAC56>32 D<18034E7EA2727EA3851801A2727EA2
1978197C193C858586737E737EF101F8F100FE007FBB1280BC12E0A26C1A80CDEAFE00F1
01F8F103E04F5A4F5A97C7FC191E61197C197861A24E5AA2180361A34E5AA272C8FC4B2E
7BAC56>I<14C0EB01E0A2130314C0A213071480130F1400A25B131EA2133E133CA2137C
137813F85BA212015BA212035B12075BA2120F90C7FCA25A121EA2123E123C127C1278A2
12F85AA27E1278A2127C123C123E121EA2121F7EA27F1207A27F12037F1201A27F1200A2
7F1378137C133CA2133E131EA2131F7FA21480130714C01303A214E01301A2EB00C01356
78C021>104 D<126012F0A27E1278A2127C123C123E121EA2121F7EA27F1207A27F1203
7F1201A27F1200A27F1378137C133CA2133E131EA2131F7FA21480130714C01303A214E0
1301A2130314C0A213071480130F1400A25B131EA2133E133CA2137C137813F85BA21201
5BA212035B12075BA2120F90C7FCA25A121EA2123E123C127C1278A212F85AA212601356
7BC021>I<BA12FEA26C18FCA26C18F8A2D81FE0CA123019706C6C176019E06C6C17C018
016C6C178018036C6C1700606C6C1606180E6D6C150C181C6D6C151818386D6C15301870
6D6C156018E06D6C5D17016D6C5D17036D6C92C7FC5F6D6C1406170E6E6C130C171C6E6C
1318021F5C81020F5C8102075C810203495A15FC020149C8FC15FE0200130615FF6F5A16
8CED3F9816D8ED1FF0A26F5AA26F5AA26F5AA23F3D7CBA48>114
D E /Fk 39 122 df<1406140E141C1438147014E0EB01C01303EB078014005B131E131C
133C5BA25BA212015B12035B1207A25B120FA348C7FCA35AA2123EA2127EA5127CA212FC
B3127CA2127EA5123EA2123FA27EA36C7EA312077FA212037F12017F1200A21378A27F13
1C131E7F7F1480EB03C01301EB00E014701438141C140E1406176776CC28>40
D<124012E012707E7E7E7E7F6C7E12017F6C7E137013787FA27FA2131F7F1480130714C0
A2130314E0A3EB01F0A314F8A21300A214FCA5147CA2147EB3147CA214FCA514F8A21301
A214F0A3EB03E0A314C01307A21480130F14005B131EA25BA25B137013F0485A5B120348
5A90C7FC120E5A5A5A5A124017677ACC28>I<EC7FC0903803FFF890380FC07E90393F00
1F80017E6D7E496D7E48486D7E48486D7EA248486D7E000F8149147E001F157FA3003F16
80A249143F007F16C0A600FF16E0B3A3007F16C0A66C6CEC7F80A3001F1600A36C6C14FE
A200075D6C6C495AA26C6C495A6C6C495A017E495A6D495A90260FC07EC7FC903803FFF8
9038007FC02B457CC334>48 D<121C121EEA1FC090B712F0A34816E017C01780A2170000
3CC8120E5A5E00705D5EA25E484A5AA24B5AC848C7FC150EA25D5DA25D5DA24A5A14035D
1407A24AC8FCA25C141E143EA2147E147C14FCA31301A313035CA31307A6130FA96D5AA2
EB01C02C477AC534>55 D<1678A316FCA34B7EA24B7EA34B7FA34B7FED0E7FA2031E7FED
1C3FA2033C7FED381FA203707F160FA203E07F1607A24A486C7EA34A486C7EA34AC77FA2
4A81020E147FA2021E81021C143FA2023C810238141FA2027881027FB6FCA291B77E02E0
C71207A20101824A1403A249488183A249C97FA3010E707EA349707E131E133E017F8348
486C82000701E0EDFFFCB500FC023FEBFFFCA346497DC84D>65 D<DB03FF140C033F01F0
131C4AB512FC0207D9007F133CDA1FF090380F807CDA7FC0903803C0FC4AC812F0D903FC
15794948153F4948151F4948150F494815074948150313FF4890C912015B00031700485A
197C120F5B001F183CA2485AA2191C127FA25B190012FFAD127FA26D171CA2123FA36C7E
1938120F7F120719706C7E000118E07F6C6DED01C0137F6D6CED03806D6CED07006D6C15
0E6D6C5D6D6C5DD900FF5DDA7FC0495ADA1FF0EB07C0DA07FF017FC7FC0201EBFFFEDA00
3F13F0030313803E497AC74B>67 D<B812E017FE717E26007FF8C713E06D48EC1FF8011F
ED07FCEF01FF717F727EF01FE085727E1807727E85180185721380A21AC0197FA21AE0A2
193F1AF0A51AF8AC1AF0A5F17FE0A31AC0A2F1FF80A24E1300A26118034E5A614E5A4E5A
4E5A4E5A4D48C7FCEF07FE013FED1FF8496CECFFE0B912804DC8FC17E045477DC64F>I<
BA1280A3C601F0C7120F6D48020013C0013F163F181F180F18071803A2180119E0A21800
A51970A217E0A21900A41601A316031607163F91B6FCA39138E0003F160716031601A316
00A3190EA394C7121CA5193CA21938A21978A219F8A2F001F01803A2180F181F017F167F
496CEC07FFBA12E0A33F477DC646>I<DB03FF140C033F01F0131C4AB512FC0207D9007F
133CDA1FF090380F807CDA7FC0903803C0FC4AC812F0D903FC15794948153F4948151F49
48150F494815074948150313FF4890C912015B00031700485A197C120F5B001F183CA248
5AA2191C127FA25B96C7FC12FFAD007F93B612F8A27F9439003FFE00003FEF0FFC1807A2
6C7EA2120F7F1207A26C7E12017F6C7F137F6D7E6D7E6D6C150F6D7ED903FE151DD900FF
1538DA7FC014F0DA1FF8903803E07CDA07FF90383FC03C020190B5EA001CDA003F01F813
0C030301C090C7FC45497AC751>71 D<B612FEA339007FFC006D5A6D5AB3B3B3A7497E49
7EB612FEA31F477DC625>73 D<B77EA3C66C48CAFCEB3FF86D5AB3B3A4F00380A4F00700
A560A360181E183EA2187E18FE17011703170F013F153F496C49B45AB9FCA339477DC641
>76 D<B500F8051FB5FCA3C66C6C94383FFE00013F61D91DFEEF77F8A3D91CFF17E7A26E
6CED01C7A36E6CED0387A26E6CED0707A36E6C150EA36E6C151CA26E6C1538A36E6C1570
A26E6C15E0A36F6CEB01C0A36F6CEB0380A26F6CEB0700A36F6C130EA26F6C5BA36F6C5B
A26F6C5BA36F6C5BA393387F81C0A293383FC380A3DC1FE7C7FCA2EE0FFEA3705AA2133E
017F6E5A496C4D7E000301E06D484A7EB60080033FB6FCA2705A58477DC65F>I<B500F0
0207B512FC80A226003FFCDA001F13006D6CED07FC725AD91DFF6F5A6F6E5A131C6E7E81
143F81141F6E7E8114076E7E81806E7F82157F6F7E82151F6F7E8215076F7E82816F7F83
167F83163F707E83160F707E831603707E188082EF7FC018E0173FEF1FF018F8170FEF07
FC18FE1703EF01FFA283A2187F183FA2181F180F133E017F1607496C1503000313E0B66C
14011800A246477DC64D>I<ED0FFE92B512E0913907F803FC91391FC0007F027FC7EA1F
C002FE6E7ED903FCEC07F8D907F0EC01FC49486E7E011F8249486F7E49486F7E49C96C7E
A24848707E0003844916070007844848707EA2001F84A24982003F1980A3007F19C04982
A300FF19E0AD007F19C06D5EA4003F1980A26D5E001F1900A26C6C4C5AA20007606D160F
0003606C6C4C5AA26C6D4B5A6D6C4B5A013F5F6D6C4BC7FC6D6C4A5A6D6C4A5A6D6C4A5A
D900FEEC0FE0DA7F80EB3FC0DA1FE001FFC8FC913907FC07FC0200B512E0DB0FFEC9FC43
497AC750>I<B812C017FC17FFC69026F0000113C06D489038003FF0013FED0FF8717E71
7E717E19808319C019E0187FA219F0A819E0A2F0FFC0A219805F19004D5A4D5AEF0FF0EF
3FE0933803FF8091B648C7FC17F002E0CAFCB3AB497E497EB612F8A33C477DC646>I<49
B414C0010FEBF001013F13FC90397E00FF03D801F8EB0F87D803E0EB03C74848EB01EF48
48EB00FF90C8127F48153F003E151F160F5A1607A212FC1603A46C1501A27EA26C6C91C7
FC7F7FEA3FF813FF6C13F06C13FF15F06C14FE6C6E7E6C15E06C6C806D80010F80010080
020F7F02011480EC001F030313C01500EE3FE0161FA2EE0FF0A20060150712E0A21603A3
7EA217E0A27EEE07C07E6C1680160F6CED1F0001C0141ED8FDE05CD8F8F85C017E495A3A
F01FE00FE0D8E007B55A010191C7FC39C0001FF82C497AC739>83
D<B600FE0107B512FCA326007FFCC8001F13006D48ED07FC6D486F5A725A725AB3B3A901
0F5F18018013074E5AA26D6C4BC7FCA20101160E6D7E027F5D6E5D6E6C5C6E6C5CDA07F0
EB03C0DA03FCEB0F80DA00FF017FC8FC92383FFFFC030F13F00301138046487DC64D>85
D<B600E0021FB5FCA3000101FCC8000313F026007FF0030013804AEE7F00013F173E193C
6D6C1638A280010F5FA26E16F001075FA26D6C4B5AA2806D4C5AA26F14076D94C7FCA26E
6C140EA281023F5DA26F143C021F1538A26E6C5CA26F14F002075DA26F130102035DA26E
6C495AA2EE80076E92C8FCA2705A037F130EA26F6C5AA2EEF03C031F1338A2EEF878030F
137016FC03075BA216FF6F5BA36F5BA26F90C9FCA3167EA3163CA248487EC64D>I<EB03
FE90383FFFC09038FC03F03901E000FCD80380137E48C77E486C6D7E01E080001F140F6D
80A26F7E6C5AA2EA0380C8FCA4EC01FF147F903803FF8790381FF007EB7F803801FE00EA
03F8485A485A485A123F5B007F161CA248C7FCA3150FA36C6C131B15336C6C903831F838
001F14613B0FF001C0FC703B03FC0780FFE03B00FFFE003FC0D90FF8EB1F802E2F7CAD34
>97 D<EC3FE0903801FFFE903907E01F8090391F8003C0013EC712E001FC1470484814F8
000314034914FC00071407485A121F49EB03F8123FED00E01600127F5BA212FFAA127FA2
7F123F160E121F7F000F151C7F000715386C7E000115706C6C14E0017EEB01C090391F80
078090390FE03E00903801FFFC9038003FE0272F7DAD2E>99 D<EE1FC0ED1FFFA3ED007F
163F161FB3A3EC1FE0903801FFFC903807F01E90391F80079F90393F0001DF017CEB00FF
4848147F0003153F5B4848141F120F121F5B123FA2127F5BA212FFAA127FA36C7EA2121F
A26C7E163F6C7E0003157F6C6C14FF6C6C903801DFE0017E9038039FF0903B1F800F1FFF
C090380FE03E903801FFF89026003FC0EBC00032497DC739>I<EC7F80903803FFF09038
0FC0FC90383F003F017CEB1F8049EB0FC00001EC07E0485A4848EB03F0000F15F8A24848
EB01FCA2123FA2484814FE1500A212FFA290B6FCA20180C8FCA6127FA37F123F160E121F
7F000F151C12076D1438000315706C7E6C6C14E0013EEB03C090391F800700903807E03E
903801FFF89038003FC0272F7DAD2E>I<EC07F0EC3FFCEC7C0E903801F81F903903F03F
80903907E07FC0EB0FC0A2EB1F80013FEB3F80ED1F00EC000E4990C7FCB1B612E0A3C66C
C8FCB3B28048487E007FEBFFC0A322497DC820>I<49B4EB03F0010F9038E01FFC903A1F
83F07C3E903A7E00FDE07E01F8EB3F800001ED003C484890381F80180007EDC000A24848
6D7EA2001F81A7000F5DA26C6C495AA200035D6C6C49C7FC0000143ED801FE13FC90389F
83F039030FFFE0010190C8FC48CAFCA67F7F7F6CB512FEEDFFE06C15F86C15FE6D8048B7
12802703E0000113C0D80F809038003FE048C8120F003EED03F0003C1501007C16F80078
150012F8A5007CED01F0A26CED03E0001E16C06CED0780D807C0EC1F006C6C143ED800FC
EB01F890393F800FE0010FB51280010001F8C7FC2F437DAC34>I<13FE12FFA312031201
1200B3A3ED7F80913803FFF091380781F891380C007C4A137E4A7F4A804A131F6D5A8391
C7FCA35BB3AA2603FF80EB7FF0B5D8FE1FB512C0A332487CC739>I<EA01F0487E487E48
7EA56C5A6C5A6C5AC8FCAE13FE127FA3120312011200B3B1EA03FFB512FCA316467DC51C
>I<13FE12FFA3120312011200B3B3B3A83803FF80B512FEA317487DC71C>108
D<D801FCD97FC0EB07FC00FF902601FFF890381FFF8091260780FC9038780FC091260E00
3E9038E003E00003011890263F01807F000149903A1F830001F800004902C6804A14CCD9
FD80D90FD8130005F88001FFC75BA3495DB3AA2603FF80D93FF8903803FF80B5D8FE0FB5
00E0B512FEA34F2D7CAC56>I<D801FCEB7F8000FF903803FFF091380781F891380C007C
000349137E0001497F000049804A131FEBFD808301FFC7FCA35BB3AA2603FF80EB7FF0B5
D8FE1FB512C0A3322D7CAC39>I<EC3FE0903801FFFC903807E03F90391F800FC090397E
0003F0496D7E48486D7E4848147E0007157F4980000F16804848EC1FC0A2003F16E0A249
140F007F16F0A300FF16F8AA007F16F0A36C6CEC1FE0A3001F16C06C6CEC3F80A26C6CEC
7F000003157E6C6C5C6C6C495A017E495A90391F800FC090390FE03F80902603FFFEC7FC
9038003FE02D2F7DAD34>I<01FE13FF00FF010713E091381F01FC913838007E0003496D
7E000101C06D7E6C6C486D7E707E91C77F496E7E160183A2707EA21880A2177F18C0AA18
8017FFA21800A24C5AA24C5A5F6D4A5A804C5A6EEB1F80496C49C7FC027813FE91381E03
F891380FFFE0DA01FEC8FC91CAFCAF3803FF80B512FEA332417DAC39>I<3901FC01FC00
FFEB07FF91380E0F809138181FC000039038303FE000011360000013C0A29039FD801FC0
ED0F80ED070001FFC8FCA45BB3A77F00037FB67EA3232D7EAC28>114
D<90381FF80690B5120E3903F0079E39078001FE000EC7127E5A003C143E48141EA212F8
150EA27EA27E7ED87FC090C7FC13FC383FFFE06C13FE6C6D7E6C14E06C80C614FC011F7F
13019038000FFF02011380EC007F0060EC1FC012E0150F7E1507A37E16807EED0F007E6C
141E6D5BD8F9E05B39F0F803E039E03FFFC026C007FCC7FC222F7DAD29>I<130EA7131E
A4133EA3137EA213FE120112031207001FB512FCB6FCA2C648C7FCB3A4150EAB017E131C
137F7F151890381F803890380FC070903807E0E0903801FFC09038007F001F417EBF28>
I<01FEEC1FC000FFEC1FFFA30003EC007F0001153F0000151FB3A9163FA3167F137EA26D
14DF9238019FE06D9038031FF090260F8006EBFFC0903807F01C903801FFF89026003FE0
EBC000322E7CAC39>I<B500F890387FFFC0A30007018090380FFE00D801FEC7EA07F800
00ED03E05F7F6D5DA26D6C49C7FCA26E5B011F140EA26D6C5BA26E133C01071438A26D6C
5BA26E13F001015CA26D6C485AA2ECFF03027F5BA2DA3F87C8FCA215CFEC1FCEA2EC0FFC
A36E5AA26E5AA36E5AA2322D7EAB37>I<B53CF03FFFF807FFFCA30007D90001D9800013
E06C486D90C7EA7F806C48027EEC3F00191E6C6C147F191CA2017F4A6C5BA36D6C486D5B
16CF19F090261FC0036D5B1687180190280FE00703F05BA202F01503010790260E01F85B
A202F81507010390261C00FC90C7FCA202FC5D010149EB7E0EA2902600FE78EB7F1C0370
133FA2DA7FF014B84B131FA2023F15F04B130FA2021F5D4B1307A2020F5D92C71203A246
2D7EAB4B>I<267FFFF890B512C0A3000101E090387FFC006C6C48EB3FE0013FEC1F8001
1F92C7FC6E131E6D6C5B01075C6D6C5B6E5B903801FE010100495A91387F0780DA3F8FC8
FC15CEEC1FDEEC0FFC6E5AA26E7E14014A7E4A7E4A6C7EEC0E3F91381E1FC04A6C7E0278
7F4A6C7EECE00301016D7ED903C07F49486C7E49C77E707E496E7E017F81484881000F6D
EB7FFCB5D8E001B512F0A3342C7FAB37>I<B500F890387FFFC0A30003018090381FFE00
6C48C7EA07F80000ED03E05F7F6D5D6E1307013F92C7FCA26D6C130EA26E131E010F141C
A26D6C5BA26E137801031470A26D6C5BA2ECFE0101005CA291387F0380A21587023F90C8
FC15CFEC1FCEA215FE6E5AA26E5AA26E5AA36E5AA25DA214035DA24AC9FCA25C140E003C
131E007E131CB4FC5C14781470485B387C01C038380380D81E0FCAFCEA0FFEEA03F83241
7EAB37>I E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 5 1
5 4 bop 25 160 a Fk(P)m(erceptron)p 0 321 1947 2 v 73
478 a
 28417720 8809493 3552215 37824512 34469642 47428648 startTexFig
 73 478 a
%%BeginDocument: ./bookps/ann-perceptron.epsf
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def


initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.489 setcmykcolor end} {0.510 0.510 0.510 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 72.000 72.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 117.000 189.000 0.000 0.000 54.000 54.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 117.000 351.000 0.000 0.000 54.000 54.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
351.000 144.000 moveto
/Triangular 9.399 8.224 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 349.857 144.000 243.000 144.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
498.000 144.000 moveto
/Triangular 9.399 8.224 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 496.857 144.000 405.000 144.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.489 setcmykcolor end} {0.510 0.510 0.510 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 99.000 72.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.489 setcmykcolor end} {0.510 0.510 0.510 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 198.000 72.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginText
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 75.000 99.000 0.000 0.000 16.333 13.666 rect
%@EndRect
gsave
105.833 83.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(w) -6.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) 2.166 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 99.000 99.000 0.000 0.000 16.333 13.666 rect
%@EndRect
gsave
105.833 107.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(w) -6.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) 2.166 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 177.000 96.000 0.000 0.000 16.333 13.666 rect
%@EndRect
gsave
102.833 185.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(w) -6.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(n) 2.166 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 93.000 179.000 0.000 0.000 16.333 13.666 rect
%@EndRect
gsave
185.833 101.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(w) -6.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(0) 2.166 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 72.000 54.000 0.000 0.000 16.333 11.000 rect
%@EndRect
gsave
59.500 80.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) 0.500 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 99.000 54.000 0.000 0.000 16.333 11.000 rect
%@EndRect
gsave
59.500 107.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) 0.500 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 198.000 54.000 0.000 0.000 16.333 11.000 rect
%@EndRect
gsave
59.500 206.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(n) 0.500 5.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 189.000 144.000 90.000 81.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 189.000 144.000 90.000 108.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 189.000 144.000 90.000 207.000 Line
%@EndLine
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 75.000 164.000 0.000 0.000 16.333 23.767 rect
%@EndRect
gsave
175.883 83.166 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -11.500 2.000 S
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(0) -5.500 5.000 S
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(=) -0.500 2.000 S
(1) 6.267 2.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 126.000 81.000 0.000 0.000 58.000 9.000 rect
%@EndRect
gsave
85.500 155.000 T translate
0.0 rotate
1 1 scale
18.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(.) -4.500 -14.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(.) -4.500 5.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(.) -4.500 24.000 S
grestore
%@EndText
%@BeginText
restore
save
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 130.000 206.000 0.000 0.000 38.000 21.304 rect
%@EndRect
gsave
216.652 149.000 T translate
0.0 rotate
1 1 scale
36.000 (Symbol) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(S) -10.500 7.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 189.000 144.000 171.000 90.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/backfill {/setcmykcolor where
{begin gsave 0 0 0 0 setcmykcolor fill grestore end}
{gsave 1 1 1 setrgbcolor fill grestore}
 ifelse} def
/fillpat <555555AAAAAA555555AAAAAA555555AAAAAA555555AAAAAA> def
/iSizeX 24 def
/iSizeY 24 def
/PF { /pat fillpat def DefaultPatternFont backfill 65 PatternFill } def
1.000 0 135.000 499.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 378.000 153.000 360.000 153.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 378.000 135.000 378.000 153.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 396.000 135.000 378.000 135.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 396.000 144.000 360.000 144.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 378.000 162.000 378.000 126.000 Line
%@EndLine
%
%tfEndGrp
%
%
%tfBegGrp
%
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 155.500 258.000 0.000 0.000 22.666 42.541 rect
%@EndRect
gsave
279.270 166.833 T translate
0.0 rotate
1 1 scale
18.000 (Symbol) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(S) -20.500 3.000 S
%@BeginText
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 155.500 258.000 0.000 0.000 22.666 42.541 rect
%@EndRect
gsave
279.270 166.833 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -9.847 3.000 S
(w) -6.347 3.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 3.762 8.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) 7.652 3.000 S
(x) 11.152 3.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 18.152 8.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 146.000 261.000 0.000 0.000 12.000 5.000 rect
%@EndRect
gsave
263.500 152.000 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(n) -2.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 171.000 257.000 0.000 0.000 12.000 13.417 rect
%@EndRect
gsave
263.708 177.000 T translate
0.0 rotate
1 1 scale
10.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -6.500 3.000 S
(=) -3.721 3.000 S
(0) 1.917 3.000 S
grestore
%@EndText
%
%tfEndGrp
%
%
%tfBegGrp
%
%
%tfBegGrp
%
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 157.000 449.000 0.000 0.000 14.000 6.000 rect
%@EndRect
gsave
452.000 164.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) -2.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 175.000 445.003 0.000 0.000 14.000 9.996 rect
%@EndRect
gsave
450.001 182.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(-) -4.496 3.000 S
(1) -0.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 157.000 458.000 0.000 0.000 14.000 65.097 rect
%@EndRect
gsave
490.548 164.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -32.500 3.000 S
(f) -29.166 3.000 S
( ) -25.169 3.000 S
( ) -22.169 3.000 S
( ) -19.169 3.000 S
( ) -16.169 3.000 S
( ) -13.169 3.000 S
( ) -10.169 3.000 S
( ) -7.169 3.000 S
( ) -4.169 3.000 S
( ) -1.169 3.000 S
( ) 1.830 3.000 S
( ) 4.830 3.000 S
( ) 7.830 3.000 S
( ) 10.830 3.000 S
( ) 13.830 3.000 S
(>) 16.830 3.000 S
( ) 23.597 3.000 S
(0) 26.597 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 175.000 458.000 0.000 0.000 14.000 46.652 rect
%@EndRect
gsave
481.326 182.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(o) -22.500 3.000 S
(t) -16.500 3.000 S
(h) -13.166 3.000 S
(e) -7.166 3.000 S
(r) -1.839 3.000 S
(w) 2.156 3.000 S
(i) 10.822 3.000 S
(s) 14.156 3.000 S
(e) 18.826 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 153.000 429.000 0.000 0.000 38.000 17.279 rect
%@EndRect
gsave
437.639 172.000 T translate
0.0 rotate
1 1 scale
36.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

({) -8.500 9.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 164.000 409.000 0.000 0.000 16.000 18.395 rect
%@EndRect
gsave
418.197 172.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(o) -8.500 4.000 S
( ) -1.500 4.000 S
(=) 2.000 4.000 S
grestore
%@EndText
%
%tfEndGrp
%
%
%tfBegGrp
%
%@BeginText
restore
save
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 156.600 469.300 0.000 0.000 18.666 34.033 rect
%@EndRect
gsave
486.316 165.933 T translate
0.0 rotate
1 1 scale
14.000 (Symbol) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(S) -16.199 2.000 S
grestore
restore
save
gsave
486.316 165.933 T translate
0.0 rotate
1 1 scale
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

11.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) -7.619 2.000 S
(w) -4.869 2.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 3.074 6.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

( ) 6.130 2.000 S
(x) 8.880 2.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) 14.380 6.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 149.000 471.700 0.000 0.000 10.000 4.000 rect
%@EndRect
gsave
473.700 154.000 T translate
0.0 rotate
1 1 scale
8.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(n) -1.799 2.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 167.000 468.500 0.000 0.000 10.000 10.734 rect
%@EndRect
gsave
473.867 172.000 T translate
0.0 rotate
1 1 scale
8.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(i) -5.000 2.000 S
(=) -2.777 2.000 S
(0) 1.734 2.000 S
grestore
%@EndText
%
%tfEndGrp
%
%
%tfEndGrp
%
restore
end
%%EndDocument

 endTexFig
 10 1216 a Fh(o)p Fi(\()p Fh(x)134 1229 y Fg(1)167 1216
y Fh(;)14 b(:)g(:)h(:)f(;)g(x)407 1229 y Fe(n)445 1216
y Fi(\))25 b(=)594 1095 y Fd(8)594 1132 y(>)594 1144
y(>)594 1157 y(<)594 1232 y(>)594 1244 y(>)594 1256 y(:)718
1163 y Fi(1)42 b(if)30 b Fh(w)944 1176 y Fg(0)994 1163
y Fi(+)19 b Fh(w)1142 1176 y Fg(1)1174 1163 y Fh(x)1223
1176 y Fg(1)1274 1163 y Fi(+)g Fj(\001)c(\001)f(\001)19
b Fi(+)g Fh(w)1628 1176 y Fe(n)1666 1163 y Fh(x)1715
1176 y Fe(n)1777 1163 y Fh(>)24 b Fi(0)651 1267 y Fj(\000)p
Fi(1)42 b(otherwise.)0 1532 y(Sometimes)28 b(w)n(e'll)i(use)f(simpler)g
(v)n(ector)h(notation:)514 1728 y Fh(o)p Fi(\()o Fh(~)-42
b(x)p Fi(\))24 b(=)786 1607 y Fd(8)786 1644 y(>)786 1656
y(>)786 1669 y(<)786 1744 y(>)786 1756 y(>)786 1768 y(:)911
1675 y Fi(1)41 b(if)g Fh(~)-54 b(w)21 b Fj(\001)d Fh(~)-41
b(x)24 b(>)f Fi(0)844 1779 y Fj(\000)p Fi(1)41 b(otherwise.)952
2748 y(5)p eop
%%Page: 6 2
6 5 bop 25 160 a Fk(Decision)35 b(Surface)g(of)e(a)h(P)m(erceptron)p
0 321 1947 2 v 0 478 a
 28417720 11651265 2302361 38745456 24865505 48020684 startTexFig
 0 478 a
%%BeginDocument: ./bookps/ann-linearly-separable.epsf
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%@BeginText
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 135.000 0.000 0.000 18.000 13.760 rect
%@EndRect
gsave
141.880 144.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.640 1.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) -0.314 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 62.000 78.000 0.000 0.000 18.000 13.760 rect
%@EndRect
gsave
84.880 71.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.640 1.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -0.314 5.000 S
grestore
%@EndText
%@BeginText
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 81.000 99.000 0.000 0.000 14.000 6.767 rect
%@EndRect
gsave
102.383 88.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) -2.500 3.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
96.659 63.000 moveto
/Triangular 9.399 8.224 false 90.006 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 96.659 180.000 96.659 64.142 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
153.000 135.000 moveto
/Triangular 9.399 8.224 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 151.857 135.000 36.000 135.000 Line
%@EndLine
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 90.000 63.000 0.000 0.000 14.000 6.767 rect
%@EndRect
gsave
66.383 97.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) -2.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 153.000 117.000 0.000 0.000 14.000 3.996 rect
%@EndRect
gsave
118.998 160.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(-) -1.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 162.000 90.000 0.000 0.000 14.000 3.996 rect
%@EndRect
gsave
91.998 169.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(-) -1.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 117.000 72.000 0.000 0.000 14.000 6.767 rect
%@EndRect
gsave
75.383 124.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) -2.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 99.000 117.000 0.000 0.000 14.000 3.996 rect
%@EndRect
gsave
118.998 106.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(-) -1.500 3.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
2.000 63.000 180.000 126.000 72.000 Line
%@EndLine
%@BeginText
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Italic /Times-Italic EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 135.000 360.000 0.000 0.000 18.000 13.760 rect
%@EndRect
gsave
366.880 144.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.640 1.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(1) -0.314 5.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 62.000 303.000 0.000 0.000 18.000 13.760 rect
%@EndRect
gsave
309.880 71.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Italic) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(x) -5.640 1.000 S
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(2) -0.314 5.000 S
grestore
%@EndText
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
321.996 63.000 moveto
/Triangular 9.399 8.224 false 90.006 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 321.996 180.000 321.996 64.142 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ 
1.000 setlinewidth
378.000 135.000 moveto
/Triangular 9.399 8.224 false 180.012 DrawArrowHead
} bind def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 376.857 135.000 261.000 135.000 Line
%@EndLine
%@BeginText
restore
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 90.000 0.000 0.000 14.000 13.318 rect
%@EndRect
gsave
96.659 196.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -6.500 3.000 S
(a) -2.503 3.000 S
(\)) 2.822 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 189.000 315.000 0.000 0.000 14.000 13.992 rect
%@EndRect
gsave
321.996 196.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(\() -6.500 3.000 S
(b) -2.503 3.000 S
(\)) 3.496 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 155.000 293.000 0.000 0.000 14.000 3.996 rect
%@EndRect
gsave
294.998 162.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(-) -1.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 102.000 293.000 0.000 0.000 14.000 7.767 rect
%@EndRect
gsave
296.883 109.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) -3.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 101.000 348.000 0.000 0.000 14.000 3.996 rect
%@EndRect
gsave
349.998 108.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(-) -1.500 3.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 156.000 346.000 0.000 0.000 14.000 6.767 rect
%@EndRect
gsave
349.383 163.000 T translate
0.0 rotate
1 1 scale
12.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(+) -2.500 3.000 S
grestore
%@EndText
restore
end
%%EndDocument

 endTexFig
 0 1410 a Fi(Represen)n(ts)29 b(some)f(useful)i(functions)40
1555 y Fj(\017)21 b Fi(What)29 b(w)n(eigh)n(ts)h(represen)n(t)104
1659 y Fh(g)s Fi(\()p Fh(x)230 1672 y Fg(1)263 1659 y
Fh(;)14 b(x)350 1672 y Fg(2)382 1659 y Fi(\))24 b(=)g
Fh(AN)9 b(D)r Fi(\()p Fh(x)828 1672 y Fg(1)862 1659 y
Fh(;)14 b(x)949 1672 y Fg(2)981 1659 y Fi(\)?)0 1854
y(But)29 b(some)f(functions)i(not)f(represen)n(table)40
2000 y Fj(\017)21 b Fi(e.g.,)29 b(not)g(linearly)i(separable)40
2145 y Fj(\017)21 b Fi(Therefore,)29 b(w)n(e'll)h(w)n(an)n(t)f(net)n(w)
n(orks)g(of)g(these...)952 2748 y(6)p eop
%%Page: 7 3
7 6 bop 25 160 a Fk(P)m(erceptron)36 b(training)g(rule)p
0 321 1947 2 v 692 628 a Fh(w)754 641 y Fe(i)800 628
y Fj( )24 b Fh(w)972 641 y Fe(i)1013 628 y Fi(+)19 b(\001)p
Fh(w)1233 641 y Fe(i)0 781 y Fi(where)657 885 y(\001)p
Fh(w)791 898 y Fe(i)837 885 y Fi(=)k Fh(\021)s Fi(\()p
Fh(t)d Fj(\000)f Fh(o)p Fi(\))p Fh(x)1267 898 y Fe(i)1837
885 y Fi(\(1\))0 1016 y(Where:)40 1161 y Fj(\017)i Fh(t)j
Fi(=)g Fh(c)p Fi(\()o Fh(~)-42 b(x)q Fi(\))29 b(is)g(target)h(v)-5
b(alue)40 1307 y Fj(\017)21 b Fh(o)28 b Fi(is)i(p)r(erceptron)f(output)
40 1452 y Fj(\017)21 b Fh(\021)31 b Fi(is)f(small)f(constan)n(t)g
(\(e.g.,)h(.1\))f(called)i Fc(le)l(arning)g(r)l(ate)0
1687 y Fi(Mak)n(e)e(sense?)40 1832 y Fj(\017)21 b Fi(What)29
b(if)h(output)f Fh(o)g Fi(is)g(to)r(o)h(big?)125 1978
y Fb({)21 b Fi(and)29 b Fh(x)412 1991 y Fe(i)463 1978
y Fi(p)r(ositiv)n(e,)j(negativ)n(e?)952 2748 y(7)p eop
%%Page: 8 4
8 7 bop 25 160 a Fk(P)m(erceptron)36 b(training)g(rule)p
0 321 1947 2 v 0 538 a Fi(Can)29 b(pro)n(v)n(e)f(it)i(will)i(con)n(v)n
(erge)40 683 y Fj(\017)21 b Fi(If)29 b(training)h(data)f(is)h(linearly)
i(separable)40 829 y Fj(\017)21 b Fi(and)28 b Fh(\021)k
Fi(su\016cien)n(tly)f(small)952 2748 y(8)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
