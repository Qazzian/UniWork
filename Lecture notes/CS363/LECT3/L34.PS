%!PS-Adobe-2.0
%%Creator: dvipsk 5.58f Copyright 1986, 1994 Radical Eye Software
%%Title: l12.dvi
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%EndComments
%DVIPSCommandLine: dvips -o l12.ps l12
%DVIPSParameters: dpi=300, compressed, comments removed
%DVIPSSource:  TeX output 1996.10.03:1525
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR matrix currentmatrix dup dup 4 get round 4 exch put dup dup 5 get
round 5 exch put setmatrix}N /@landscape{/isls true N}B /@manualfeed{
statusdict /manualfeed true put}B /@copies{/#copies X}B /FMat[1 0 0 -1 0
0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{/nn 8 dict N nn
begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N string /base X
array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N end dup{/foo
setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{/sf 1 N /fntrx
FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]N df-tail}B /E{
pop nn dup definefont setfont}B /ch-width{ch-data dup length 5 sub get}
B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{128 ch-data dup
length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub get 127 sub}B
/ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data dup type
/stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N /rc 0 N /gp
0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup /base get 2
index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx 0 ch-xoff
ch-yoff ch-height sub ch-xoff ch-width add ch-yoff setcachedevice
ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff .1 add]/id
ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N /cp 0 N{
rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id gp get
/gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp add /cp
X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add /gp X
adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{dup
255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1 adv}
B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2 idiv
S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore showpage
userdict /eop-hook known{eop-hook}if}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 -.1 TR 1 1 scale rulex ruley
false RMat{BDot}imagemask grestore}}{{gsave TR -.1 -.1 TR rulex ruley
scale 1 1 false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave
transform round exch round exch itransform moveto rulex 0 rlineto 0
ruley neg rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta
0 N /tail{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}
B /c{-4 M}B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{
3 M}B /k{4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p
-1 w}B /q{p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{
3 2 roll p a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale false def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 40258431 52099146 1000 300 300 (l12.dvi)
@start /Fa 1 124 df<B9FCA33003809831>123 D E /Fb 12 120
df<147CEB03FF90380F838690381F01CF90383C00FF5B01F87F485A4848137E12074913
3E120F001F5C5B123FA290C75A5AA300FE495AA448495A1670A3913807C0E0140F127C14
1F91383FC1C0003C1377003E01E31380391E01C3C33A0F0781C7003903FE00FED800F813
7C242777A52C>97 D<EC3F80903801FFE0903807E07090381F803890383E001C5B5B485A
1203485A485A1538001F14784913F0003FEB03E0EC3F80397FFFFE0014E090C8FCA2127E
12FEA5127EA21504150E151C003E143C15786C14E06CEB03C03907800F803903C07E0038
01FFF838007F801F2777A528>101 D<EC07E0EC1FF891387C1C309138F80E78903901E0
07F8903803C0031307EB0F80D91F0013F0491301137EA201FEEB03E05B1201A24848EB07
C0A44848EB0F80A4ED1F005BA25D153E0003147E15FEA26C6C485A0000EB037CEB780EEB
3C3C90381FF8F8EB07E090C7FCA24A5AA44A5AA2001C5C007E13074A5A00FE91C7FC141E
485B007813F8387C03F0381FFFC0D807FEC8FC25387CA528>103
D<14E0EB01F0EB03F8EB07F0A2EB03E0EB01C090C7FCAC13F8487EEA030EEA060F120C00
1C1380121812381400485AA3EAE03EA2C65AA35BA3485AA3485AA23807C070A3380F80E0
A3EB01C0A2EB038014005BEA070EEA03FCEA01F0153A79B81A>105
D<EB03E0EBFFF0485B7E1307A25CA4495AA449C8FCA4133EA449EB07C0ED1FE0ED7870ED
E0F89038F80181EC03031406020C13F03801F01891383001C04AC7FC5CEA03E1EBE38001
E6C8FC13FC485AEBFF80EBDFE0EBC1F0380F80F8143C143E80EA1F0016E0A3003E90383E
01C0A3ED03805A141EED0700EC0E06486D5AEC03F800706D5A253D7ABB28>107
D<D803E001FEEB03F83C07F003FF800FFE3C0E380F83C03E0F3D1C3C1C01E0700780903C
1E3800F0E003C0003849EBF1C04AEBF380D93FC0D9FF0013E00070495BA291C75A013E5C
D8E07E0101EC07C0A2D8007C5CA2494948EB0F80A3F01F004848495AA2183EA24848495A
F07C07A3484849C7EAF80EA3F0F01C4848133E19181938197048C748EC70E0F03FC0000E
0238EC1F00402779A546>109 D<D803E013FE3A07F003FF803A0E380F83C03A1C3C1C01
E06D486C7E00385B5CD93FC07F00705BA291C7FC133ED8E07E495AA2EA007CA249495AA3
4B5A485AA24B5AA2485A92381F01C0A3484890383E0380A392383C0700485A16065E161C
48C7EA1C38ED0FF0000EEC07C02A2779A530>I<EC3F80903801FFE0903807E0F890380F
803C90383E001E49131F5B0001EC0F80485A4914C01207485AA2485A123FA290C7121F5A
A300FEEC3F80A316005D48147E15FE5D5D007C13014A5A007E5C003E495A4A5A6C49C7FC
6C137C3807C1F83801FFE06C6CC8FC222777A52C>I<3903E001F83907F00FFE3A0E381E
0780381C3C3890391E700FC00038EBE01FEB1FC0D93F80138012709138000E0092C7FC13
3EEAE07E137C1200A25BA4485AA4485AA4485AA4485AA448C9FCA2120E222779A524>
114 D<EB0380EB07C0A3EB0F80A4EB1F00A4133EA45B007FB5FCB6FC14FE3800F800A448
5AA4485AA4485AA4485AA448C7FC141CA21438123E1430147014E0A2EB01C0381E0380EB
0700EA0E0EEA07FCEA01F0183778B51D>116 D<13F8486C1470D8070E14F8EA060F000C
EC01F0001C138012181238ED03E038701F00A3D8E03EEB07C0A2C65AA2ED0F805BA34848
EB1F00A44848133E1607A3ED7C0EA315FC0201131C12019138033C182600F00613389039
783C1C7090393FF80FE090390FE007C0282779A52E>I<01F8ED01C0486C9138E003E0D8
070E903901F007F0D8060F150F000CEC03E0001C01801407001816031238923807C00138
701F00A21700D8E03E494813E0A2C65AA292391F0001C05BA34848013EEB0380A3180048
48495BA21706170EA25F15FC171800010101143803BC5B2600F0031460902678071E5B90
3A3C0E0F838090271FFC07FFC7FC903907F000FC342779A539>119
D E /Fc 1 89 df<B912C018E06CC81201EE001F6C6CED03F06C6C1500000F17386D1618
6C6C160C6C6C1604A26C6C16026C6C1600137FA26D7E6D7E130F806D7E6D7EA26D7E6D7E
147E147F6E7E6E7EA2140F6E5A14034AC9FC140E5C5C5CA25C495A495A49CAFC130EA249
16024916045B49160C00011718491638484816F848C9EA01F0000E160F48ED01FF003FB8
12E0A25AB912C0373A7E7F3C>88 D E /Fd 2 42 df<130813101320134013C0EA0180A2
EA03001206A2120E120C121CA212181238A212301270A512F05AAD7E1270A512301238A2
1218121CA2120C120E1206A27EEA0180A2EA00C013401320131013080D3D7AAC17>40
D<7E12407E7E12187EA27E7EA21380120113C0A2120013E0A213601370A513781338AD13
781370A5136013E0A213C01201A2138012031300A212065AA25A12105A5A5A0D3D7DAC17
>I E /Fe 14 121 df<90380FFFFC017F13FE90B512FC3903F07C003807801C380F001E
000E130E121E48130F12381278140E48131EA3141C143C5A5C14706C5B387001C0383003
806C48C7FCEA0C1CEA03F01F1A7E9922>27 D<127812FCA212FEA2127A1202A41204A312
08A212101220124007127B8511>59 D<013FB512F016FC903901F8003F4AEB0F80EE07C0
EE03E0EE01F0495AEE00F8A3495A17FCA3495AA449C812F81601A3013EEC03F0A217E016
074915C0A2EE0F80EE1F005B163E5E5E4848495AED07C0ED1F800003027EC7FCB612F815
C02E297EA831>68 D<15F0141FA2140115E0A4EC03C0A4EC0780A490381F0F00EB70CF38
01C02FEA03800007131EEA0F00121EA2003E5B123C127CA2485BA4485B1540A3903801E0
80EA7003EA7804393808E100381C30733807C01C1C2A7EA91F>100
D<133CEA07FCA2EA007C1378A45BA4485AA43803C1F8EBC60EEBC80FEBF007EA07A001C0
13801380A2390F000F00A4001E131EA35C5A15101478A248EB702014F0EC704015804813
310060EB1E001C2A7DA922>104 D<131C133EA2133C13381300A9EA0780EA08E01210EA
20F0A21240A2EA41E012811201EA03C0A2EA0780A3EA0F00A21304121EA2EA1C08123CEA
1C101320EA0C60EA07800F287EA715>I<1407140F141FA2140E1400A9EB03E0EB0430EB
0838EB103C1320A21340A2EB80781300A314F0A4EB01E0A4EB03C0A4EB0780A4EB0F00A3
131E1270EAF81C5B485A485A003FC7FC183481A719>I<133CEA07FCA2EA007C1378A45B
A4485AA43903C00F80EC1040EC61C0148338078107138290388403800188C7FC485A5B13
C07FEA1E7C130F6D7E6D7E123C1580A30078EB8100A21482130100F013C4386000781A2A
7DA91F>I<EB0FE0EB3838EBE00C3801C00E48487ED8070013805A121E003E14C0123C12
7CA248EB0F80A315005C48131E143E143C00785B5C383801E0381C0380D80E0FC7FCEA03
F81A1A7E991D>111 D<90387807C090388C183039010E203890380F401C0002EB801E14
00A2151FEA041E1200A349133EA3153C49137C1578A215F001F813E0EC01C0EC03809038
F407003801E20EEBE1F001E0C7FCA2485AA4485AA3120FEA7FF812FF202683991E>I<EB
1FC0EB60203801C010EB800838030038481378A21430EB800013E013FE3803FF806C13C0
7EEB0FE01301A2EA3800127C14C0EAF80100701380EA400338200700EA181CEA07F0151A
7D991C>115 D<13301378A25BA4485AA4B51280A23803C000A2485AA448C7FCA4121EA4
5A1302A25B12785BEA38101330EA1C40EA0F8011257EA416>I<D8078013C03908E001E0
1210EA20F0EC03C01240A2EA41E00081EB07801201EA03C0A2EC0F00EA0780A3380F001E
1508A3EC3C10A26C135C3903809C203801C30E3900FC03C01D1A7E9922>I<90387C07C0
390186082039020310700004EBA0F0000813A114C10010EBC0E0150048485A1200A349C7
FCA4131E1540A200301480EA783E00F8EB0100134E00F0130638618708381E01F01C1A7E
9922>120 D E /Ff 2 51 df<B712E0A323037B8F2E>0 D<903803FFF8131F137FD801FC
C7FCEA03E0EA078048C8FC121E121C5AA25AA35AA3B612F8A300E0C8FCA31270A37EA27E
121E7E6C7EEA03E0EA01FC39007FFFF8131F13031D257BA028>50
D E /Fg 15 121 df<EC1FC0ECFFF8903803F07C90380F801E49486C1302013E90380780
064914C049EB03E04848150C484814F012074848151815014848ECF830123F176090C7FC
4816C0A2EEF98012FEEEFB0016FEA25E485DA4127C007E1403003E1407031C1304001E02
38130C6C14E03B078007C07C183B03E03F003C702601FFF8EB1FE026003FC0EB07802F27
7CA537>11 D<EC0380EC1FFE91383FFFC0027113E0ECC03F903801801FED0FC00103EB03
8092C7FCA280A213018080A26D7EA280147E147F80816E7EA2ECFFE001037FEB0F879038
1F07F8EB3C031378496C7EEA01E01203EA07C0000F13005B121F48C7FCA2123E127EA348
5CA21401A25DA214035DA2007C495AA2003C5C003E49C7FC001E131E6C131C6C6C5A3803
E0F0C6B45AEB3F80233F7DBD26>14 D<D801F0EB3FC0D803FCEBFFF03A061E03C0F83A0C
1F07007C26180F0C133E1498003013B0D91FE0133F5C12605C163E4848C7127EA21200A2
017E14FCA449EB01F8A44848EB03F0A44848EB07E0A44848EB0FC0A44848EB1F8012076C
5AC8FCED3F00A4157EA45DA44A5AA25D6E5A28387EA52B>17 D<027FB512E049B612F013
07131F4915E090267F81FEC7FC9038FE007ED801F87F48487F485A4980485A121F90C7FC
5AA2127EA3484AC7FCA3153E157E5A5D5DA24A5A4A5A007C5C4A5A003C49C8FC6C131E6C
137C380781F03803FFC0C66CC9FC2C267CA431>27 D<EC03FC91381FFF80027F7F9138F8
07F0903901E000F8D90380137C49C77E010E80130C011FEC0F8080496CEB07C0A217E05C
6DC7FC130E90C8FC17F0A4EC0FF0EC7FFC903801F80E902607C00313E090390F00018701
3EEB00CF5B49146F485A0003ED7FC04848143FA2485A001F16805B003F157F170048C8FC
A216FEA200FE5DA24B5AA24B5A5A4B5A5E007E4A5AA2003E4AC7FC153E6C5C6C6C485A6C
6C485A3903F01FC06CB55A6C01FCC8FCEB1FE02C3E7CBC2E>64 D<0103B812F8A3902600
07F8C7121F18014B14001978A219704A481530A44A5AA21960A24A4813101730A219004A
C75AA217E0A202FE495A160F91B6FCA2495D9138FC000F16071603494891C8FCA3198049
4801061301A2F0030093C7FC49485D1806180E180C4948151C1818183818304948157018
F04D5A170349C8EA0FC0173F49913803FF80B9FC95C7FCA23D3B7CBA40>69
D<0103B5D8FC01B512FEA390260007FCC73803FE004B5D4B5DA44A484A5AA44A484A5AA4
4A484A5AA44AC8485AA402FE4BC7FCA291B8FCA2495E02FCC8FCA349484A5AA449484A5A
A449484A5AA449484A5AA449484A5AA449C8485AA249157FB6017FB57EA3473B7CBA48>
72 D<EC1FE0ECFFF8903807F03C90380F800E90383F0007137C5B485A1203485A120F49
130E121F49133C003F14F0EC0FE048B5128002F8C7FC90C9FCA2127E12FEA4127EA31680
1501003EEC030015066C5C15386C6C13F00007EB03C02603E01FC7FC3800FFFCEB3FE021
277DA528>101 D<EB03F0EBFFF8485B7E1307A25CA4495AA4495AA449C9FCA490387E03
FCEC0FFF91383C0F8091387007C09039FCC003E0EBFD80EBFF004980485AA25B5E484813
07A44848495AA34B5A485AA24BC7FCA2485A037E13C0A348C738FC0180A2EE030015F800
7E1506A25EED7818481570007CEC3FE00038EC0F802A3D7CBB32>104
D<EB03F0EBFFF8485B7E1307A25CA4495AA4495AA449C8FCA4017EEB03E0ED0FF8ED3C1C
ED703C49EBC0FEEC0181EC030114062601F80C13FC021813F891383000F04A130048485A
EBF18001F3C8FC13FE485AEBFFC0EBEFF8EBE1FC380FC07E141F816E7EEA1F801618A33A
3F001F8030A31660127E020F13C0A2913807818048903803C300007CEB01FE0038EB007C
273D7CBB2D>107 D<D801F0EB3FC0D803FCEBFFF03A061E03C0F83A0C1F07007C26180F
0C7F1498003013B0D91FE0133F5C12605C163E4848C7127EA21200A2017E5CA34B5A5BA2
4B5AA2485A923807E00CA3484890380FC018A21730168048481560A217C0923807818048
48EC87000007EC03FE6C48EB00F82E277EA534>110 D<EC1FE0ECFFFC903803F03E9038
0FC00F90391F000780013EEB03C04914E04914F0484813011203484814F8485AA2121F5B
003F140390C7FC5AA300FEEC07F0A3ED0FE0A216C048141F1680007CEC3F00007E143E15
7E003E5C5D6CEB03E06C495A6C6C485A2603E07EC7FC3800FFF8EB3FC025277DA52A>I<
EB01C0497E1307A2495AA4495AA449C7FCA4137E007FB51280B6FC1500D800FCC7FCA448
5AA4485AA4485AA4485AA4485A1406A25CEA3F005CA25CA25C6C5B495AD80F07C7FCEA07
FEEA01F819377DB51F>116 D<017C163848B40238137C26038780017C13FE260607C001
7E13FF000C5D800018177F0030173F4B48131F26600FC0150FA348484848481306A21200
EB3F004B48130C137EA34949481318A318304848495AA21860A218C0A2EF0180A2000002
3FEB0300036F1306017CEB67C06D01C3131C903A1F0381F078903A07FF00FFE0D901FCEB
3F8038277EA53E>119 D<D903F013FC90390FFC01FF903A3C1E0303809026700F0613C0
903AC0078C0FE0D80180EBD81FD8030013F0A2000602E013C0178048ED0F0093C7FC4849
5AA2C7FCA24A5AA44AC8FCA4147E1603A3001E491306123FD87F805C1381D8FF015CD903
3C5B007E013E5B267C061E5B3A381C0F0780271FF807FFC7FC3907E001F82B277EA531>
I E /Fh 66 123 df<ED0380A24B7EA24B7EA24B7EA24B7EA2ED67FCA2EDC3FEA2913801
81FFA24AC67F167F020680163F4A80161F4A80160F4A8002706D7E146002E06D7E5C0101
6E7E5C01036E7F91C8FC496F7E1306010E6F7E130C011C6F7E131801386F7E133001706F
7E136001E06F7E5B0001707E5B000370138090CAFC48EF7FC01206000EEF3FE0120C001C
EF1FF0001FB9FC4818F8A24818FCA2BA12FEA23F3D7CBC48>1 D<EC07FCEC3FFF9138FC
0380903903F000C0D907C0136090390F8001F04948487E491307137EA2137C01FC6D5AED
00C093C7FCAAED01F8B7FCA33900FC00071501B3AB486C497E3B7FFFF07FFFF0A32C3D7F
BC30>12 D<DA07FCEB07FC913A3FFF803FFF913BFE03C0FC0380903C03F00063F000C0D9
07C0D937C0136049489039FF8001F049484849487E49491407017E5CA2017C5C01FC0101
6E5A0300EC00C096C7FCAAF001F8BAFCA3D800FCC738FC00071801B3AB486C496C497E29
7FFFF87FFFF8B512F0A3443D7FBC48>14 D<121C127FA2EAFF80A7EA7F00AB123EAB121C
AB1208C7FCA8121C123E127FEAFF80A3EA7F00123E121C093D79BC18>33
D<146014E0EB01C0EB0380EB0700130E5BA25B137813705B12015B1203A2485AA248C7FC
A35A121EA2123EA2123CA2127CA5127812F8B21278127CA5123CA2123EA2121EA2121F7E
A36C7EA26C7EA212017F12001370137813387FA27F7FEB0380EB01C0EB00E01460135678
C021>40 D<124012E012707E7E7E7EA26C7E7F12016C7E7F13701378A27FA27FA3131F7F
A21480A21307A214C0A5130314E0B214C01307A51480A2130FA21400A25B131EA35BA25B
A2137013F05B485A12035B48C7FCA2120E5A5A5A5A124013567BC021>I<1518153CB3A7
007FB812FEBAFCA26C17FEC8003CC8FCB3A7151838387BB143>43
D<121C127E127FEAFF80A213C0127FA2121C1200A5EA0180A3EA0300A21206A25A5AA25A
12200A1A798818>I<121C123E127FEAFF80A3EA7F00123E121C0909798818>46
D<EB03FC90381FFF8090387E07E09038F801F048486C7E4848137C48487F48487FA248C7
EA0F80A24815C0A3007EEC07E0A500FE15F0B3007E15E0A4007F140F6C15C0A36C15806D
131F000F1500A26C6C133E6C6C5B6C6C5B6C6C485A90387E07E090381FFF80D903FCC7FC
24397DB72B>48 D<EB01C013031307131F13FFB5FCA2131F1200B3B3A8EB7FF0007FB512
F8A31D3879B72B>I<EB0FF8EB7FFF48B512C03903E03FE039070007F8000E6D7E00186D
7E481300157F481580127C00FE143F6C15C07FA46CC7FC123EC8FC1680157F1600A215FE
A24A5A5D4A5A4A5A5D4A5A4AC7FC143E143C5C5C495A495A495A49C8FC011E14C0133813
30491301491480485A48C7FC00061403000FB6FC5A5A481500B7FCA322387CB72B>I<EB
07FC90383FFF8090B512E03901F807F03903C001F848C77E000E80D80FC07F486C7F6D14
80A46C5A6C5A0001C71300C85AA25D4A5A5D4A5A5DEC0FC0023FC7FCEB1FFCECFF809038
0007E0EC01F86E7E157E157FED3F8016C0A2ED1FE0A216F0A3123F487E487EA216E0A215
3F4914C06CC7FC0070EC7F806C15006C14FE390F8001FC3907F007F80001B512E06C6C13
80D907FCC7FC24397DB72B>I<151C153CA2157C15FCA214011403A21407140F141D1419
14311471146114C11301EB038114011307130E130C131813381330136013E0EA01C01380
EA03005A12065A121C5A123012705AB712FCA3C73801FC00AB4A7E49B512FCA326397EB8
2B>I<00061406D80780131E9038F801FC90B55A5D5D5D92C7FC5C38067FF090C9FCABEB
03FCEB1FFF90387C0FC09038E003E039078001F090C77E0006800004147EC8FC157FED3F
80A316C0A4123E127F5A7FA290C71380A248147F00601500A26C14FE00385C6C495A6C49
5A6C6C485A3903E01FC06CB5C7FC6C6C5AEB0FF022397CB72B>I<EC1FC0ECFFF0010313
FC90380FE03E90381F800690383E000349131F49EB3F804848137F1203485AA24848EB3F
00001F141E4990C7FCA2123FA2127F90C9FCA2EB01FE903807FFC039FF0E03E090381800
F849137C497F153F49EB1F80A24914C0ED0FE0A290C7FC16F0A37EA56C7E16E0A2121FED
1FC06C7E16800007EC3F006C6C133E6C6C5B6C6C5B90387E03F06DB45A010F1380D903FE
C7FC24397DB72B>I<12301238123E003FB612F0A316E04815C01680A20070C7EA030000
601406A25D00E05C485CA25DC85A4A5AA24AC7FC1406A25C141C141814381478147014F0
A2495AA21303A31307A25C130FA3131FA5133FA96D5A6DC8FC243B7BB92B>I<EB03FC90
381FFF804913E09038FC03F03901E000F8D80380133C90C77E4880120EED0780A2121EA2
121FA27F6DEB0F00EA0FF06D131E01FE131C6C6C5B6CEBC070ECE1E06CEBFBC06C01FFC7
FC133F6D7F6D13E0497F017813FC3901E07FFE3903C01FFF48486C1380380F0003001E01
0013C048EC7FE0151F48140FED07F04814031501A21500A316E01278ED01C07EED03806C
EC07006C6C130ED807E0133C3903FC01F8C6B512E0013F1380D907FCC7FC24397DB72B>
I<EB03FC90381FFF80017F7F9038FE07F03901F001F848486C7E4848137C000F80484813
3F003F80168048C7FC16C0A248140F16E0A516F0A37E151FA26C7E001F143FA26C6C136F
12076C6C13CF3901F0018F39007C070FEB3FFED907F813E090C7FCA3ED1FC0A31680D807
80133F486C1400487E157E157C15FC49485AD80F805B390C0003E00007EB0FC02603C03F
C7FC3801FFFE6C13F8EB1FC024397DB72B>I<121C123E127FEAFF80A3EA7F00123E121C
C7FCB3121C123E127FEAFF80A3EA7F00123E121C092579A418>I<007FB812FEBAFCA3CC
FCAEBAFCA36C17FE38167BA043>61 D<EB3FE03801FFFE3907C03F80390E000FC00018EB
07E048EB03F04814F8140100FC14FC7E7EA3127E123CC7EA03F8A215F0EC07E0EC0FC0EC
1F80EC3E00143C5C5C5C13015C495AA291C7FC5BA21306AA130490C8FCA8130E131F497E
497EA36D5A6DC7FC130E1E3D7BBC29>63 D<150C151EA3153FA34B7EA34B7EA39138019F
E0A202037F150FA202077FEC0607A2020C7F1503A202187F1501A24A6C7EA34A6D7EA202
E0804A133FA20101814A131FA249C77F91B6FCA249810106C71207A2496E7EA3496E7EA2
013881013080A20170820160157FA201F082EA03F8D80FFC4A487EB500C0013FEBFFC0A3
3A3D7DBC41>65 D<B712F816FF17E0C69039C0001FF06D48EB07FC707E707E82EF7F8018
C0173F18E0A718C0A2EF7F8017FF18004C5A4C5AEE0FF8EE3FE091B61280A2913980001F
E0EE03F8EE01FE707EEF7F80EF3FC018E0171F18F0170F18F8A8EF1FF0A218E0173FEF7F
C0EFFF804C13004C5A496CEB1FFCB812F017C04CC7FC353B7EBA3D>I<DBFFC013600207
13F8023F01FE13E09139FFC01F01903A03FE000783D907F8EB01E3D90FE0EB0077D91F80
143F017FC8121F01FE150F4915071201484815031207491501120F48481500A2123F5B18
60127FA25B180012FFAB127FA26D1660A2123FA27F121F18C06C7E12076DED018012036C
6CED03006C6C5D1706017F5DD91F805CD90FE05CD907F814E0D903FEEB03C0903A00FFC0
1F8091263FFFFEC7FC020713F8020013C0333D7BBB3E>I<B712F816FF17C0C69039C000
3FF06D48EB07FCEE01FEEE007F717E717E717E717EA2717E84170184170084A3F07F80A4
19C0AC1980A4F0FF00A34D5AA2604D5AA24D5A4D5A4D5A173F4DC7FCEE01FEEE07FC496C
EB3FF0B85A94C8FC16F83A3B7EBA42>I<B91280A3C69038C000016D48EB003FEF0FC017
071703A21701A21700A418E018601630A31800A31670A216F0150391B5FCA3EC80031500
1670A21630A2180CA3181893C7FCA31838A21830A21870A218F018E017011703170F173F
496CEB01FFB912C0A3363B7EBA3B>I<B812FEA3C69038C000076D481300173F8383A283
A283A418801701A21660A294C7FCA416E0A21501150791B5FCA3EC800715011500A21660
A693C8FCAEEBFFE0B612F0A3313B7EBA38>I<DB7FC01330913807FFF8023F01FE137091
3AFFC01F80F0903A01FE0003C1D907F8EB00E1D90FE014334948141F49C8120F017E1507
13FE48481503484815011207491500120F48481670A3485A1830127FA25B95C7FC12FFAB
007F037FB512C0A27F9339003FF800003FEE0FF0A26C7EA36C7E12077F12036C7E6C7E13
7F6D6C141F6D7E6D6C1433D907F81473D901FEEB01E1903A00FFE00FC0023FB5EA007002
0701FC13309126007FE090C7FC3A3D7BBB44>I<B6D8C03FB512F0A3C601C0C7383FF000
6D486E5AB3A591B7FCA30280C7121FB3A7496C4A7EB6D8C03FB512F0A33C3B7EBA41>I<
B612C0A3C6EBC0006D5AB3B3AF497EB612C0A31A3B7EBA1F>I<B612F0A3C601E0C8FCEB
7F80B3AE1706A5170E170CA4171CA3173C177CA2EE01FCEE03F8160F496C137FB8FCA32F
3B7EBA36>76 D<B56C4BB5FC6E5DA2C61900D96FE0ED06FEA3D967F0150CA2D963F81518
A3D961FC1530A2D960FE1560A3027F15C0A36E6CEB0180A26E6CEB0300A36E6C1306A36E
6C5BA26E6C5BA36E6C5BA26E6C5BA3037F5BA392383F8180A2DB1FC3C7FCA3ED0FE6A3ED
07FCA26F5AA213F0486C6D5AD807FE4C7EB527F000E001B6FCA3483B7DBA4F>I<B56C91
B512F08080D8007F923807FE006EEC01F8D96FF86E5A01671660EB63FC801361EB60FF81
6E7E143F816E7E140F6E7E8114036E7E816E7F157F826F7E151F6F7E8215076F7E826F7E
81EE7F8017C0163FEE1FE017F0160FEE07F817FCEE03FE1601EE00FF18E0177F173FA217
1F170FA2170701F01503486C1501EA07FEB500F014001860A23C3B7EBA41>I<4AB47E02
1F13F891387F00FED901F8EB1F80D907F0EB0FE0D90FC0EB03F049486D7E49C87E017E15
7E4981000117804848ED1FC04848ED0FE0A2000F17F0491507001F17F8491503003F17FC
A3007F17FE491501A300FF17FFAB007F17FE6D1503A4003F17FC6D1507001F17F8A26C6C
ED0FF0A2000717E06D151F000317C06C6CED3F806C6CED7F00017F15FE6D5D6D6C495AD9
0FE0EB07F06D6C495AD901FCEB3F80D9007F01FEC7FC91381FFFF802011380383D7BBB43
>I<B712F016FF17C0C69039C0003FF06D48EB07F8707E707E707EEF7F80A218C0173F18
E0A718C0A2177F188018005F4C5A4C5AEE0FF0EE3FE091B6128004FCC7FC0280C9FCB3A6
497EB612C0A3333B7EBA3B>I<D90FF81360EB3FFF90B5EAC0E03901F807E13907E000F1
D80F80133B90C7121F48140F003E14071503481401A212FC1500A316607EA27E6C15007F
13E0EA3FF8EBFF806C13F86CEBFF806C14E06C14F86C806C80013F7F01071480D9007F13
C0020713E0EC007FED1FF0150F150716F81503124012C01501A37EA216F07E15036C15E0
A26CEC07C0B4EC0F80D8FB801400D8F1F0133ED8F0FE13FC39E03FFFF8D8C00F13E00101
1380253D7BBB30>83 D<003FB812F8A3D9E001EB800790C7EB0001007CEE007C0078173C
A20070171CA20060170CA500E0170E481706A4C81500B3B1020313C0010FB612F0A3373B
7DBA3E>I<B600C090B512F0A3C601C0C73807FE006D48EC01F8715A1860B3B3A2013F5E
80A2011F4B5AA26D6C4AC7FC01075D6D6C14066D6C5C6D6C1438027E5C6E6C485A91391F
F00FC00207B55A020149C8FC9138001FF03C3C7EBA41>I<B500FE91381FFFF0A3000301
C0020313006C90C912FC6C17786E1570017F1660A26E15E0013F5E80011F4B5AA26E1403
010F93C7FCA26D6C1406A28001035DA26E141C01011518806D5DA26F1370027F1460A26E
6C5BA281021F495AA2EDF003020F91C8FC15F802071306A2EDFC0E0203130C15FE02015B
A215FF6E5BA216F06F5AA26F5AA36F5AA26FC9FCA315063C3C7EBA41>I<B5D8FC01B500
FC90383FFFE0A300079026800007018001071300000190C76C48C7EA01FC49725A6D0201
16706C1A60836E7F017F618480013F4E5AA2933801BFC06D6C4DC7FCA29338031FE06D6C
1706A29338060FF06D6C5FA24C6C7E6D6C5FA24C6C7E6D6C5FA24C6C7E6D6C5FA204707F
91277F8060005CA204E014806F48EB7F81023F5F03C115C1DBE180EB3FC3021F94C8FC03
E315E303F3C7EA1FE7020F16E619F603FEEC0FFE02075EA24B140702035EA24B14030201
5EA24B140102005EA24B140003605D533C7EBA58>I<EB1FF0EBFFFC3803E03F3907000F
80486D7E9038C003E0486C6C7E81A214006C487F6C5AC8FCA4140FEB03FFEB1FF8EBFF00
EA01FCEA07F0EA0FC0485A123F90C7FC5A007E150612FEA31401A2007EEB037C127F3A3F
80063E0C3A1FC00C3F1C3A0FF0381FF83A03FFF00FF03A007FC007C027287DA62B>97
D<EA01F812FFA312071201B1EC0FF0EC3FFEECF01F9039F9C007C09039FB0003E001FE6D
7E496D7E167C49147E163E163FA21780161FA217C0A91780A2163F1700A2167E167C6D14
FC5E01F6495A01E3495A9039E1800F809026C0F03FC7FC9038807FFCC7EA0FE02A3D7EBB
30>I<EB03FE90381FFFC090383E01F09038F800384848133C484813FC3907C001FE120F
1380121F48C712FC1578481400A2127EA212FEA9127EA2127F6C1403A26C7E15066C7E00
07140C6C6C13186C6C13306C6C13E090387E03C090381FFF00EB03FC20287DA626>I<ED
07E0EC03FFA3EC001F1507B1EB01FC90380FFF8790383F03C790387C0067D801F0133748
48131F4848130F120F491307121F48C7FCA25A127EA212FEA9127EA2127F7EA27E6D130F
120F6C6C131F6C7E6C6CEB77F86C6C9038E7FFC090383E038790381FFF07D903FCEBE000
2A3D7DBB30>I<EB03FCEB1FFF90387E07C09038F801E03901E000F0000314784848137C
48487F121F90C7123F4880A25A007E1580A212FEA2B7FCA248C9FCA5127EA3127F6CEC01
80A26C7E000FEC03007F000714066C6C5B6C6C5BD80078137090383F01E090380FFF80D9
01FEC7FC21287EA626>I<147F903801FFC0903807C0E090380F81F090381F03F8EB3E07
137CA29038FC03F09038F801E0000190C7FCAEB512FCA3D801F8C7FCB3AC487E387FFFF8
A31D3D7FBC1A>I<903907F001F890393FFE0FFC90397C1F1E3E9038F007F03A01E003E0
1C2603C00113080007ECF000000F80EB8000001F80A7000F5CEBC00100075C00035C6C6C
485A6D485A26037C1FC7FC38073FFE380607F090C9FC120EA3120FA2EA07C090B512C06C
14FC6C14FF6C1580000315C03A0F80003FE048C7EA07F0003EEC01F8003C1400127C0078
157C12F8A5007C15F8A26CEC01F06CEC03E06C6CEB07C0D803E0EB1F00D801FC13FE3900
3FFFF00107138027397EA52B>I<EA01F812FFA312071201B1EC07F8EC1FFEEC781F9138
E00F809039F98007C0D9FB007F150301FE805BA35BB3A5486C497EB500F1B512E0A32B3C
7EBB30>I<EA0380487E487E487EA36C5A6C5A6C5AC8FCABEA03F012FFA3120F1203B3AB
487EB512C0A3123A7EB917>I<EA03F012FFA3120F1203B2913801FFFCA39138007FC0ED
7E00157C157015604A5A4A5A0206C7FC5C5C5C147814FCEBF1FEEBF73EEBFE3F9038F81F
80EBF00F816E7E1403816E7E140081157E81A2ED1F8016C0486CEB3FF0B500C0B5FCA328
3C7DBB2D>107 D<EA03F012FFA3120F1203B3B3AF487EB512C0A3123C7EBB17>I<2701F8
03F8EB03F800FFD91FFFEB1FFF913B3C0F803C0F80913BE007C0E007C03D07F9C003E1C0
03E02601FB00D9F3007F0301140101FE02FE80A2495CA2495CB3A5486C496C497EB500F0
B500F0B512F0A344267EA549>I<3901F807F800FFEB1FFEEC781F9138E00F803A07F980
07C02601FB007F150301FE805BA35BB3A5486C497EB500F1B512E0A32B267EA530>I<EB
01FE90380FFFC090383F03F09038F8007C48487F48487F4848EB0F804848EB07C0A248C7
EA03E04815F0A3007EEC01F8A300FE15FCA9007E15F8A2007F14036C15F0A26C15E06D13
07000F15C06C6CEB0F806C6CEB1F006C6C133E6C6C5B90383F03F090380FFFC0D901FEC7
FC26287EA62B>I<3901F80FF000FFEB3FFEECF01F9039F9C007C03A03FB0003E0D801FE
6D7E49806F7E49147EA2167F821780A2161F17C0A91780163FA217005E167E5E7F4B5A6D
495A01FB495A9039F9800F809026F8F03FC7FCEC7FFCEC0FE091C9FCAC487EB512F0A32A
377EA530>I<D901FC13C090380FFF0190383F03819038FC00C3D801F013634848133712
074848131F485AA2003F140F90C7FC5AA2127E12FEA9127E127FA27EA26C7E151F6C7E00
07143F6C6C136F6C6C13EF3900F801CF90387E070FEB1FFEEB03F890C7FCACED1FE00203
B5FCA328377DA52D>I<3903F00F8000FFEB3FE0EC70F0ECC1F83807F1833801F303A290
38F601F0EC004001FC1300A45BB3A3487EB512F8A31D267EA522>I<90387F81803803FF
E3380F807F381E001F00381307A2481303A200F01301A37EA200FE90C7FCEA7F8013FC38
3FFFC06C13F06C13FC00037F6C7FD8001F13801300EC1FC00040130F00C0EB07E014036C
1301A47E15C06C13036C1480EC070000F7130E38E3C03C38C0FFF8EB3FC01B287DA622>
I<1330A61370A413F0A21201A212031207001FB5FCB6FCA2D803F0C7FCB2EC0180A91201
9038F80300A21200EB7C066D5AEB1FF8EB03F019367EB421>I<D801F8EB03F000FFEB01
FFA30007EB000F00011403B3A51507A30000140FA26D131B017C14FC6D903873FFE09038
1F81E390380FFF83903A01FE03F0002B277EA530>I<B538801FFFA33A07F80007F86C48
EB03E0ED01C06C7E16806D130300001500A2017E1306A2137F6D5BA2EC801C011F1318A2
6D6C5AA2ECE07001071360A26D6C5AA214F901015BA26DB4C7FCA3147EA2143CA3141828
267EA42D>I<B53B87FFF80FFF80A33D0FF8003FC003FC006C486DC75A00035F701360A2
6C6C5E8215376C6C4B5AED77E06D01631303017E93C7FCEDE3F0017F01C15B6D15060201
13F8DA8180130E011F150C028313FC9139C3007C1C010F151802C7137E02E6EB3E380107
EC3F3002EC131FD903FC5C17E04A130F01015DA24A130701005DA24A1303026091C8FC39
267EA43E>I<B539C03FFF80A300039039001FF000C648EB0FC093C7FC017E130E6D130C
6D6C5AECC038010F5B6D6C5A6D6C5AECF980EB01FB6DB4C8FC147E147F80814A7EEC6FE0
14C7903801C3F090380381F8EC01FCEB0600010E137E497F49800130131F01706D7ED801
F880000F4A7ED8FFFE90387FFFC0A32A257FA42D>I<B538801FFFA33A07F80007F86C48
EB03E0ED01C06C6C1480A26D130300001500A2017E1306A2017F130E6D130CA26D6C5AA2
ECC038010F1330A26D6C5AA2ECF0E001035B14F8903801F980A214FF6D90C7FCA2147EA2
143CA31418A25CA35CA25C1210EA7C0100FE5BA249C8FC5BEAFC0EEA701C6C5AEA1FF0EA
07C028377EA42D>I<003FB512FEA290388000FC393E0001F8003C1303003814F00030EB
07E00070130FEC1FC000601480EC3F005C147E5CEA0001495A5C495A130F5C495A013F13
03EB7F00137E5B1201491307485A12074848130649130E485A003F141E90C7127E007EEB
01FEB6FCA220257EA426>I E /Fi 4 34 df<007FB812E0B912F0A26C17E03404799743>
0 D<EB0FF0EB7FFE48B512804814C04814E04814F04814F84814FCA24814FEA3B7FCA86C
14FEA36C14FCA26C14F86C14F06C14E06C14C06C148039007FFE00EB0FF020207BA52B>
15 D<14301478A25CA313015CA2495AA2495A130F91CDFC131E5B137C5B485AEA07E0EA
1FC0007FBB1280BC12C0A26C1A80D81FC0CDFCEA07E0EA01F06C7E137C133C7F7F801307
6D7EA26D7EA2801300A31478A214304A2E7AAC56>32 D<18034E7EA2727EA3851801A272
7EA21978197C193C858586737E737EF101F8F100FE007FBB1280BC12E0A26C1A80CDEAFE
00F101F8F103E04F5A4F5A97C7FC191E61197C197861A24E5AA2180361A34E5AA272C8FC
4B2E7BAC56>I E /Fj 29 122 df<121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F00
C7FCB3A4121FEA3F80EA7FC0EAFFE0A5EA7FC0EA3F80EA1F000B2C77AB1D>58
D<1678A316FCA34B7EA24B7EA34B7FA34B7FED0E7FA2031E7FED1C3FA2033C7FED381FA2
03707F160FA203E07F1607A24A486C7EA34A486C7EA34AC77FA24A81020E147FA2021E81
021C143FA2023C810238141FA2027881027FB6FCA291B77E02E0C71207A20101824A1403
A249488183A249C97FA3010E707EA349707E131E133E017F8348486C82000701E0EDFFFC
B500FC023FEBFFFCA346497DC84D>65 D<B812E017FE717E26007FF0C7EA7FE06D48EC1F
F8011F6F7E717E717E7113808319C019E0187FA219F0A2183FA3187FA219E0A218FF19C0
A24D13804D13004D5A4D5AEF1FF0EF7FE0933801FF8091B600FCC7FC17FF02E0C7EA3FE0
EF0FF8EF03FE717E711380F07FC019E0F03FF0F01FF8A219FC180FA219FEA819FC181FA2
19F8183FF07FF019E0F0FFC04D13804D1300013FED0FFE496CEC7FFCB912F0188005FCC7
FC3F477DC649>I<B6D8FE01B612FCA326007FFCC8EBF8006D486F5A6D486F5AB3AA91B8
FCA302F0C8123FB3AC496C4B7E496C4B7EB6D8FE01B612FCA346477DC64D>72
D<B77EA3C66C48CAFCEB3FF86D5AB3B3A4F00380A4F00700A560A360181E183EA2187E18
FE17011703170F013F153F496C49B45AB9FCA339477DC641>76 D<B500F8051FB5FCA3C6
6C6C94383FFE00013F61D91DFEEF77F8A3D91CFF17E7A26E6CED01C7A36E6CED0387A26E
6CED0707A36E6C150EA36E6C151CA26E6C1538A36E6C1570A26E6C15E0A36F6CEB01C0A3
6F6CEB0380A26F6CEB0700A36F6C130EA26F6C5BA36F6C5BA26F6C5BA36F6C5BA393387F
81C0A293383FC380A3DC1FE7C7FCA2EE0FFEA3705AA2133E017F6E5A496C4D7E000301E0
6D484A7EB60080033FB6FCA2705A58477DC65F>I<ED0FFE92B512E0913907F803FC9139
1FC0007F027FC7EA1FC002FE6E7ED903FCEC07F8D907F0EC01FC49486E7E011F8249486F
7E49486F7E49C96C7EA24848707E0003844916070007844848707EA2001F84A24982003F
1980A3007F19C04982A300FF19E0AD007F19C06D5EA4003F1980A26D5E001F1900A26C6C
4C5AA20007606D160F0003606C6C4C5AA26C6D4B5A6D6C4B5A013F5F6D6C4BC7FC6D6C4A
5A6D6C4A5A6D6C4A5AD900FEEC0FE0DA7F80EB3FC0DA1FE001FFC8FC913907FC07FC0200
B512E0DB0FFEC9FC43497AC750>79 D<B712FEEEFFE017FC3B007FF8000FFF6D48010013
C0011FED3FE0EF1FF8EF07FC717E8483858583A285A761A24D5BA296C7FC4D5A4D5A60EF
1FF0EF3FC005FFC8FCEE0FFC91B612E017809139F0000FE0EE03F8EE00FC177E177F717E
717E84A2717EA284A484A584A41A0272130783A27113801A0E496C80496C6EEBC01CB600
FE027F131895381FF070953807FFE0CCEA7F8048487DC64C>82 D<49B414C0010FEBF001
013F13FC90397E00FF03D801F8EB0F87D803E0EB03C74848EB01EF4848EB00FF90C8127F
48153F003E151F160F5A1607A212FC1603A46C1501A27EA26C6C91C7FC7F7FEA3FF813FF
6C13F06C13FF15F06C14FE6C6E7E6C15E06C6C806D80010F80010080020F7F02011480EC
001F030313C01500EE3FE0161FA2EE0FF0A20060150712E0A21603A37EA217E0A27EEE07
C07E6C1680160F6CED1F0001C0141ED8FDE05CD8F8F85C017E495A3AF01FE00FE0D8E007
B55A010191C7FC39C0001FF82C497AC739>I<003FBAFCA3903BF8000FFE000701C06D48
130090C7163F007EF01F80007C180FA200781807A300701803A500F019C0481801A5C893
C7FCB3B3A64B7E92383FFF800103B712F8A342467CC54B>I<B600FE0107B512FCA32600
7FFCC8001F13006D48ED07FC6D486F5A725A725AB3B3A9010F5F18018013074E5AA26D6C
4BC7FCA20101160E6D7E027F5D6E5D6E6C5C6E6C5CDA07F0EB03C0DA03FCEB0F80DA00FF
017FC8FC92383FFFFC030F13F00301138046487DC64D>I<EB03FE90383FFFC09038FC03
F03901E000FCD80380137E48C77E486C6D7E01E080001F140F6D80A26F7E6C5AA2EA0380
C8FCA4EC01FF147F903803FF8790381FF007EB7F803801FE00EA03F8485A485A485A123F
5B007F161CA248C7FCA3150FA36C6C131B15336C6C903831F838001F14613B0FF001C0FC
703B03FC0780FFE03B00FFFE003FC0D90FF8EB1F802E2F7CAD34>97
D<EC3FE0903801FFFE903907E01F8090391F8003C0013EC712E001FC1470484814F80003
14034914FC00071407485A121F49EB03F8123FED00E01600127F5BA212FFAA127FA27F12
3F160E121F7F000F151C7F000715386C7E000115706C6C14E0017EEB01C090391F800780
90390FE03E00903801FFFC9038003FE0272F7DAD2E>99 D<EE1FC0ED1FFFA3ED007F163F
161FB3A3EC1FE0903801FFFC903807F01E90391F80079F90393F0001DF017CEB00FF4848
147F0003153F5B4848141F120F121F5B123FA2127F5BA212FFAA127FA36C7EA2121FA26C
7E163F6C7E0003157F6C6C14FF6C6C903801DFE0017E9038039FF0903B1F800F1FFFC090
380FE03E903801FFF89026003FC0EBC00032497DC739>I<EC7F80903803FFF090380FC0
FC90383F003F017CEB1F8049EB0FC00001EC07E0485A4848EB03F0000F15F8A24848EB01
FCA2123FA2484814FE1500A212FFA290B6FCA20180C8FCA6127FA37F123F160E121F7F00
0F151C12076D1438000315706C7E6C6C14E0013EEB03C090391F800700903807E03E9038
01FFF89038003FC0272F7DAD2E>I<49B4EB03F0010F9038E01FFC903A1F83F07C3E903A
7E00FDE07E01F8EB3F800001ED003C484890381F80180007EDC000A248486D7EA2001F81
A7000F5DA26C6C495AA200035D6C6C49C7FC0000143ED801FE13FC90389F83F039030FFF
E0010190C8FC48CAFCA67F7F7F6CB512FEEDFFE06C15F86C15FE6D8048B712802703E000
0113C0D80F809038003FE048C8120F003EED03F0003C1501007C16F80078150012F8A500
7CED01F0A26CED03E0001E16C06CED0780D807C0EC1F006C6C143ED800FCEB01F890393F
800FE0010FB51280010001F8C7FC2F437DAC34>103 D<13FE12FFA3120312011200B3A3
ED7F80913803FFF091380781F891380C007C4A137E4A7F4A804A131F6D5A8391C7FCA35B
B3AA2603FF80EB7FF0B5D8FE1FB512C0A332487CC739>I<EA01F0487E487E487EA56C5A
6C5A6C5AC8FCAE13FE127FA3120312011200B3B1EA03FFB512FCA316467DC51C>I<13FE
12FFA3120312011200B3A492381FFFFEA3030713E06F90C7FCED01FC16F04B5A5E4B5A03
0EC8FC5D15785D4A5A4A5A14074A7E141F4A7EECF3F89038FFE1FC14C1EC80FEEC007F49
7F49806F7E6F7EA26F7E6F7E1501826F7E167FA2707E8383D803FFEC7FF8B5D8FC03B512
C0A332487DC737>107 D<13FE12FFA3120312011200B3B3B3A83803FF80B512FEA31748
7DC71C>I<D801FCD97FC0EB07FC00FF902601FFF890381FFF8091260780FC9038780FC0
91260E003E9038E003E00003011890263F01807F000149903A1F830001F800004902C680
4A14CCD9FD80D90FD8130005F88001FFC75BA3495DB3AA2603FF80D93FF8903803FF80B5
D8FE0FB500E0B512FEA34F2D7CAC56>I<D801FCEB7F8000FF903803FFF091380781F891
380C007C000349137E0001497F000049804A131FEBFD808301FFC7FCA35BB3AA2603FF80
EB7FF0B5D8FE1FB512C0A3322D7CAC39>I<EC3FE0903801FFFC903807E03F90391F800F
C090397E0003F0496D7E48486D7E4848147E0007157F4980000F16804848EC1FC0A2003F
16E0A249140F007F16F0A300FF16F8AA007F16F0A36C6CEC1FE0A3001F16C06C6CEC3F80
A26C6CEC7F000003157E6C6C5C6C6C495A017E495A90391F800FC090390FE03F80902603
FFFEC7FC9038003FE02D2F7DAD34>I<01FE13FF00FF010713E091381F01FC913838007E
0003496D7E000101C06D7E6C6C486D7E707E91C77F496E7E160183A2707EA21880A2177F
18C0AA188017FFA21800A24C5AA24C5A5F6D4A5A804C5A6EEB1F80496C49C7FC027813FE
91381E03F891380FFFE0DA01FEC8FC91CAFCAF3803FF80B512FEA332417DAC39>I<3901
FC01FC00FFEB07FF91380E0F809138181FC000039038303FE000011360000013C0A29039
FD801FC0ED0F80ED070001FFC8FCA45BB3A77F00037FB67EA3232D7EAC28>114
D<90381FF80690B5120E3903F0079E39078001FE000EC7127E5A003C143E48141EA212F8
150EA27EA27E7ED87FC090C7FC13FC383FFFE06C13FE6C6D7E6C14E06C80C614FC011F7F
13019038000FFF02011380EC007F0060EC1FC012E0150F7E1507A37E16807EED0F007E6C
141E6D5BD8F9E05B39F0F803E039E03FFFC026C007FCC7FC222F7DAD29>I<130EA7131E
A4133EA3137EA213FE120112031207001FB512FCB6FCA2C648C7FCB3A4150EAB017E131C
137F7F151890381F803890380FC070903807E0E0903801FFC09038007F001F417EBF28>
I<01FEEC1FC000FFEC1FFFA30003EC007F0001153F0000151FB3A9163FA3167F137EA26D
14DF9238019FE06D9038031FF090260F8006EBFFC0903807F01C903801FFF89026003FE0
EBC000322E7CAC39>I<B500F890387FFFC0A30003018090381FFE006C48C7EA07F80000
ED03E05F7F6D5D6E1307013F92C7FCA26D6C130EA26E131E010F141CA26D6C5BA26E1378
01031470A26D6C5BA2ECFE0101005CA291387F0380A21587023F90C8FC15CFEC1FCEA215
FE6E5AA26E5AA26E5AA36E5AA25DA214035DA24AC9FCA25C140E003C131E007E131CB4FC
5C14781470485B387C01C038380380D81E0FCAFCEA0FFEEA03F832417EAB37>121
D E end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin

%%EndSetup
%%Page: 4 1
4 3 bop 25 160 a Fj(Bac)m(kpropagation)34 b(Algorithm)p
0 321 1947 2 v 0 538 a Fh(Initiali)q(ze)e(all)f(w)n(eigh)n(ts)e(to)h
(small)f(random)e(n)n(um)n(b)r(ers.)0 642 y(Un)n(til)j(satis\014ed,)g
(Do)40 787 y Fi(\017)21 b Fh(F)-7 b(or)28 b(eac)n(h)h(training)h
(example,)g(Do)107 933 y(1.)21 b(Input)29 b(the)g(training)i(example)e
(to)g(the)g(net)n(w)n(ork)195 1036 y(and)g(compute)f(the)h(net)n(w)n
(ork)g(outputs)107 1161 y(2.)21 b(F)-7 b(or)29 b(eac)n(h)f(output)i
(unit)f Fg(k)625 1314 y(\016)663 1327 y Fe(k)723 1314
y Fi( )24 b Fg(o)875 1327 y Fe(k)909 1314 y Fh(\(1)c
Fi(\000)f Fg(o)1133 1327 y Fe(k)1168 1314 y Fh(\)\()p
Fg(t)1265 1327 y Fe(k)1320 1314 y Fi(\000)g Fg(o)1448
1327 y Fe(k)1483 1314 y Fh(\))321 b(\(1\))107 1478 y(3.)21
b(F)-7 b(or)29 b(eac)n(h)f(hidden)i(unit)f Fg(h)520 1632
y(\016)558 1645 y Fe(h)619 1632 y Fi( )24 b Fg(o)771
1645 y Fe(h)807 1632 y Fh(\(1)c Fi(\000)f Fg(o)1031 1645
y Fe(h)1067 1632 y Fh(\))1221 1581 y Fc(X)1115 1692 y
Fe(k)r Ff(2)p Fe(outputs)1401 1632 y Fg(w)1463 1645 y
Fe(h;k)1549 1632 y Fg(\016)1587 1645 y Fe(k)1837 1632
y Fh(\(2\))107 1832 y(4.)i(Up)r(date)29 b(eac)n(h)g(net)n(w)n(ork)g(w)n
(eigh)n(t)g Fg(w)1357 1845 y Fe(i;j)722 1986 y Fg(w)784
1999 y Fe(i;j)875 1986 y Fi( )24 b Fg(w)1047 1999 y Fe(i;j)1133
1986 y Fh(+)19 b(\001)p Fg(w)1353 1999 y Fe(i;j)195 2139
y Fh(where)798 2243 y(\001)p Fg(w)932 2256 y Fe(i;j)1022
2243 y Fh(=)24 b Fg(\021)s(\016)1197 2256 y Fe(j)1228
2243 y Fg(x)1277 2256 y Fe(i;j)1837 2243 y Fh(\(3\))952
2748 y(4)p eop
%%Page: 5 2
5 4 bop 25 160 a Fj(More)34 b(on)g(Bac)m(kpropagation)p
0 321 1947 2 v 40 519 a Fi(\017)21 b Fh(Gradien)n(t)29
b(descen)n(t)g(o)n(v)n(er)f(en)n(tire)i Fb(network)f
Fh(w)n(eigh)n(t)104 623 y(v)n(ector)40 764 y Fi(\017)21
b Fh(Easily)30 b(generalized)h(to)f(arbitrary)f(directed)i(graphs)40
904 y Fi(\017)21 b Fh(Will)32 b(\014nd)c(a)h(lo)r(cal,)i(not)e
(necessarily)i(global)g(error)104 1008 y(minim)n(um)125
1148 y Fa({)21 b Fh(In)29 b(practice,)h(often)g(w)n(orks)e(w)n(ell)j
(\(can)e(run)f(m)n(ultiple)195 1252 y(times\))40 1393
y Fi(\017)21 b Fh(Often)29 b(include)i(w)n(eigh)n(t)e
Fb(momentum)h Fg(\013)379 1530 y Fh(\001)p Fg(w)513 1543
y Fe(i;j)579 1530 y Fh(\()p Fg(n)p Fh(\))25 b(=)f Fg(\021)s(\016)897
1543 y Fe(j)927 1530 y Fg(x)976 1543 y Fe(i;j)1063 1530
y Fh(+)19 b Fg(\013)p Fh(\001)p Fg(w)1338 1543 y Fe(i;j)1405
1530 y Fh(\()p Fg(n)g Fi(\000)g Fh(1\))40 1685 y Fi(\017)i
Fh(Minimizes)30 b(error)e(o)n(v)n(er)h Fb(tr)l(aining)g
Fh(examples)125 1826 y Fa({)21 b Fh(Will)32 b(it)e(generalize)h(w)n
(ell)g(to)e(subsequen)n(t)195 1929 y(examples?)40 2070
y Fi(\017)21 b Fh(T)-7 b(raining)30 b(can)f(tak)n(e)g(thousands)g(of)g
(iterations)i Fi(!)104 2174 y Fh(slo)n(w!)40 2314 y Fi(\017)21
b Fh(Using)29 b(net)n(w)n(ork)g(after)g(training)i(is)e(v)n(ery)g(fast)
952 2748 y(5)p eop
%%Page: 6 3
6 5 bop 25 160 a Fj(Learning)35 b(Hidden)i(La)m(y)m(er)c(Represen)m
(tations)p 0 321 1947 2 v 0 478 a
 7104430 9590979 4078469 4670504 15458713 20063436 startTexFig
 0 478 a
%%BeginDocument: ./bookps/ann-838.epsf
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 567.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 702.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 675.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 648.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 621.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 594.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 540.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 513.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 549.000 135.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 612.000 135.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 675.000 135.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 567.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 702.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 675.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 648.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 621.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 594.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 540.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 513.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 522.000 Line
%@EndLine
%@BeginText
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 487.000 64.000 0.000 0.000 16.000 35.000 rect
%@EndRect
gsave
81.500 495.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(I) -17.500 4.000 S
(n) -12.837 4.000 S
(p) -5.837 4.000 S
(u) 1.162 4.000 S
(t) 8.162 4.000 S
(s) 12.051 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 487.000 190.000 0.000 0.000 16.000 44.337 rect
%@EndRect
gsave
212.168 495.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(O) -21.500 4.000 S
(u) -11.389 4.000 S
(t) -4.389 4.000 S
(p) -0.500 4.000 S
(u) 6.500 4.000 S
(t) 13.500 4.000 S
(s) 17.389 4.000 S
grestore
%@EndText
restore
end
%%EndDocument

 endTexFig
 0 1250 a Fh(A)28 b(target)i(function:)p 0 1272 925 2
v -1 1376 2 104 v 25 1345 a(Input)389 b(Output)p 923
1376 V 0 1378 925 2 v -1 1481 2 104 v 25 1450 a(10000000)50
b Fi(!)g Fh(10000000)p 923 1481 V -1 1585 V 25 1554 a(01000000)g
Fi(!)g Fh(01000000)p 923 1585 V -1 1689 V 25 1658 a(00100000)g
Fi(!)g Fh(00100000)p 923 1689 V -1 1793 V 25 1762 a(00010000)g
Fi(!)g Fh(00010000)p 923 1793 V -1 1897 V 25 1865 a(00001000)g
Fi(!)g Fh(00001000)p 923 1897 V -1 2000 V 25 1969 a(00000100)g
Fi(!)g Fh(00000100)p 923 2000 V -1 2104 V 25 2073 a(00000010)g
Fi(!)g Fh(00000010)p 923 2104 V -1 2208 V 25 2177 a(00000001)g
Fi(!)g Fh(00000001)p 923 2208 V 0 2210 925 2 v 0 2333
a(Can)29 b(this)h(b)r(e)f(learned??)952 2748 y(6)p eop
%%Page: 7 4
7 6 bop 25 160 a Fj(Learning)35 b(Hidden)i(La)m(y)m(er)c(Represen)m
(tations)p 0 321 1947 2 v 0 529 a Fh(A)28 b(net)n(w)n(ork:)0
533 y
 7104430 9590979 4078469 4670504 15458713 20063436 startTexFig
 0 533 a
%%BeginDocument: ./bookps/ann-838.epsf
/MAV 300 dict def
MAV begin 
/useClip true def 
/top    0 def 
/left   1 def 
/bottom 2 def 
/right  3 def 
/CM     6 array def 
/CTM    6 array def 
/CTMR   6 array def 
/MTC    6 array def 
/blimit 1500 def 
/bcnt   0 def 
/rbox 8 array def 
/segbox 8 array def 
/bbox1 4 array def 
/c1 3 array def 
/c2 3 array def 
/d 3 array def    
/delta 3 array def 
/mycurrentrgbcolor 3 array def 
/ulx 0 def 
/uly 1 def 
/llx 2 def 
/lly 3 def 
/urx 4 def 
/ury 5 def 
/lrx 6 def 
/lry 7 def 
/sp [0 0] def 
/ep [0 0] def 
/bbox 4 array def 
/pbox 4 array def 
/scrnProc currentscreen 3 1 roll pop pop def
/currentcolorscreen where {
begin
currentcolorscreen
end
3 1 roll pop pop 
4 2 roll pop pop 
5 -2 roll pop pop 
6 -2 roll pop pop 
/kProc exch def 
/bProc exch def 
/gProc exch def 
/rProc exch def 
} if 
/Max {2 copy gt {pop}{exch pop} ifelse} bind def
/Min {2 copy lt {pop}{exch pop} ifelse} bind def
/cellPenW 72.0 /currentcolorscreen where
{begin currentcolorscreen end pop pop
10 1 roll pop pop 8 1 roll pop pop
 6 1 roll pop pop Max Max Max }
{currentscreen pop pop} ifelse div 2.0 div def
/rect { 
 /saveobj save def 
 R PC PF LC SS 
 saveobj restore 
} bind def 
/R { 
 newpath
 pbox astore pop
 0 792 translate 1 -1 scale CTMR currentmatrix pop exch translate
 /objectCord mstore def
 pbox right get 2 div
 dup pbox left get exch sub
 pbox left 3 -1 roll put 
 dup pbox right 3 -1 roll put
 pbox bottom get 2 div 
 dup pbox top get exch sub
 pbox top 3 -1 roll put
 dup pbox bottom 3 -1 roll put
 translate 
 CTM currentmatrix pop
 57.3 mul rotate
 RT
} bind def
 /SaveScreenBW {
 currentscreen
 /scrnProc exch def
 /scrnAngle exch def
 /scrnFreq exch def
 } bind def
 /RestoreScreenBW {
 scrnFreq scrnAngle MAV /scrnProc get setscreen
 } bind def
 /SetFreqAngleBW {
 currentscreen
 3 1 roll
 pop pop
 setscreen
 } bind def
 /SaveScreenColor {
 currentcolorscreen
 /grayProc exch def
 /grayAngle exch def
 /grayFreq exch def
 /bProc exch def
 /bAngle exch def
 /bFreq exch def
 /gProc exch def
 /gAngle exch def
 /gFreq exch def
 /rProc exch def
 /rAngle exch def
 /rFreq exch def
 } bind def
 /RestoreColorScreen {
 rFreq rAngle MAV /rProc get gFreq gAngle MAV /gProc get bFreq bAngle MAV /bProc get grayFreq grayAngle MAV /grayProc get setcolorscreen
 } bind def
 /SetFreqAngleColor { 
 currentcolorscreen 
 3 1 roll pop pop
 4 2 roll pop pop
 5 -2 roll pop pop
 6 -2 roll pop pop
 4 1 roll 
 6 1 roll 
 8 1 roll 
 10 1 roll 
 setcolorscreen 
 } bind def 
/initmsaverestore { 
userdict begin 
/mdict 10 dict def 
mdict begin 
/mindex -1 def 
/mstacksize 25 def 
/mstack mstacksize array def 
/incmindex { 
/mindex mindex 1 add def 
} bind def 
/decmindex { 
/mindex mindex 1 sub def 
} bind def 
/checkmindex { 
mindex 0 lt { 
(%ERROR: msave/mrestore stack underflow: Offending command 'mrestore'
) print flush 
stop 
} 
{ 
mindex mstacksize ge { 
(%ERROR: msave/mrestore stack overflow: Offending command 'msave'
) print flush 
stop 
} if 
} ifelse 
} bind def 
/mpush { 
incmindex 
checkmindex 
mstack mindex 
3 -1 roll put 
} bind def 
/mpop { 
checkmindex 
mstack mindex get 
decmindex 
} bind def 
end 
end 
} bind def 
/msave { 
mdict begin 
matrix currentmatrix mpush 
end 
} bind def 
/mrestore { 
mdict begin 
mpop setmatrix 
end 
} bind def 
/msavelevel { 
mdict begin 
mindex 1 add 
end 
} bind def 
/mstore {
matrix currentmatrix
} bind def
/AutoSizeY {
0 0 pl
dup 3 1 roll
4 -1 roll  
add
pl exch pop
exch sub
} bind def
/pl {  
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bind def
/pll {
transform
round exch
round exch
itransform
} bind def
/pr { 
dtransform
round exch
round exch
idtransform
} bind def
/m { 
pl  moveto
} bind def
/l { 
pl lineto
} bind def
/c { 
pl curveto
} bind def
/rm { 
pr rmoveto
} bind def
/rl { 
pr rlineto
} bind def
/ar { 
5 -2 roll pl
5 2 roll
arc
} bind def
/an { 
5 -2 roll pl
5 2 roll
arcn
} bind def
/MakePatternFont {
/FontDict 20 dict def
FontDict begin
/FontName exch def
/Encoding exch def
/FontMatrix [1 0 0 1 0 0 ] def
/FontType 3 def
/FontBBox [ 0 0 1 1 ] def
/PatternDict exch def
/RenderPattern {
patternDict exch get
exec
} bind def
/BuildChar {
exch begin
1 0 0 0 1 1 setcachedevice
Encoding exch get RenderPattern
end
} bind def
FontName FontDict definefont pop
end
} bind def
/SnapToPattenGrid
	{
	exch
	dup 0 lt {
		1 index sub
	} if
	1 index
	div truncate
	mul
} bind def
/FillPatternString {
dup length
1 sub
0 1 3 -1 roll {
2 index
2 index
3 -2 roll
put
} for
pop pop
} bind def
/AutoSizeY {
	0.0 exch dtransform
	round
	idtransform exch pop
} bind def
 /AutoSizeX {
	0.0 dtransform
	exch
	round
	exch
	idtransform pop
} bind def 
/AutoCellSize {
	AutoSizeY
	exch
	AutoSizeX
	exch
} bind def
/CheckPath {
	false
	{ pop pop pop true exit}
	{ pop pop pop true exit}
	{ pop pop pop pop pop pop pop true exit}
	{ pop true exit}
	pathforall
} bind def
/PatternFill {					%		patternCharacter
	/patternString 1 string def
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/patternSize exch 24.0 mul def
	/PatternSizeX exch 24.0 mul patternString length mul def
	/flaterror 0 def
	patternString FillPatternString
	gsave
		flaterror 1 add setflat
		flattenpath
		pathbbox
	grestore
	psy add flaterror add psy SnapToPattenGrid
	exch psx add flaterror add psx SnapToPattenGrid
	3 -1 roll flaterror sub psy SnapToPattenGrid
	4 -1 roll flaterror sub psx SnapToPattenGrid
	4 2 roll pll
	4 2 roll pll
	/llxsnap exch def
	/llysnap exch def
	/urxsnap exch def
	/urysnap exch def
	gsave
		useClip true eq {clip}{eoclip} ifelse newpath
		/PatternFont findfont [psx 0.0 0.0 psy 0.0 0.0] makefont setfont
		llysnap patternSize urysnap {
			llxsnap exch moveto
			llxsnap PatternSizeX urxsnap {
				pop
				patternString show
				%currentpoint am
			} for
		} bind for
	grestore
	cm setmatrix
} bind def				%		End 'PatternFill'
/DefaultPatternFont {
	/cm mstore def
	patternMatrix setmatrix
	1 1 AutoCellSize
	dup 0 eq { pop 1} if
	exch
	dup 0 eq { pop 1} if
	exch
	/psy exch iSizeY mul def
	/psx exch iSizeX mul def
	/patternDict 64 dict def
	patternDict begin
		/NotDef {} def
		/LiteDiagLines {
			iSizeX iSizeY false [iSizeX 0.0 0.0 iSizeY -1.0 mul  0.0 iSizeY]
			{pat}
			imagemask
		} bind def
	end
	/CustEncoding 256 array def
	0 255 1 {
		CustEncoding exch /NotDef put
	} bind for
	CustEncoding 65 /LiteDiagLines put
	patternDict CustEncoding /PatternFont MakePatternFont
	/pathSegProc {
		strokepath
		CheckPath {
			65 PatternFill newpath
		} if
	} bind def
	cm setmatrix
} bind def
/XRound {
	dup
	3 -1 roll
	exch mul round
	exch div
} bind def
/RoundMatrix {
	/i 0 def
	dup {
		100000.0 XRound
		1 index
		exch i exch put
		/i i 1 add def
	} forall
} bind def
/GetBoxesRatio {
3 -1 roll sub
7 1 roll
exch sub
6 1 roll
3 -1 roll sub
5 1 roll
exch sub
4 1 roll
3 -1 roll div
3 1 roll
exch div
exch
} bind def
/T {792 exch sub} bind def
/sx 0 def
/sy 0 def
/ex 0 def
/ey 0 def
/lw  0 def
/siz 0 def
/U {gsave 0 setlinecap
/lw siz 0.078125 mul def  /ey exch neg def /ex exch def /sy exch neg def /sx exch def
fontkind plain eq 
 {
  lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
 }
 {
   currentdict /outlineFontSize known outlineFontSize 0 gt and
     {
       fontkind outline eq
         {
           /sy sy 0.0119444 siz mul sub def
           /ey ey 0.0119444 siz mul sub def
           gsave 
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
       fontkind shadow eq fontkind outlineshadow eq or
         {
           /sy sy 0.0358332 siz mul sub def
           /ey ey 0.0358332 siz mul sub def
           lw setlinewidth
           lw 2 div sx add sy
           lw 2 div sub moveto
           lw 2 div ex add ey
           lw 2 div sub lineto stroke 
           gsave
           1 1 1 setrgbcolor lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto stroke
           grestore
           lw siz 0.0119444 mul sub setlinewidth sx sy moveto ex ey lineto
           strokepath 0.0119444 siz mul setlinewidth stroke
         } if
      } if
 } ifelse
grestore} bind def
/plain 1 def
/outline 2 def
/shadow 3 def
/outlineshadow 4 def
/fess {
	currentdict /outlineFontSize known {
		/outlineFontSize 2 index def
	} if
	findfont exch dup /siz exch def scalefont setfont
} bind def
/SHDW {gsave siz oldfontname fess siz 0.055 mul x add y siz 0.05 mul sub moveto c show grestore} def
/NRML {gsave 1 1 1 setrgbcolor siz oldfontname fess x y moveto c show grestore siz /Outline fess  x y moveto c show} def
/S {
fontkind plain eq {neg moveto show} if
fontkind outline eq {neg /y exch def /x exch def /c exch def NRML} if
fontkind shadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
fontkind outlineshadow eq {neg /y exch def /x exch def /c exch def SHDW NRML} if
} bind def
/F {
/fontkind exch def
fontkind plain eq {fess} if
fontkind outline eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind shadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
fontkind outlineshadow eq {dup /oldfontname exch def exch dup /siz exch def exch OLF} if
} bind def
/makeoutlinedict 15 dict def
/makeoutlinefont
 {
  makeoutlinedict begin
   /uniqueid exch def
   /strokewidth exch def
   /newfontname exch def
   /basefontname exch def
   FontDirectory basefontname known not {
    /basefontname /Times-Roman def
   } if
   /basefontdict basefontname findfont def
   /numentries basefontdict maxlength 1 add def
   basefontdict /UniqueID known not
   {/numentries numentries 1 add def} if
   /outfontdict numentries dict def
   basefontdict
   {
     exch dup /FID ne {exch outfontdict 3 1 roll put} {pop pop} ifelse
	  }forall
   outfontdict /FontName newfontname put
   outfontdict /PaintType 2 put
   outfontdict /StrokeWidth strokewidth put
   outfontdict /UniqueID uniqueid put
   newfontname outfontdict definefont pop
  end
  }def
/UID {
 findfont dup /UniqueID known
  {/UniqueID get 1 add}
  {pop 1}
  ifelse
} def
/OLF {
dup
/Outline
1000 62 div
4 -1 roll
UID
/outlineFontSize 5 index def
makeoutlinefont
/Outline findfont exch scalefont setfont
} def
/CopyEncoding {
findfont
/Encoding get
dup length array
/tarrayz exch def
tarrayz 0
3 -1 roll
putinterval
tarrayz
} bind def
/Re-encode {
dup length array copy
/eap 0 def
exch {
dup type /integertype eq {
/eap exch def
} {
1 index
exch
eap exch
put
/eap eap 1 add def
} ifelse
} forall
} bind def
/EncodeFont	{
findfont dup
length dict
begin
{	1 index /FID ne
{ def }
{ pop pop } ifelse
} forall
/FontName exch def
/Encoding exch def
FontName currentdict
end
definefont pop
} bind def
/clip2pathbbox {
	/magicNum linewidth 2 div 1 2 sqrt div mul def
	pathbbox
	/urymn exch magicNum add def
	/urxmn exch magicNum add def
	/llymn exch magicNum sub def
	/llxmn exch magicNum sub def
	newpath llxmn llymn moveto llxmn urymn lineto urxmn urymn lineto urxmn llymn lineto
	closepath clip newpath
} bind def
/Line {
MAV /LC get length 0 ne
{
	gsave
			newpath
			MAV /ArrowType get length 0 eq
			MAV /SD get length 0 eq and
			{2 setlinecap /UseClip {clip2pathbbox} def }
			{0 setlinecap /UseClip {} def } ifelse
			0 792 translate
			1 -1 scale
			CTM currentmatrix pop
			/yStart exch def /xStart exch def /yEnd exch def /xEnd exch def /linewidth exch def
			MAV /ArrowType get length 0 eq xStart xEnd ne yStart yEnd ne and and
			{xStart yStart moveto xEnd yEnd lineto UseClip xStart yStart moveto xEnd yEnd lineto}
			{xStart yStart moveto xEnd yEnd lineto} ifelse
			linewidth setlinewidth SD strokepath
			CheckPath {LC PF ArrowType} if
	grestore
}
{pop pop pop pop pop} ifelse
} bind def
/ZeroLine {
	gsave
		newpath
		MAV /ArrowType get length 0 ne {
			/UseClip {} def
			0 792 translate
			1 -1 scale
			pop pop pop pop pop
			CTM currentmatrix pop
			ArrowType
		} if
	grestore
} bind def
/CompensateForStroke {
	sin currentlinewidth mul
	exch
	cos currentlinewidth mul
	dup 0 translate
	4 -1 roll exch 2.0 mul sub
	3 1 roll
	2.0 mul sub
} bind def
/arrowdict 10 dict def
arrowdict begin
	/SwallowTail {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		.666 0.0 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/Triangular {
		newpath
		0.0 0.0 moveto
		1.0 -.5 lineto
		1.0 .5 lineto
		closepath
	} bind def
	/OpenTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
	} bind def
	/ClosedTri {
		newpath
		1.0 0.5 moveto
		0.0 0.0 lineto
		1.0 -0.5 lineto
		closepath
	} bind def
	/SlashBar {
		newpath
		0.5 -.5 moveto
		-.5 0.5 lineto
	} bind def
	/Dot {
		newpath
		0.5 0.0 moveto
		0 0 1 0 360 arc
		closepath
	} bind def
	/ExtSlashBar {
		newpath
		1.0 -.5 moveto
		0.0 0.5 lineto
	} bind def
end
/ScaleArrowHead {
	0 0 4 -2 roll
	0 0 1 1
	8 -4 roll GetBoxesRatio
	scale
} bind def
/DrawArrowHead {
	gsave
	[] 0 setdash
	currentpoint translate rotate
	{
		4 copy
		gsave
			initmatrix
			100 200 translate
			msave
				ScaleArrowHead pop
				arrowdict exch get exec
			mrestore
			strokepath
			0 0 3 index 3 index
			pathbbox 8 4 roll
			GetBoxesRatio
			4 2 roll
		grestore
		3 index 1.0 exch sub
		6 -1 roll
		{
			2 index mul
			0 translate
		}{
			pop
		} ifelse
		msave
			ScaleArrowHead scale
			arrowdict exch get exec
		mrestore
		strokepath
	} {
		msave
		ScaleArrowHead
		arrowdict exch get exec
		mrestore
	} ifelse
		CheckPath {
			LC PF
		} if
	grestore
} bind def
/SR { 
 pbox left get pbox top get moveto 
 pbox right get pbox top get lineto 
 pbox right get pbox bottom get lineto 
 pbox left get pbox bottom get lineto 
 closepath
} bind def 
/E {
1.415 setmiterlimit
CM currentmatrix pop
pbox right get pbox left get sub abs dup
pbox bottom get pbox top get sub abs dup 3 -1 roll
lt {exch dup 3 -1 roll exch div 1 exch}
{dup 3 -1 roll exch div 1} ifelse scale 
0 0 3 -1 roll 2 div 0 360 arc closepath
CM setmatrix
} bind def
/StripFromFront { 
dup length
2 index sub
3 1 roll
exch 3 -1 roll
getinterval
} bind def
/MakePathArray { 
 /k 0 def 
 {/k k 1 add def pop pop}{/k k 1 add def pop pop}{/k k 1 add def pop pop pop pop pop pop}{/k k 1 add def }pathforall 
 k array
 /k 0 def 
 {{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{curveto} 7 array astore 1 index k 3 -1 roll put /k k 1 add def} 
 {{closepath} 1 array astore 1 index k 3 -1 roll put /k k 1 add def} 
pathforall 
}bind def 
/MakeFlatPathArray { 
/k 0 def 
{/k k 1 add def pop pop}{/k k 1 add def pop pop}{pop pop pop pop pop pop}{}pathforall 
k array
/k 0 def 
{{moveto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{{lineto} 3 array astore 1 index k 3 -1 roll put /k k 1 add def} 
{ pop pop pop pop pop pop} 
{} 
pathforall 
}bind def 
/FractionalLine {
2 index sub
.00001 mul
exch
3 index sub
.00001 mul
4 -1 roll add
3 1 roll
add
} bind def
/calcLineLength {
 exch
 4 -1 roll
 sub
 dup mul
 3 1 roll exch
 sub
 dup mul
 add sqrt
} bind def
/InitTotalLineLength {
 /oldY exch def
 /oldX exch def
 theDash aload pop currentLineLength add setdash
} bind def
/AccumeLineLength {
 3 copy pop
 2 copy
 oldX oldY
 4 2 roll calcLineLength
 /segmentLength exch def
 /currentLineLength currentLineLength segmentLength add def
 /oldY exch def
 /oldX exch def
} bind def
/DecumeLastLineLength {
 /currentLineLength currentLineLength segmentLength sub def
} bind def
/DrawFlattendSegment {
 /pointCount 2 def
 dup 0 lt { pop 0 } if
 fpc
 3 1 roll
 2 index
 1 index
 gt {
 2 copy get
 dup length
 dup 3 eq {
 pop
 dup 0 get
 exch 1 get
 2 copy InitTotalLineLength  
 m
 } {
 } ifelse
 } {
 pop 1 index
 } ifelse
 dup 1 add
 3 index
 exch sub
 dup 10 gt { pop 10} if
 {
 1 add
 2 copy
 get aload pop
 AccumeLineLength
 exec
 } repeat
 3 1 roll pop pop
 DecumeLastLineLength
} bind def
/IncFPC {
 fpc add
 /fpc exch def
} bind def
/DrawFlatPathArray {
 fpc
 0 { 
 dup 2 index
 1 sub
 lt { 
 flatPathArray exch
 newpath
 1 sub DrawFlattendSegment
 gsave
 pathSegProc
 grestore
 newpath
 }
 {
 pop pop
 exit
 } ifelse
 } loop
} bind def
/RecordFirstSubSegment {
 closepathArray 0 pathArray 0 get
 put
 closepathArray 1
 pathArray 0 get aload pop pop
 pathArray 1 get dup length 3 eq {
 aload pop pop
 } {
 newpath
 0 0 moveto
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 segmentArray 1 get aload pop pop
 } ifelse
 FractionalLine {lineto} 3 array astore
 put
} bind def
/AppendClosePath {
 closepathArray 0 get 2 {lineto} put
 flatPathArray fpc closepathArray 0 get put
 1 IncFPC
 flatPathArray fpc closepathArray 1 get put
 1 IncFPC
} bind def
/RecordCurrentDash {
 /theDash
 currentdash 2 array astore def
 /currentLineLength 0 def
} bind def
/PatternStroke {
	0 setlinecap
 RecordCurrentDash
 /saveFlat currentflat def
 .5 setflat
 /pathArray MakePathArray def
 /closepathArray 2 array def
 /pathLength pathArray length def
 /flatPathArray 513 array def
 /currentLineLength 0 def
 /fpc 0 def
 pathArray pathLength 1 sub get
 length 1 eq {
 /usingClosepath true def
 RecordFirstSubSegment
 /pathLength pathLength 1 sub def
 } {
 /usingClosepath false def
 } ifelse
 0 1 pathLength 1 sub {
 pathArray exch get
 dup length 3 eq {
 fpc 1 add 512 ge {
 DrawFlatPathArray
 fpc 2 ge {
 flatPathArray flatPathArray fpc 2 sub get 0 put
 flatPathArray flatPathArray fpc 1 sub get 1 put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } if
 flatPathArray exch fpc exch put
 1 IncFPC
 } {
 dup length 7 eq {
 newpath
 /nToStrip 0 def
 fpc 1 gt {
 flatPathArray fpc 2 sub get aload pop pop m
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } {
 fpc 1 eq {
 flatPathArray fpc 1 sub get aload pop exec
 /nToStrip 2 def
 } if
 } ifelse
 aload pop exec
 /segmentArray flattenpath MakeFlatPathArray def
 /segmentArray nToStrip segmentArray StripFromFront def
 segmentArray length fpc add 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 segmentArray length 512 lt {
 flatPathArray fpc segmentArray putinterval
 segmentArray length IncFPC
 } {
 segmentArray length
 /exitLoop false def
 0 
 {
 2 copy sub
 dup 500 gt {
 pop 500
 } { 
 /exitLoop true def
 } ifelse 
 segmentArray 2 index 2 index getinterval
 flatPathArray fpc 3 -1 roll putinterval
 dup IncFPC
 add 
 exitLoop {
 exit 
 } {
 DrawFlatPathArray
 fpc 1 gt {
 flatPathArray flatPathArray fpc 2 sub get 0 exch put
 flatPathArray flatPathArray fpc 1 sub get 1 exch put
 /fpc 2 def
 }{
 /fpc 0 def
 } ifelse
 } ifelse
 } loop
 } ifelse
 } ifelse
 } if
 } ifelse
 } for
 fpc 0 gt {
 usingClosepath {
 AppendClosePath
 } if
 DrawFlatPathArray
 } if
 saveFlat setflat
} bind def

initmsaverestore
/tctm matrix currentmatrix def
tctm RoundMatrix setmatrix
/patternMatrix mstore def
10 setmiterlimit
2 setlinecap
newpath
%
%tLayer
%
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 567.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 702.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 675.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 648.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 621.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 594.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 540.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 513.000 63.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 549.000 135.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 612.000 135.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 675.000 135.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfBegGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 567.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 702.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 675.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 648.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 621.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 594.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 540.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginOval
/RT {E} def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PC { /setcmykcolor where
 {begin 0.000 0.000 0.000 0.000 setcmykcolor end} {1.000 1.000 1.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
1.000 0 513.000 207.000 0.000 0.000 18.000 18.000 rect
%@EndOval
%
%tfEndGrp
%
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 558.000 207.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 621.000 207.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 153.000 684.000 207.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 558.000 81.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 522.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 630.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 621.000 81.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 711.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 684.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 657.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 603.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 576.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 549.000 Line
%@EndLine
%@BeginRuler
%@  9.0000000000000000000e+0 viewScale
%@  1.1111111111111110490e-1 realScale
%@ 8 realDivs
%@ 0000 rulerFormat
%@EndRuler
%@BeginLine
/ArrowType{ } def
/SD {} def
/SS {setlinewidth SD stroke} def
/LC { /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 
} def
/PF {gsave fill grestore} def
/SS {setlinewidth SD stroke} def
1.000 135.000 684.000 81.000 522.000 Line
%@EndLine
%@BeginText
save
[ 39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/.notdef/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron]
StandardEncoding Re-encode /_Times-Roman /Times-Roman EncodeFont

%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 487.000 64.000 0.000 0.000 16.000 35.000 rect
%@EndRect
gsave
81.500 495.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) plain F
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(I) -17.500 4.000 S
(n) -12.837 4.000 S
(p) -5.837 4.000 S
(u) 1.162 4.000 S
(t) 8.162 4.000 S
(s) 12.051 4.000 S
grestore
%@EndText
%@BeginText
%@BeginRect
/RT {SR} def
/LC {} def
/SS {pop} def
/PF {} def
/PC {} def
0.000 0 487.000 190.000 0.000 0.000 16.000 44.337 rect
%@EndRect
gsave
212.168 495.000 T translate
0.0 rotate
1 1 scale
14.000 (_Times-Roman) fess
 /setcmykcolor where
 {begin 0.000 0.000 0.000 1.000 setcmykcolor end} {0.000 0.000 0.000 setrgbcolor} ifelse 

(O) -21.500 4.000 S
(u) -11.389 4.000 S
(t) -4.389 4.000 S
(p) -0.500 4.000 S
(u) 6.500 4.000 S
(t) 13.500 4.000 S
(s) 17.389 4.000 S
grestore
%@EndText
restore
end
%%EndDocument

 endTexFig
 0 1304 a Fh(Learned)g(hidden)i(la)n(y)n(er)f(represen)n(tation:)p
0 1327 1540 2 v -1 1430 2 104 v 93 1399 a(Input)334 b(Hidden)299
b(Output)p 1539 1430 V -1 1534 V 648 1503 a(V)-7 b(alues)p
1539 1534 V -1 1638 V 25 1607 a(10000000)50 b Fi(!)g
Fh(.89)g(.04)g(.08)f Fi(!)h Fh(10000000)p 1539 1638 V
-1 1742 V 25 1711 a(01000000)g Fi(!)g Fh(.01)g(.11)g(.88)f
Fi(!)h Fh(01000000)p 1539 1742 V -1 1846 V 25 1814 a(00100000)g
Fi(!)g Fh(.01)g(.97)g(.27)f Fi(!)h Fh(00100000)p 1539
1846 V -1 1949 V 25 1918 a(00010000)g Fi(!)g Fh(.99)g(.97)g(.71)f
Fi(!)h Fh(00010000)p 1539 1949 V -1 2053 V 25 2022 a(00001000)g
Fi(!)g Fh(.03)g(.05)g(.02)f Fi(!)h Fh(00001000)p 1539
2053 V -1 2157 V 25 2126 a(00000100)g Fi(!)g Fh(.22)g(.99)g(.99)f
Fi(!)h Fh(00000100)p 1539 2157 V -1 2261 V 25 2230 a(00000010)g
Fi(!)g Fh(.80)g(.01)g(.98)f Fi(!)h Fh(00000010)p 1539
2261 V -1 2364 V 25 2333 a(00000001)g Fi(!)g Fh(.60)g(.94)g(.01)f
Fi(!)h Fh(00000001)p 1539 2364 V 0 2366 1540 2 v 952
2748 a(7)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
